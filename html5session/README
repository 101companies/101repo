== Intent ==

[[web programming]] with [[Language:HTML5]]

== Languages ==

* [[Language:HTML5]]
* [[Language:JavaScript]]

== Technologies ==

* [[JSON]]
* An HTML5-compliant browser

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Persistence]]
* [[101feature:Interaction]]

== Motivation == 

This is a simple implementation of the basic [[101section:Features|101companies-features]] in [[Language:HTML5|HTML5]]. It provides [[client-side storage]] for the data, which are deleted after closing the session. Apart from that, it is mostly identical to [[101implementation:html5local]].

== Illustration ==

Most of the web application is written in [[Language:JavaScript|JavaScript]]. The data is stored in a storage-object (''sessionStorage''). During the session, this object provides string-based persistence. If session-overlapping storage is needed, the sessionStorage-object can be replaced by ''localStorage'' ([[101implementation:html5local]]).

 <syntaxhighlight lang="javascript">
 var storageObject = sessionStorage;
 </syntaxhighlight>

The data-structure is defined with classes. The company contains departments and departments contain subdepartments and employees.

 <syntaxhighlight lang="javascript">
 function Department (name) {
 	this.name = name;
 	this.employees = new Array();
 	this.subdepartments = new Array();
 }
 </syntaxhighlight>

The data-structure is a tree, which can be traversed to [[101feature:Cut|cut]] salaries or determine the [[101feature:Total|total]] of the whole company or individual departments. The tree can be stringified with [[Technology:JSON|JSON]] and stored in the storage-object. The example shows the [[101feature:Total|total]] feature for the company:

 <syntaxhighlight lang="javascript">
 function totalCompany(company) {
 	var total = 0;
 	var len = company.departments.length;
 	for (var i = 0; i < len; i++) {
 		total += totalDepartment(company.departments[i]);
 	}
 	return total;
 }

 function totalDepartment(department) {
 	var total = 0;
 	var len = department.subdepartments.length;
 	for (var i = 0; i < len; i++) {
 		total += totalDepartment(department.subdepartments[i]);
 	}
 	var lenEmp = department.employees.length;
 	for (var i = 0; i < lenEmp; i++) {
 		total += department.employees[i].salary;
 	}
 	return total;
 }
 </syntaxhighlight>

Because of the "stringification" the objects do NOT have backward links, otherwise there would be infinite loops. Thats why some operations are more complicate and there is a need for a history-stack. This history-stack stores the index of the last visited department and the departments on the same level.

== Architecture ==

There is no special architecture for [[Language:HTML5|HTML5]] [[session storage]]. The classes and functions are all defined in the index.html.

== Usage ==

There are two possible ways to run this application:

* Chrome: Just open the index.html with your web-browser
* This HTML5-program does not work over file-protocol when using Firefox. In this case, you need access over http. To gain access over http, you can use, for example, XAMPP to create a webserver.

# Download XAMPP from http://www.apachefriends.org/en/xampp.html
# Install XAMPP
# Deploy the index.html to your htdocs-directory (for example: E:\xampp\htdocs\101implementation-html5\)
# Start the XAMPP-Control Panel and activate Apache
# Start your web-browser
# Call http://localhost/101implementation-html5/index.html

== Contributors ==

* {{101contributor|Tobias Zimmer|developer}}