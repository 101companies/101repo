== Intent ==

 [[Language:Haskell|Haskell]] data/[[Language:XML|XML]] mapping with [[Technology:Pickler]]

== Languages ==

* [[Language:XML]]
* [[Language:Haskell]]

== Technologies ==

* [[Technology:HXT]]: Haskell XML Toolbox
* [[Technology:Pickler]] (comes with HXT)
* [[Technology:GHCi]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

We exercise Haskell data/XML mapping by making use of [[Technology:HXT]]'s [[Technology:Pickler|pickler]] arrows and functions. 

That is, we declare XmlPickler instances for companies,departments and employees and define appropriate pickler functions. 
This enables us to [[101feature:Serialization|serilize]] serilize values of an algebraic datatype (much like the one in [[101implementation:haskell]]) as XML data.
We demonstrate declaring and using picklers by:
* Declaring XMLPickler instances.
* Using predefined picklers such as xpPrim for primitive values
* Using combinators for lists (xpList), option( xpOption) and alternative (xpAlt).
* The wrapper pickler xpWrap.
* Using those picklers to pickle and unpickle xml documents.

== Illustration ==

TBD

== Architecture ==

TBD

== Usage ==

The Haskell module ''Main'' has to be consulted with GHCi, and the
''main'' function has to be applied so that output for the test
scenarios is produced. The ''expected'' output is available through
the file ''baseline''. There is a ''Makefile'' with a target ''test''
for [[test automation]].
Use the taget ''clean'' to "reset" the project.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}