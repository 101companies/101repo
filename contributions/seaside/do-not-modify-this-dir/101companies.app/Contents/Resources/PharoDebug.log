THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Department>>manager:
8 April 2011 4:08 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

Department(Object)>>doesNotUnderstand: #manager:
	Receiver: a Department
	Arguments and temporary variables: 
		aMessage: 	manager: an Employee
		exception: 	MessageNotUnderstood: Department>>manager:
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	'Research'
		employees: 	an OrderedCollection()
		subdepartments: 	an OrderedCollection()
		manager: 	nil


ManyCompaniesTest class>>createTestModel
	Receiver: ManyCompaniesTest
	Arguments and temporary variables: 
		company: 	a Company
		research: 	a Department
		development: 	a Department
		dev1: 	a Department
		dev11: 	a Department
	Receiver's instance variables: 
		superclass: 	SUnitTest
		methodDict: 	a MethodDictionary(#testTotal->(ManyCompaniesTest>>#testTotal "a Co...etc...
		format: 	138
		instanceVariables: 	nil
		organization: 	('tests' testTotal)

		subclasses: 	nil
		name: 	#ManyCompaniesTest
		classPool: 	nil
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'101companies'
		traitComposition: 	nil
		localSelectors: 	nil
		history: 	a Dictionary(#errors->a Set(#testTotal) #failures->a Set() #passed->a ...etc...


ManyCompaniesTest>>testTotal
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 
		company: 	nil
	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>performTest
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	ManyCompaniesTest>>#testTotal
	Receiver's instance variables: 
		target: 	OBMethodNode<ManyCompaniesTest#testTotal>
		requestor: 	an OBColumn(testTotal)


[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		each: 	an OBCmdRunTests
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBCmdRunTests)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBCmdRunTests nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		aCharacter: 	$t
		aNode: 	OBMethodNode<ManyCompaniesTest#testTotal>
		aRequestor: 	an OBColumn(testTotal)
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


[] in OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	OBMethodNode<ManyCompaniesTest#testTotal>
		scan: 	$t
		each: 	an OBNodeCommandScan
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OrderedCollection>>reverseDo:
	Receiver: an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101companies> OBClassNode<Ma...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(scan
			processKeystroke: aCharacter
			withNode: each
			fo...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBEnvironmentNode OBClassCategoryNode<101companies> ...etc...
		firstIndex: 	3
		lastIndex: 	7


OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	$t
		aMorph: 	an OBPluggableListMorph(234356736)
		scan: 	an OBNodeCommandScan
		nodes: 	an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101compani...etc...
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		aChar: 	$t
		args: 	2
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>keyStroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		event: 	[keystroke '<Cmd-t>']
		aChar: 	$t
		aSpecialKey: 	116
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>handleKeystroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-t>']
	Arguments and temporary variables: 
		anObject: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		timeStamp: 	1037069
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	1125@4
		handler: 	nil
		wasHandled: 	true
		keyValue: 	116
		charCode: 	116
		scanCode: 	17


OBPluggableListMorph(Morph)>>handleEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
		localEvt: 	[keystroke '<Cmd-t>']
		index: 	2
		child: 	a TransformMorph(822607872)
		morphs: 	an Array(a TransformMorph(822607872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


OBPluggableListMorph(Morph)>>processEvent:using:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>processEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1130@32 corner: 1146@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1130@32 corner: 1146@48
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1130@32 1130@32 mouseMove CMD 1037006 nil]
		targetOffset: 	46@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1037006 1130 32 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(723255296) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(723255296) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1130@32 corner: 1146@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1130@32 corner: 1146@48
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1130@32 1130@32 mouseMove CMD 1037006 nil]
		targetOffset: 	46@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1037006 1130 32 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1130@32 corner: 1146@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1130@32 corner: 1146@48
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1130@32 1130@32 mouseMove CMD 1037006 nil]
		targetOffset: 	46@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1037006 1130 32 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1130@32 corner: 1146@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1130@32 corner: 1146@48
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1130@32 1130@32 mouseMove CMD 1037006 nil]
		targetOffset: 	46@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1037006 1130 32 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		evt: 	[keystroke '<Cmd-t>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1130@32 corner: 1146@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1130@32 corner: 1146@48
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1130@32 1130@32 mouseMove CMD 1037006 nil]
		targetOffset: 	46@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1037006 1130 32 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-t>']
		evtBuf: 	#(2 1037069 116 0 8 116 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1130@32 corner: 1146@48
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1130@32 corner: 1146@48
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(418643968)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1130@32 1130@32 mouseMove CMD 1037006 nil]
		targetOffset: 	46@10
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1037006 1130 32 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(74711040))(an OBSyst...etc...
		lastStepTime: 	1037054
		lastStepMessage: 	nil
		lastCycleTime: 	1037096
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1037054
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> an OBSystemWindow(74711040))(an OBSyst...etc...
		lastStepTime: 	1037054
		lastStepMessage: 	nil
		lastCycleTime: 	1037096
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1037054
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
Department(Object)>>doesNotUnderstand: #manager:
ManyCompaniesTest class>>createTestModel
ManyCompaniesTest>>testTotal
ManyCompaniesTest(TestCase)>>performTest
[] in ManyCompaniesTest(TestCase)>>runCase
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>runCase
[] in ManyCompaniesTest(TestCase)>>debug
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>debug
OBCmdRunTests>>execute
[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
[] in OBColumn>>keystroke:from:
OrderedCollection>>reverseDo:
OBColumn>>keystroke:from:
OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
OBPluggableListMorph(PluggableListMorph)>>keyStroke:
OBPluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Department>>departments
8 April 2011 4:08:19 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

Department(Object)>>doesNotUnderstand: #departments
	Receiver: a Department
	Arguments and temporary variables: 
		aMessage: 	departments
		exception: 	MessageNotUnderstood: Department>>departments
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	'Research'
		employees: 	an OrderedCollection(an Employee an Employee)
		subdepartments: 	an OrderedCollection()
		manager: 	an Employee


Department>>total
	Receiver: a Department
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'Research'
		employees: 	an OrderedCollection(an Employee an Employee)
		subdepartments: 	an OrderedCollection()
		manager: 	an Employee


[] in Company>>total
	Receiver: a Company
	Arguments and temporary variables: 
		total: 	0
		current: 	a Department
	Receiver's instance variables: 
		name: 	'meganalysis'
		departments: 	an OrderedCollection(a Department a Department)


[] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		binaryBlock: 	a Department
		nextValue: 	[:total :current | total + current total]
		each: 	#(0)
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[:total :current | total + current total]
		nextValue: 	#(0)
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


Company>>total
	Receiver: a Company
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'meganalysis'
		departments: 	an OrderedCollection(a Department a Department)


ManyCompaniesTest>>testTotal
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 
		company: 	a Company
	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>performTest
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	ManyCompaniesTest>>#testTotal
	Receiver's instance variables: 
		target: 	OBMethodNode<ManyCompaniesTest#testTotal>
		requestor: 	an OBColumn(testTotal)


[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		each: 	an OBCmdRunTests
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBCmdRunTests)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBCmdRunTests nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		aCharacter: 	$t
		aNode: 	OBMethodNode<ManyCompaniesTest#testTotal>
		aRequestor: 	an OBColumn(testTotal)
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


[] in OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	OBMethodNode<ManyCompaniesTest#testTotal>
		scan: 	$t
		each: 	an OBNodeCommandScan
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OrderedCollection>>reverseDo:
	Receiver: an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101companies> OBClassNode<Ma...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(scan
			processKeystroke: aCharacter
			withNode: each
			fo...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBEnvironmentNode OBClassCategoryNode<101companies> ...etc...
		firstIndex: 	3
		lastIndex: 	7


OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	$t
		aMorph: 	an OBPluggableListMorph(234356736)
		scan: 	an OBNodeCommandScan
		nodes: 	an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101compani...etc...
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		aChar: 	$t
		args: 	2
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>keyStroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		event: 	[keystroke '<Cmd-t>']
		aChar: 	$t
		aSpecialKey: 	116
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>handleKeystroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-t>']
	Arguments and temporary variables: 
		anObject: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		timeStamp: 	1056324
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	1135@1
		handler: 	nil
		wasHandled: 	true
		keyValue: 	116
		charCode: 	116
		scanCode: 	17


OBPluggableListMorph(Morph)>>handleEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
		localEvt: 	[keystroke '<Cmd-t>']
		index: 	2
		child: 	a TransformMorph(822607872)
		morphs: 	an Array(a TransformMorph(822607872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


OBPluggableListMorph(Morph)>>processEvent:using:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>processEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1140@29 corner: 1156@45
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1140@29 corner: 1156@45
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(587464704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1140@29 1140@29 mouseMove CMD 1056260 nil]
		targetOffset: 	60@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056260 1140 29 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(905969664) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(905969664) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1140@29 corner: 1156@45
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1140@29 corner: 1156@45
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(587464704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1140@29 1140@29 mouseMove CMD 1056260 nil]
		targetOffset: 	60@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056260 1140 29 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1140@29 corner: 1156@45
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1140@29 corner: 1156@45
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(587464704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1140@29 1140@29 mouseMove CMD 1056260 nil]
		targetOffset: 	60@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056260 1140 29 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1140@29 corner: 1156@45
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1140@29 corner: 1156@45
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(587464704)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1140@29 1140@29 mouseMove CMD 1056260 nil]
		targetOffset: 	60@1
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1056260 1140 29 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil



--- The full stack ---
Department(Object)>>doesNotUnderstand: #departments
Department>>total
[] in Company>>total
[] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
Company>>total
ManyCompaniesTest>>testTotal
ManyCompaniesTest(TestCase)>>performTest
[] in ManyCompaniesTest(TestCase)>>runCase
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>runCase
[] in ManyCompaniesTest(TestCase)>>debug
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>debug
OBCmdRunTests>>execute
[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
[] in OBColumn>>keystroke:from:
OrderedCollection>>reverseDo:
OBColumn>>keystroke:from:
OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
OBPluggableListMorph(PluggableListMorph)>>keyStroke:
OBPluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Department>>adaptToNumber:andSend:
8 April 2011 4:08:57 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

Department(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: a Department
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 0 andSend: #+
		exception: 	MessageNotUnderstood: Department>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	'Research'
		employees: 	an OrderedCollection(an Employee an Employee)
		manager: 	an Employee
		departments: 	an OrderedCollection()


Department(Object)>>adaptToInteger:andSend:
	Receiver: a Department
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#+
	Receiver's instance variables: 
		name: 	'Research'
		employees: 	an OrderedCollection(an Employee an Employee)
		manager: 	an Employee
		departments: 	an OrderedCollection()


SmallInteger(Integer)>>+
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	a Department
	Receiver's instance variables: 
0

SmallInteger>>+
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	a Department
	Receiver's instance variables: 
0

[] in Company>>total
	Receiver: a Company
	Arguments and temporary variables: 
		total: 	0
		current: 	a Department
	Receiver's instance variables: 
		name: 	'meganalysis'
		departments: 	an OrderedCollection(a Department a Department)


[] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		binaryBlock: 	a Department
		nextValue: 	[:total :current | total + current total]
		each: 	#(0)
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[:total :current | total + current total]
		nextValue: 	#(0)
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


Company>>total
	Receiver: a Company
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'meganalysis'
		departments: 	an OrderedCollection(a Department a Department)


ManyCompaniesTest>>testTotal
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 
		company: 	a Company
	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>performTest
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	ManyCompaniesTest>>#testTotal
	Receiver's instance variables: 
		target: 	OBMethodNode<ManyCompaniesTest#testTotal>
		requestor: 	an OBColumn(testTotal)


[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		each: 	an OBCmdRunTests
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBCmdRunTests)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBCmdRunTests nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		aCharacter: 	$t
		aNode: 	OBMethodNode<ManyCompaniesTest#testTotal>
		aRequestor: 	an OBColumn(testTotal)
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


[] in OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	OBMethodNode<ManyCompaniesTest#testTotal>
		scan: 	$t
		each: 	an OBNodeCommandScan
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OrderedCollection>>reverseDo:
	Receiver: an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101companies> OBClassNode<Ma...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(scan
			processKeystroke: aCharacter
			withNode: each
			fo...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBEnvironmentNode OBClassCategoryNode<101companies> ...etc...
		firstIndex: 	3
		lastIndex: 	7


OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	$t
		aMorph: 	an OBPluggableListMorph(234356736)
		scan: 	an OBNodeCommandScan
		nodes: 	an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101compani...etc...
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		aChar: 	$t
		args: 	2
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>keyStroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		event: 	[keystroke '<Cmd-t>']
		aChar: 	$t
		aSpecialKey: 	116
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>handleKeystroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-t>']
	Arguments and temporary variables: 
		anObject: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		timeStamp: 	1093718
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	1168@5
		handler: 	nil
		wasHandled: 	true
		keyValue: 	116
		charCode: 	116
		scanCode: 	17


OBPluggableListMorph(Morph)>>handleEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
		localEvt: 	[keystroke '<Cmd-t>']
		index: 	2
		child: 	a TransformMorph(822607872)
		morphs: 	an Array(a TransformMorph(822607872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


OBPluggableListMorph(Morph)>>processEvent:using:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>processEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1173@33 corner: 1189@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1173@33 corner: 1189@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(597950464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1173@33 1173@33 mouseMove CMD 1093626 nil]
		targetOffset: 	93@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1093626 1173 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(904396800) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(904396800) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1173@33 corner: 1189@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1173@33 corner: 1189@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(597950464)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1173@33 1173@33 mouseMove CMD 1093626 nil]
		targetOffset: 	93@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1093626 1173 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil



--- The full stack ---
Department(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Department(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
[] in Company>>total
[] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
Company>>total
ManyCompaniesTest>>testTotal
ManyCompaniesTest(TestCase)>>performTest
[] in ManyCompaniesTest(TestCase)>>runCase
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>runCase
[] in ManyCompaniesTest(TestCase)>>debug
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>debug
OBCmdRunTests>>execute
[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
[] in OBColumn>>keystroke:from:
OrderedCollection>>reverseDo:
OBColumn>>keystroke:from:
OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
OBPluggableListMorph(PluggableListMorph)>>keyStroke:
OBPluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: Department>>adaptToNumber:andSend:
8 April 2011 4:09:27 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

Department(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
	Receiver: a Department
	Arguments and temporary variables: 
		aMessage: 	adaptToNumber: 0 andSend: #+
		exception: 	MessageNotUnderstood: Department>>adaptToNumber:andSend:
		resumeValue: 	nil
	Receiver's instance variables: 
		name: 	'Research'
		employees: 	an OrderedCollection(an Employee an Employee)
		manager: 	an Employee
		departments: 	an OrderedCollection()


Department(Object)>>adaptToInteger:andSend:
	Receiver: a Department
	Arguments and temporary variables: 
		rcvr: 	0
		selector: 	#+
	Receiver's instance variables: 
		name: 	'Research'
		employees: 	an OrderedCollection(an Employee an Employee)
		manager: 	an Employee
		departments: 	an OrderedCollection()


SmallInteger(Integer)>>+
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	a Department
	Receiver's instance variables: 
0

SmallInteger>>+
	Receiver: 0
	Arguments and temporary variables: 
		aNumber: 	a Department
	Receiver's instance variables: 
0

[] in Company>>total
	Receiver: a Company
	Arguments and temporary variables: 
		total: 	0
		current: 	a Department
	Receiver's instance variables: 
		name: 	'meganalysis'
		departments: 	an OrderedCollection(a Department a Department)


[] in OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		binaryBlock: 	a Department
		nextValue: 	[:total :current | total + current total]
		each: 	#(0)
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


OrderedCollection>>do:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		aBlock: 	[:each | nextValue := binaryBlock value: nextValue value: each]
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


OrderedCollection(Collection)>>inject:into:
	Receiver: an OrderedCollection(a Department a Department)
	Arguments and temporary variables: 
		thisValue: 	0
		binaryBlock: 	[:total :current | total + current total]
		nextValue: 	#(0)
	Receiver's instance variables: 
		array: 	an Array(nil nil a Department a Department nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	4


Company>>total
	Receiver: a Company
	Arguments and temporary variables: 

	Receiver's instance variables: 
		name: 	'meganalysis'
		departments: 	an OrderedCollection(a Department a Department)


ManyCompaniesTest>>testTotal
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 
		company: 	a Company
	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>performTest
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	ManyCompaniesTest>>#testTotal
	Receiver's instance variables: 
		target: 	OBMethodNode<ManyCompaniesTest#testTotal>
		requestor: 	an OBColumn(testTotal)


[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		each: 	an OBCmdRunTests
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBCmdRunTests)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBCmdRunTests nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		aCharacter: 	$t
		aNode: 	OBMethodNode<ManyCompaniesTest#testTotal>
		aRequestor: 	an OBColumn(testTotal)
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


[] in OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	OBMethodNode<ManyCompaniesTest#testTotal>
		scan: 	$t
		each: 	an OBNodeCommandScan
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OrderedCollection>>reverseDo:
	Receiver: an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101companies> OBClassNode<Ma...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(scan
			processKeystroke: aCharacter
			withNode: each
			fo...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBEnvironmentNode OBClassCategoryNode<101companies> ...etc...
		firstIndex: 	3
		lastIndex: 	7


OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	$t
		aMorph: 	an OBPluggableListMorph(234356736)
		scan: 	an OBNodeCommandScan
		nodes: 	an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101compani...etc...
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		aChar: 	$t
		args: 	2
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>keyStroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		event: 	[keystroke '<Cmd-t>']
		aChar: 	$t
		aSpecialKey: 	116
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>handleKeystroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-t>']
	Arguments and temporary variables: 
		anObject: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		timeStamp: 	1123864
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	1146@7
		handler: 	nil
		wasHandled: 	true
		keyValue: 	116
		charCode: 	116
		scanCode: 	17


OBPluggableListMorph(Morph)>>handleEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
		localEvt: 	[keystroke '<Cmd-t>']
		index: 	2
		child: 	a TransformMorph(822607872)
		morphs: 	an Array(a TransformMorph(822607872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


OBPluggableListMorph(Morph)>>processEvent:using:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>processEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1151@35 corner: 1167@51
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1151@35 corner: 1167@51
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754188288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1151@35 1151@35 mouseMove CMD 1123802 nil]
		targetOffset: 	71@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1123802 1151 35 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1072693248) an O...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(1072693248) an O...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1151@35 corner: 1167@51
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1151@35 corner: 1167@51
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(754188288)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1151@35 1151@35 mouseMove CMD 1123802 nil]
		targetOffset: 	71@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1123802 1151 35 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil



--- The full stack ---
Department(Object)>>doesNotUnderstand: #adaptToNumber:andSend:
Department(Object)>>adaptToInteger:andSend:
SmallInteger(Integer)>>+
SmallInteger>>+
[] in Company>>total
[] in OrderedCollection(Collection)>>inject:into:
OrderedCollection>>do:
OrderedCollection(Collection)>>inject:into:
Company>>total
ManyCompaniesTest>>testTotal
ManyCompaniesTest(TestCase)>>performTest
[] in ManyCompaniesTest(TestCase)>>runCase
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>runCase
[] in ManyCompaniesTest(TestCase)>>debug
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>debug
OBCmdRunTests>>execute
[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
[] in OBColumn>>keystroke:from:
OrderedCollection>>reverseDo:
OBColumn>>keystroke:from:
OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
OBPluggableListMorph(PluggableListMorph)>>keyStroke:
OBPluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
8 April 2011 4:09:49 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

ManyCompaniesTest(TestCase)>>signalFailure:
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>assert:
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest>>testTotal
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 
		company: 	a Company
	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>performTest
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testTotal
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testTotal
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpecte...etc...
		defect: 	ManyCompaniesTest>>#testTotal
	Receiver's instance variables: 
		target: 	OBMethodNode<ManyCompaniesTest#testTotal>
		requestor: 	an OBColumn(testTotal)


[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		each: 	an OBCmdRunTests
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBCmdRunTests)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBCmdRunTests nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		aCharacter: 	$t
		aNode: 	OBMethodNode<ManyCompaniesTest#testTotal>
		aRequestor: 	an OBColumn(testTotal)
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


[] in OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	OBMethodNode<ManyCompaniesTest#testTotal>
		scan: 	$t
		each: 	an OBNodeCommandScan
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OrderedCollection>>reverseDo:
	Receiver: an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101companies> OBClassNode<Ma...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(scan
			processKeystroke: aCharacter
			withNode: each
			fo...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBEnvironmentNode OBClassCategoryNode<101companies> ...etc...
		firstIndex: 	3
		lastIndex: 	7


OBColumn>>keystroke:from:
	Receiver: an OBColumn(testTotal)
	Arguments and temporary variables: 
		aCharacter: 	$t
		aMorph: 	an OBPluggableListMorph(234356736)
		scan: 	an OBNodeCommandScan
		nodes: 	an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101compani...etc...
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		aChar: 	$t
		args: 	2
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>keyStroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		event: 	[keystroke '<Cmd-t>']
		aChar: 	$t
		aSpecialKey: 	116
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>handleKeystroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-t>']
	Arguments and temporary variables: 
		anObject: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		timeStamp: 	1145815
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	1109@5
		handler: 	nil
		wasHandled: 	true
		keyValue: 	116
		charCode: 	116
		scanCode: 	17


OBPluggableListMorph(Morph)>>handleEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
		localEvt: 	[keystroke '<Cmd-t>']
		index: 	2
		child: 	a TransformMorph(822607872)
		morphs: 	an Array(a TransformMorph(822607872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


OBPluggableListMorph(Morph)>>processEvent:using:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>processEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testTotal)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1114@33 corner: 1130@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1114@33 corner: 1130@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(434896896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1114@33 1114@33 mouseMove CMD 1145731 nil]
		targetOffset: 	34@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1145731 1114 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(754188288) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(754188288) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1114@33 corner: 1130@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1114@33 corner: 1130@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(434896896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1114@33 1114@33 mouseMove CMD 1145731 nil]
		targetOffset: 	34@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1145731 1114 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1114@33 corner: 1130@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1114@33 corner: 1130@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(434896896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1114@33 1114@33 mouseMove CMD 1145731 nil]
		targetOffset: 	34@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1145731 1114 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1114@33 corner: 1130@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1114@33 corner: 1130@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(434896896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1114@33 1114@33 mouseMove CMD 1145731 nil]
		targetOffset: 	34@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1145731 1114 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		evt: 	[keystroke '<Cmd-t>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1114@33 corner: 1130@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1114@33 corner: 1130@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(434896896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1114@33 1114@33 mouseMove CMD 1145731 nil]
		targetOffset: 	34@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1145731 1114 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-t>']
		evtBuf: 	#(2 1145815 116 0 8 116 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1114@33 corner: 1130@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1114@33 corner: 1130@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(434896896)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1114@33 1114@33 mouseMove CMD 1145731 nil]
		targetOffset: 	34@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1145731 1114 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(754188288))(a PreDebu...etc...
		lastStepTime: 	1145794
		lastStepMessage: 	nil
		lastCycleTime: 	1145836
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1145794
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(754188288))(a PreDebu...etc...
		lastStepTime: 	1145794
		lastStepMessage: 	nil
		lastCycleTime: 	1145836
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1145794
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ManyCompaniesTest(TestCase)>>signalFailure:
ManyCompaniesTest(TestCase)>>assert:
ManyCompaniesTest>>testTotal
ManyCompaniesTest(TestCase)>>performTest
[] in ManyCompaniesTest(TestCase)>>runCase
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>runCase
[] in ManyCompaniesTest(TestCase)>>debug
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>debug
OBCmdRunTests>>execute
[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
[] in OBColumn>>keystroke:from:
OrderedCollection>>reverseDo:
OBColumn>>keystroke:from:
OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
OBPluggableListMorph(PluggableListMorph)>>keyStroke:
OBPluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: False>>/
8 April 2011 4:12:30 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

False(Object)>>doesNotUnderstand: #/
	Receiver: false
	Arguments and temporary variables: 
		aMessage: 	/ 2
		exception: 	MessageNotUnderstood: False>>/
		resumeValue: 	nil
	Receiver's instance variables: 
false

ManyCompaniesTest>>testCut
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 
		company: 	a Company
	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>performTest
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 0 failures, 1 errors, 0 unexpecte...etc...
		defect: 	ManyCompaniesTest>>#testCut
	Receiver's instance variables: 
		target: 	OBMethodNode<ManyCompaniesTest#testCut>
		requestor: 	an OBColumn(testCut)


[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		each: 	an OBCmdRunTests
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBCmdRunTests)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBCmdRunTests nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		aCharacter: 	$t
		aNode: 	OBMethodNode<ManyCompaniesTest#testCut>
		aRequestor: 	an OBColumn(testCut)
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


[] in OBColumn>>keystroke:from:
	Receiver: an OBColumn(testCut)
	Arguments and temporary variables: 
		aCharacter: 	OBMethodNode<ManyCompaniesTest#testCut>
		scan: 	$t
		each: 	an OBNodeCommandScan
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OrderedCollection>>reverseDo:
	Receiver: an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101companies> OBClassNode<Ma...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(scan
			processKeystroke: aCharacter
			withNode: each
			fo...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBEnvironmentNode OBClassCategoryNode<101companies> ...etc...
		firstIndex: 	3
		lastIndex: 	7


OBColumn>>keystroke:from:
	Receiver: an OBColumn(testCut)
	Arguments and temporary variables: 
		aCharacter: 	$t
		aMorph: 	an OBPluggableListMorph(234356736)
		scan: 	an OBNodeCommandScan
		nodes: 	an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101compani...etc...
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		aChar: 	$t
		args: 	2
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>keyStroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		event: 	[keystroke '<Cmd-t>']
		aChar: 	$t
		aSpecialKey: 	116
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>handleKeystroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-t>']
	Arguments and temporary variables: 
		anObject: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		timeStamp: 	1307055
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	1130@8
		handler: 	nil
		wasHandled: 	true
		keyValue: 	116
		charCode: 	116
		scanCode: 	17


OBPluggableListMorph(Morph)>>handleEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
		localEvt: 	[keystroke '<Cmd-t>']
		index: 	2
		child: 	a TransformMorph(822607872)
		morphs: 	an Array(a TransformMorph(822607872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


OBPluggableListMorph(Morph)>>processEvent:using:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>processEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1135@36 corner: 1151@52
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1135@36 corner: 1151@52
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668205056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1135@36 1135@36 mouseMove CMD 1306959 nil]
		targetOffset: 	55@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1306959 1135 36 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(986447872) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(986447872) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1135@36 corner: 1151@52
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1135@36 corner: 1151@52
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668205056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1135@36 1135@36 mouseMove CMD 1306959 nil]
		targetOffset: 	55@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1306959 1135 36 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1135@36 corner: 1151@52
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1135@36 corner: 1151@52
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668205056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1135@36 1135@36 mouseMove CMD 1306959 nil]
		targetOffset: 	55@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1306959 1135 36 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1135@36 corner: 1151@52
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1135@36 corner: 1151@52
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668205056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1135@36 1135@36 mouseMove CMD 1306959 nil]
		targetOffset: 	55@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1306959 1135 36 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		evt: 	[keystroke '<Cmd-t>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1135@36 corner: 1151@52
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1135@36 corner: 1151@52
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668205056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1135@36 1135@36 mouseMove CMD 1306959 nil]
		targetOffset: 	55@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1306959 1135 36 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-t>']
		evtBuf: 	#(2 1307055 116 0 8 116 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1135@36 corner: 1151@52
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1135@36 corner: 1151@52
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(668205056)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1135@36 1135@36 mouseMove CMD 1306959 nil]
		targetOffset: 	55@8
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1306959 1135 36 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(986447872))(a PreDebu...etc...
		lastStepTime: 	1307033
		lastStepMessage: 	nil
		lastCycleTime: 	1307076
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1307033
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(986447872))(a PreDebu...etc...
		lastStepTime: 	1307033
		lastStepMessage: 	nil
		lastCycleTime: 	1307076
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1307033
		menuBuilder: 	a PragmaMenuBuilder


WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aWorld: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(986447872))(a PreDebu...etc...
		lastStepTime: 	1307033
		lastStepMessage: 	nil
		lastCycleTime: 	1307076
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1307033
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
False(Object)>>doesNotUnderstand: #/
ManyCompaniesTest>>testCut
ManyCompaniesTest(TestCase)>>performTest
[] in ManyCompaniesTest(TestCase)>>runCase
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>runCase
[] in ManyCompaniesTest(TestCase)>>debug
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>debug
OBCmdRunTests>>execute
[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
[] in OBColumn>>keystroke:from:
OrderedCollection>>reverseDo:
OBColumn>>keystroke:from:
OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
OBPluggableListMorph(PluggableListMorph)>>keyStroke:
OBPluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
TestFailure: Assertion failed
8 April 2011 4:12:41 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

ManyCompaniesTest(TestCase)>>signalFailure:
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 
		aString: 	'Assertion failed'
	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>assert:
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 
		aBoolean: 	false
	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest>>testCut
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 
		company: 	a Company
	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


ManyCompaniesTest(TestCase)>>performTest
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [self setUp.
	self performTest]
	Arguments and temporary variables: 
		aBlock: 	[self tearDown.
	self cleanUpInstanceVariables]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>runCase
		startpc: 	37
		numArgs: 	0


ManyCompaniesTest(TestCase)>>runCase
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	true
		hasRanOnce: 	nil


[] in ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


BlockClosure>>ensure:
	Receiver: [(self class selector: testSelector) runCase]
	Arguments and temporary variables: 
		aBlock: 	[self resources
		do: [:each | each reset]]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ManyCompaniesTest(TestCase)>>debug
		startpc: 	62
		numArgs: 	0


ManyCompaniesTest(TestCase)>>debug
	Receiver: ManyCompaniesTest>>#testCut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		testSelector: 	#testCut
		hasRun: 	nil
		hasSetup: 	nil
		hasRanOnce: 	nil


OBCmdRunTests>>execute
	Receiver: an OBCmdRunTests
	Arguments and temporary variables: 
		result: 	1 run, 0 passes, 0 expected failures, 1 failures, 0 errors, 0 unexpecte...etc...
		defect: 	ManyCompaniesTest>>#testCut
	Receiver's instance variables: 
		target: 	OBMethodNode<ManyCompaniesTest#testCut>
		requestor: 	an OBColumn(testCut)


[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		each: 	an OBCmdRunTests
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


OrderedCollection>>do:
	Receiver: an OrderedCollection(an OBCmdRunTests)
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(each isActive
			and: [each isEnabled])
		ifTrue: [each exec...etc...
		index: 	3
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBCmdRunTests nil nil nil nil nil nil nil)
		firstIndex: 	3
		lastIndex: 	3


OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
	Receiver: an OBNodeCommandScan
	Arguments and temporary variables: 
		aCharacter: 	$t
		aNode: 	OBMethodNode<ManyCompaniesTest#testCut>
		aRequestor: 	an OBColumn(testCut)
	Receiver's instance variables: 
		factories: 	an OrderedCollection(ORCmdSelectionEnvironment OBCmdChaseVariables O...etc...


[] in OBColumn>>keystroke:from:
	Receiver: an OBColumn(testCut)
	Arguments and temporary variables: 
		aCharacter: 	OBMethodNode<ManyCompaniesTest#testCut>
		scan: 	$t
		each: 	an OBNodeCommandScan
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OrderedCollection>>reverseDo:
	Receiver: an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101companies> OBClassNode<Ma...etc...
	Arguments and temporary variables: 
		aBlock: 	[:each | 
(scan
			processKeystroke: aCharacter
			withNode: each
			fo...etc...
		index: 	7
	Receiver's instance variables: 
		array: 	an Array(nil nil an OBEnvironmentNode OBClassCategoryNode<101companies> ...etc...
		firstIndex: 	3
		lastIndex: 	7


OBColumn>>keystroke:from:
	Receiver: an OBColumn(testCut)
	Arguments and temporary variables: 
		aCharacter: 	$t
		aMorph: 	an OBPluggableListMorph(234356736)
		scan: 	an OBNodeCommandScan
		nodes: 	an OrderedCollection(an OBEnvironmentNode OBClassCategoryNode<101compani...etc...
	Receiver's instance variables: 
		panel: 	an OBColumnPanel
		switch: 	an OBSwitch
		listHolder: 	an OBList


OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		aChar: 	$t
		args: 	2
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>keyStroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		event: 	[keystroke '<Cmd-t>']
		aChar: 	$t
		aSpecialKey: 	116
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>handleKeystroke:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd-t>']
	Arguments and temporary variables: 
		anObject: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		timeStamp: 	1318464
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	1128@5
		handler: 	nil
		wasHandled: 	true
		keyValue: 	116
		charCode: 	116
		scanCode: 	17


OBPluggableListMorph(Morph)>>handleEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
		localEvt: 	[keystroke '<Cmd-t>']
		index: 	2
		child: 	a TransformMorph(822607872)
		morphs: 	an Array(a TransformMorph(822607872))
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		aMorph: 	an OBPluggableListMorph(234356736)
	Receiver's instance variables: 
		lastType: 	#keystroke
		lastDispatch: 	#dispatchDefault:with:


OBPluggableListMorph(Morph)>>processEvent:using:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(Morph)>>processEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
	Receiver: an OBPluggableListMorph(234356736)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1075@0 corner: 1430@375
		owner: 	an OBPane(219676672)
		submorphs: 	an Array(a TransformMorph(822607872))
		fullBounds: 	1075@0 corner: 1430@375
		color: 	Color white
		extension: 	a MorphExtension (211812352) [other:  (dragEnabled -> true) (dropEna...etc...
		borderWidth: 	0
		borderColor: 	Color black
		model: 	an OBColumn(testCut)
		slotName: 	nil
		open: 	false
		scrollBar: 	a ScrollBar(240910336)
		scroller: 	a TransformMorph(822607872)
		retractableScrollBar: 	false
		scrollBarOnLeft: 	false
		getMenuSelector: 	#menu:
		getMenuTitleSelector: 	nil
		hasFocus: 	true
		hScrollBar: 	a ScrollBar(1069809664)
		list: 	nil
		getListSelector: 	#list
		getListSizeSelector: 	#listSize
		getListElementSelector: 	#listAt:
		getIndexSelector: 	#selection
		setIndexSelector: 	#selection:
		keystrokeActionSelector: 	#keystroke:from:
		autoDeselect: 	false
		lastKeystrokeTime: 	0
		lastKeystrokes: 	''
		doubleClickSelector: 	#doubleClick
		handlesBasicKeys: 	nil
		potentialDropRow: 	nil
		listMorph: 	an OBLazyListMorph(1048576000)
		hScrollRangeCache: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1133@33 corner: 1149@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1133@33 corner: 1149@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266076160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1133@33 1133@33 mouseMove CMD 1318380 nil]
		targetOffset: 	53@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1318380 1133 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(585367552) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(585367552) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1133@33 corner: 1149@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1133@33 corner: 1149@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266076160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1133@33 1133@33 mouseMove CMD 1318380 nil]
		targetOffset: 	53@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1318380 1133 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		focusHolder: 	an OBPluggableListMorph(234356736)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1133@33 corner: 1149@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1133@33 corner: 1149@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266076160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1133@33 1133@33 mouseMove CMD 1318380 nil]
		targetOffset: 	53@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1318380 1133 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
	Receiver's instance variables: 
		bounds: 	1133@33 corner: 1149@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1133@33 corner: 1149@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266076160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1133@33 1133@33 mouseMove CMD 1318380 nil]
		targetOffset: 	53@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1318380 1133 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd-t>']
		evt: 	[keystroke '<Cmd-t>']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1133@33 corner: 1149@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1133@33 corner: 1149@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266076160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1133@33 1133@33 mouseMove CMD 1318380 nil]
		targetOffset: 	53@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1318380 1133 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd-t>']
		evtBuf: 	#(2 1318464 116 0 8 116 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1133@33 corner: 1149@49
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1133@33 corner: 1149@49
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(266076160)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	a MouseClickState[#firstClickUp]
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1133@33 1133@33 mouseMove CMD 1318380 nil]
		targetOffset: 	53@5
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 1318380 1133 33 0 8 0 1)
		lastKeyScanCode: 	17
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(585367552))(a PreDebu...etc...
		lastStepTime: 	1318454
		lastStepMessage: 	nil
		lastCycleTime: 	1318496
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1318454
		menuBuilder: 	a PragmaMenuBuilder


Array(SequenceableCollection)>>do:
	Receiver: an Array(a HandMorph(843055104))
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
		index: 	1
		indexLimiT: 	1
	Receiver's instance variables: 
an Array(a HandMorph(843055104))

WorldState>>handsDo:
	Receiver: a WorldState
	Arguments and temporary variables: 
		aBlock: 	[:h | 
ActiveHand := h.
	h processEvents.
	ActiveHand := nil]
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(585367552))(a PreDebu...etc...
		lastStepTime: 	1318454
		lastStepMessage: 	nil
		lastCycleTime: 	1318496
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	1318454
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
ManyCompaniesTest(TestCase)>>signalFailure:
ManyCompaniesTest(TestCase)>>assert:
ManyCompaniesTest>>testCut
ManyCompaniesTest(TestCase)>>performTest
[] in ManyCompaniesTest(TestCase)>>runCase
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>runCase
[] in ManyCompaniesTest(TestCase)>>debug
BlockClosure>>ensure:
ManyCompaniesTest(TestCase)>>debug
OBCmdRunTests>>execute
[] in OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
OrderedCollection>>do:
OBNodeCommandScan(OBCommandScan)>>processKeystroke:withNode:for:
[] in OBColumn>>keystroke:from:
OrderedCollection>>reverseDo:
OBColumn>>keystroke:from:
OBPluggableListMorph(PluggableListMorph)>>modifierKeyPressed:
OBPluggableListMorph(PluggableListMorph)>>keyStroke:
OBPluggableListMorph(Morph)>>handleKeystroke:
KeyboardEvent>>sentTo:
OBPluggableListMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
OBPluggableListMorph(Morph)>>processEvent:using:
OBPluggableListMorph(Morph)>>processEvent:
OBPluggableListMorph(PluggableListMorph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Reading a number failed: a digit between 0 and 9 expected
8 April 2011 4:43:05 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

SqNumberParser(Object)>>error:
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		aString: 	'Reading a number failed: a digit between 0 and 9 expected'
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'fjewifje'
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser(NumberParser)>>expected:
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		aString: 	'a digit between 0 and 9'
		errorString: 	'a digit between 0 and 9 expected'
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'fjewifje'
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser>>readNamedFloatOrFail
	Receiver: a SqNumberParser
	Arguments and temporary variables: 

	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'fjewifje'
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


SqNumberParser>>nextNumber
	Receiver: a SqNumberParser
	Arguments and temporary variables: 
		numberOfTrailingZeroInIntegerPart: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream 'fjewifje'
		base: 	10
		neg: 	false
		integerPart: 	nil
		fractionPart: 	0
		exponent: 	0
		scale: 	0
		nDigits: 	0
		lastNonZero: 	0
		requestor: 	nil
		failBlock: 	nil


Number class>>readFrom:
	Receiver: Number
	Arguments and temporary variables: 
		stringOrStream: 	a ReadStream 'fjewifje'
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(size 109)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*grease-core' greaseInteger)
('*grease-pharo-core' milliseconds...etc...
		subclasses: 	{Fraction. Float. Integer}
		name: 	#Number
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Numbers'
		traitComposition: 	nil
		localSelectors: 	nil


Number class(Object)>>readFromString:
	Receiver: Number
	Arguments and temporary variables: 
		aString: 	'fjewifje'
	Receiver's instance variables: 
		superclass: 	Magnitude
		methodDict: 	a MethodDictionary(size 109)
		format: 	2
		instanceVariables: 	nil
		organization: 	('*grease-core' greaseInteger)
('*grease-pharo-core' milliseconds...etc...
		subclasses: 	{Fraction. Float. Integer}
		name: 	#Number
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Kernel-Numbers'
		traitComposition: 	nil
		localSelectors: 	nil


ByteString(String)>>asNumber
	Receiver: 'fjewifje'
	Arguments and temporary variables: 

	Receiver's instance variables: 
'fjewifje'

UndefinedObject>>DoIt
	Receiver: nil
	Arguments and temporary variables: 

	Receiver's instance variables: 
nil

Compiler>>evaluate:in:to:notifying:ifFail:logged:
	Receiver: a Compiler
	Arguments and temporary variables: 
		textOrStream: 	'''fjewifje'' asNumber'
		aContext: 	nil
		receiver: 	nil
		aRequestor: 	a TextMorphEditor
		failBlock: 	[FakeClassPool adopt: nil.
	^ #failedDoit]
		logFlag: 	true
		methodNode: 	DoIt
	^ 'fjewifje' asNumber
		method: 	(UndefinedObject>>#DoIt "a CompiledMethod(144179200)")
		value: 	nil
		toLog: 	nil
		itsSelection: 	nil
		itsSelectionString: 	nil
	Receiver's instance variables: 
		sourceStream: 	a ReadStream '''fjewifje'' asNumber'
		requestor: 	a TextMorphEditor
		class: 	UndefinedObject
		category: 	nil
		context: 	nil
		parser: 	a Parser


[] in TextMorphEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


BlockClosure>>on:do:
	Receiver: [rcvr class evaluatorClass new
		evaluate: self selection asString
		in: ctxt
		to: rcvr
	...etc...
	Arguments and temporary variables: 
		exception: 	OutOfScopeNotification
		handlerAction: 	[:ex | ex resume: true]
		handlerActive: 	true
	Receiver's instance variables: 
		outerContext: 	TextMorphEditor(ParagraphEditor)>>evaluateSelection
		startpc: 	120
		numArgs: 	0


TextMorphEditor(ParagraphEditor)>>evaluateSelection
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		result: 	nil
		rcvr: 	nil
		ctxt: 	nil
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


TextMorphEditor(ParagraphEditor)>>printIt
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		result: 	nil
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


[] in TextMorphEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 

	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


TextMorphEditor(ParagraphEditor)>>terminateAndInitializeAround:
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		aBlock: 	[self printIt]
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


TextMorphEditor(ParagraphEditor)>>printIt:
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		characterStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


TextMorphEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd->']
		typeAheadStream: 	a WriteStream ''
		honorCommandKeys: 	true
		keyValue: 	112
		keyChar: 	$p
		char: 	Character value: 16
		action: 	#printIt:
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


TextMorphEditor>>dispatchOnKeyEvent:with:
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd->']
		typeAheadStream: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


TextMorphEditor(ParagraphEditor)>>keystroke:
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd->']
		typeAhead: 	a WriteStream ''
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


TextMorphEditor>>keystroke:
	Receiver: a TextMorphEditor
	Arguments and temporary variables: 
		keyEvent: 	[keystroke '<Cmd->']
	Receiver's instance variables: 
		model: 	a Workspace
		paragraph: 	a MultiNewParagraph
		startBlock: 	a CharacterBlock with index 40 and rectangle 118@32 corner: 118@48
...etc...
		stopBlock: 	a CharacterBlock with index 21 and character $' and rectangle 0@32 c...etc...
		beginTypeInBlock: 	nil
		emphasisHere: 	an Array(a TextFontChange font: 2)
		initialText: 	a Text for '''4'''
		selectionShowing: 	false
		otherInterval: 	(39 to: 39)
		lastParentLocation: 	nil
		morph: 	a TextMorphForEditView(469762048)
		oldInterval: 	nil
		pivotBlock: 	nil


[] in TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd->']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleInteraction:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		interactionBlock: 	[editor keystroke: evt]
		oldEditor: 	a TextMorphEditor
		oldParagraph: 	a MultiNewParagraph
		oldText: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


TextMorphForEditView>>handleInteraction:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		interActionBlock: 	[editor keystroke: evt]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>keyStroke:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd->']
		action: 	nil
		completionAllowed: 	true
		stringHolder: 	a Workspace
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


TextMorphForEditView>>keyStroke:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd->']
		view: 	a PluggableTextMorph(153878528)
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


TextMorphForEditView(TextMorph)>>handleKeystroke:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
		pasteUp: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


KeyboardEvent>>sentTo:
	Receiver: [keystroke '<Cmd->']
	Arguments and temporary variables: 
		anObject: 	a TextMorphForEditView(469762048)
	Receiver's instance variables: 
		timeStamp: 	3142363
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#keystroke
		buttons: 	64
		position: 	229@ -23
		handler: 	nil
		wasHandled: 	true
		keyValue: 	112
		charCode: 	16
		scanCode: 	35


TextMorphForEditView(Morph)>>handleEvent:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


TextMorphForEditView(Morph)>>handleFocusEvent:
	Receiver: a TextMorphForEditView(469762048)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
	Receiver's instance variables: 
		bounds: 	0@0 corner: 432@50
		owner: 	a TransformMorph(746061824)
		submorphs: 	#()
		fullBounds: 	0@0 corner: 432@50
		color: 	Color black
		extension: 	a MorphExtension (487587840) [other:  (blinkStart -> 3133466)]
		borderWidth: 	0
		borderColor: 	Color black
		textStyle: 	a TextStyle Bitmap DejaVu Sans 9
		text: 	a Text for '''43434.5'' asNumber

''fjewifje'' asNumber'
		wrapFlag: 	true
		paragraph: 	a MultiNewParagraph
		editor: 	a TextMorphEditor
		container: 	nil
		predecessor: 	nil
		successor: 	nil
		backgroundColor: 	nil
		margins: 	nil
		editHistory: 	a TextMorphCommandHistory
		editView: 	a PluggableTextMorph(153878528)
		acceptOnCR: 	false


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
		focusHolder: 	a TextMorphForEditView(469762048)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1025@441 corner: 1041@457
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1025@441 corner: 1041@457
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293076992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1025@441 1025@441 mouseMove CTRL 3142235 nil]
		targetOffset: 	-238@ -6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3142235 1025 441 0 2 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(612368384) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	nil
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1440@814
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(612368384) a Sys...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.03 g: 0.02 b: 0.0)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
		focusHolder: 	a TextMorphForEditView(469762048)
		aBlock: 	[self keyboardFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	1025@441 corner: 1041@457
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1025@441 corner: 1041@457
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293076992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1025@441 1025@441 mouseMove CTRL 3142235 nil]
		targetOffset: 	-238@ -6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3142235 1025 441 0 2 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendEvent:focus:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
		focusHolder: 	a TextMorphForEditView(469762048)
		aBlock: 	[self keyboardFocus: nil]
		result: 	nil
	Receiver's instance variables: 
		bounds: 	1025@441 corner: 1041@457
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1025@441 corner: 1041@457
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293076992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1025@441 1025@441 mouseMove CTRL 3142235 nil]
		targetOffset: 	-238@ -6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3142235 1025 441 0 2 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>sendKeyboardEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
	Receiver's instance variables: 
		bounds: 	1025@441 corner: 1041@457
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1025@441 corner: 1041@457
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293076992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1025@441 1025@441 mouseMove CTRL 3142235 nil]
		targetOffset: 	-238@ -6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3142235 1025 441 0 2 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>handleEvent:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[keystroke '<Cmd->']
		evt: 	[keystroke '<Cmd->']
		ofs: 	nil
	Receiver's instance variables: 
		bounds: 	1025@441 corner: 1041@457
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1025@441 corner: 1041@457
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293076992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1025@441 1025@441 mouseMove CTRL 3142235 nil]
		targetOffset: 	-238@ -6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3142235 1025 441 0 2 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


HandMorph>>processEvents
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		evt: 	[keystroke '<Cmd->']
		evtBuf: 	#(2 3142363 112 0 8 16 0 1)
		type: 	2
		hadAny: 	true
	Receiver's instance variables: 
		bounds: 	1025@441 corner: 1041@457
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	1025@441 corner: 1041@457
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(293076992)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[1025@441 1025@441 mouseMove CTRL 3142235 nil]
		targetOffset: 	-238@ -6
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	false
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 3142235 1025 441 0 2 0 1)
		lastKeyScanCode: 	35
		combinedChar: 	nil


[] in WorldState>>doOneCycleNowFor:
	Receiver: a WorldState
	Arguments and temporary variables: 
		h: 	a HandMorph(843055104)
	Receiver's instance variables: 
		hands: 	an Array(a HandMorph(843055104))
		viewBox: 	0@0 corner: 1440@814
		canvas: 	a FormCanvas on: DisplayScreen(1440x814x32)
		damageRecorder: 	a DamageRecorder
		stepList: 	a Heap(StepMessage(#stepAt: -> a PreDebugWindow(612368384))(a PreDebu...etc...
		lastStepTime: 	3142353
		lastStepMessage: 	nil
		lastCycleTime: 	3142395
		commandHistory: 	a CommandHistory
		alarms: 	a Heap()
		lastAlarmTime: 	3142353
		menuBuilder: 	a PragmaMenuBuilder



--- The full stack ---
SqNumberParser(Object)>>error:
SqNumberParser(NumberParser)>>expected:
SqNumberParser>>readNamedFloatOrFail
SqNumberParser>>nextNumber
Number class>>readFrom:
Number class(Object)>>readFromString:
ByteString(String)>>asNumber
UndefinedObject>>DoIt
Compiler>>evaluate:in:to:notifying:ifFail:logged:
[] in TextMorphEditor(ParagraphEditor)>>evaluateSelection
BlockClosure>>on:do:
TextMorphEditor(ParagraphEditor)>>evaluateSelection
TextMorphEditor(ParagraphEditor)>>printIt
[] in TextMorphEditor(ParagraphEditor)>>printIt:
TextMorphEditor(ParagraphEditor)>>terminateAndInitializeAround:
TextMorphEditor(ParagraphEditor)>>printIt:
TextMorphEditor(ParagraphEditor)>>dispatchOnKeyEvent:with:
TextMorphEditor>>dispatchOnKeyEvent:with:
TextMorphEditor(ParagraphEditor)>>keystroke:
TextMorphEditor>>keystroke:
[] in TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView(TextMorph)>>handleInteraction:
TextMorphForEditView>>handleInteraction:
TextMorphForEditView(TextMorph)>>keyStroke:
TextMorphForEditView>>keyStroke:
TextMorphForEditView(TextMorph)>>handleKeystroke:
KeyboardEvent>>sentTo:
TextMorphForEditView(Morph)>>handleEvent:
TextMorphForEditView(Morph)>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendKeyboardEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: ByteString>>html
8 April 2011 4:49:34 pm

VM: Mac OS - intel - 1067 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47] Seaside 3.0
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir /Users/akellens/Downloads/Seaside.app/Contents/Resources
Trusted Dir /foobar/tooBar/forSqueak/bogus
Untrusted Dir /Users/akellens/Library/Preferences/Squeak/Internet/My Squeak

ByteString(Object)>>doesNotUnderstand: #html
	Receiver: 'Save'
	Arguments and temporary variables: 
		aMessage: 	html
		exception: 	MessageNotUnderstood: ByteString>>html
		resumeValue: 	nil
	Receiver's instance variables: 
'Save'

[] in DepartmentScreen>>renderContentOn:
	Receiver: a DepartmentScreen
	Arguments and temporary variables: 
		html: 	a WARenderCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a WAAnswerHandler
		department: 	a Department


BlockClosure>>renderOn:
	Receiver: [html
		div: [self renderDepartmentNameOn: html].
	html
		div: [self renderDepartmentManag...etc...
	Arguments and temporary variables: 
		aRenderer: 	a WARenderCanvas
	Receiver's instance variables: 
		outerContext: 	DepartmentScreen>>renderContentOn:
		startpc: 	97
		numArgs: 	0


WARenderCanvas(WARenderer)>>render:
	Receiver: a WARenderCanvas
	Arguments and temporary variables: 
		anObject: 	[html
		div: [self renderDepartmentNameOn: html].
	html
		div: [self ...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	a WASubmitButtonTag
		parentBrush: 	a WAFormTag


WARenderCanvas(WACanvas)>>render:
	Receiver: a WARenderCanvas
	Arguments and temporary variables: 
		anObject: 	[html
		div: [self renderDepartmentNameOn: html].
	html
		div: [self ...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	a WASubmitButtonTag
		parentBrush: 	a WAFormTag


[] in WAFormTag(WATagBrush)>>with:
	Receiver: a WAFormTag
	Arguments and temporary variables: 
		anObject: 	[html
		div: [self renderDepartmentNameOn: html].
	html
		div: [self ...etc...
	Receiver's instance variables: 
		canvas: 	a WARenderCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('accept-charset'->'utf-8' 'method'->'post' 'acti...etc...
		defaultAction: 	nil


BlockClosure>>renderOn:
	Receiver: [self before.
	canvas render: anObject.
	self after]
	Arguments and temporary variables: 
		aRenderer: 	a WARenderCanvas
	Receiver's instance variables: 
		outerContext: 	WAFormTag(WATagBrush)>>with:
		startpc: 	50
		numArgs: 	0


WARenderCanvas(WARenderer)>>render:
	Receiver: a WARenderCanvas
	Arguments and temporary variables: 
		anObject: 	[self before.
	canvas render: anObject.
	self after]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	a WASubmitButtonTag
		parentBrush: 	a WAFormTag


WARenderCanvas(WACanvas)>>render:
	Receiver: a WARenderCanvas
	Arguments and temporary variables: 
		anObject: 	[self before.
	canvas render: anObject.
	self after]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	a WASubmitButtonTag
		parentBrush: 	a WAFormTag


WARenderCanvas(WACanvas)>>nest:
	Receiver: a WARenderCanvas
	Arguments and temporary variables: 
		aBlock: 	[self before.
	canvas render: anObject.
	self after]
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	a WASubmitButtonTag
		parentBrush: 	a WAFormTag


WAFormTag(WABrush)>>with:
	Receiver: a WAFormTag
	Arguments and temporary variables: 
		aBlock: 	[self before.
	canvas render: anObject.
	self after]
	Receiver's instance variables: 
		canvas: 	a WARenderCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('accept-charset'->'utf-8' 'method'->'post' 'acti...etc...
		defaultAction: 	nil


WAFormTag(WATagBrush)>>with:
	Receiver: a WAFormTag
	Arguments and temporary variables: 
		anObject: 	[html
		div: [self renderDepartmentNameOn: html].
	html
		div: [self ...etc...
	Receiver's instance variables: 
		canvas: 	a WARenderCanvas
		parent: 	nil
		closed: 	false
		attributes: 	a WAHtmlAttributes('accept-charset'->'utf-8' 'method'->'post' 'acti...etc...
		defaultAction: 	nil


WARenderCanvas(WAHtmlCanvas)>>form:
	Receiver: a WARenderCanvas
	Arguments and temporary variables: 
		aBlock: 	[html
		div: [self renderDepartmentNameOn: html].
	html
		div: [self re...etc...
	Receiver's instance variables: 
		context: 	a WARenderContext
		lastId: 	nil
		currentBrush: 	a WASubmitButtonTag
		parentBrush: 	a WAFormTag


DepartmentScreen>>renderContentOn:
	Receiver: a DepartmentScreen
	Arguments and temporary variables: 
		html: 	a WARenderCanvas
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a WAAnswerHandler
		department: 	a Department


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a DepartmentScreen
		renderer: 	a WARenderCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a DepartmentScreen
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aComponent: 	a DepartmentScreen
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


DepartmentScreen(WAComponent)>>accept:
	Receiver: a DepartmentScreen
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a WAAnswerHandler
		department: 	a Department


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a DepartmentScreen
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a DepartmentScreen
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a DepartmentScreen
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a DepartmentScreen
	Receiver's instance variables: 
		client: 	a WARenderVisitor


DepartmentScreen(WAComponent)>>accept:
	Receiver: a DepartmentScreen
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a WAAnswerHandler
		department: 	a Department


DepartmentScreen(WAPresenter)>>renderUndecoratedWithContext:
	Receiver: a DepartmentScreen
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a WAAnswerHandler
		department: 	a Department


WAAnswerHandler(WADecoration)>>renderNextOn:
	Receiver: a WAAnswerHandler
	Arguments and temporary variables: 
		html: 	a WARenderCanvas
	Receiver's instance variables: 
		next: 	a WAValueHolder contents: a DepartmentScreen
		block: 	[:value | 
aDelegation remove.
	event remove.
	aBlock
		valueWithPossibl...etc...


WAAnswerHandler(WADecoration)>>renderContentOn:
	Receiver: a WAAnswerHandler
	Arguments and temporary variables: 
		html: 	a WARenderCanvas
	Receiver's instance variables: 
		next: 	a WAValueHolder contents: a DepartmentScreen
		block: 	[:value | 
aDelegation remove.
	event remove.
	aBlock
		valueWithPossibl...etc...


WARenderVisitor>>visitPainter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPainter: 	a WAAnswerHandler
		renderer: 	a WARenderCanvas
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aPresenter: 	a WAAnswerHandler
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderVisitor(WAPainterVisitor)>>visitDecoration:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		aDecoration: 	a WAAnswerHandler
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WAAnswerHandler(WADecoration)>>accept:
	Receiver: a WAAnswerHandler
	Arguments and temporary variables: 
		aVisitor: 	a WARenderVisitor
	Receiver's instance variables: 
		next: 	a WAValueHolder contents: a DepartmentScreen
		block: 	[:value | 
aDelegation remove.
	event remove.
	aBlock
		valueWithPossibl...etc...


WARenderVisitor(WAVisitor)>>visit:
	Receiver: a WARenderVisitor
	Arguments and temporary variables: 
		anObject: 	a WAAnswerHandler
	Receiver's instance variables: 
		renderContext: 	a WARenderContext


WARenderingGuide(WAPresenterGuide)>>visitPainter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a WAAnswerHandler
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitPresenter:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPresenter: 	a WAAnswerHandler
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WARenderingGuide(WAPainterVisitor)>>visitDecoration:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aDecoration: 	a WAAnswerHandler
	Receiver's instance variables: 
		client: 	a WARenderVisitor


WAAnswerHandler(WADecoration)>>accept:
	Receiver: a WAAnswerHandler
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		next: 	a WAValueHolder contents: a DepartmentScreen
		block: 	[:value | 
aDelegation remove.
	event remove.
	aBlock
		valueWithPossibl...etc...


WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aComponent: 	a DepartmentScreen
	Receiver's instance variables: 
		client: 	a WARenderVisitor


DepartmentScreen(WAComponent)>>acceptDecorated:
	Receiver: a DepartmentScreen
	Arguments and temporary variables: 
		aVisitor: 	a WARenderingGuide
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a WAAnswerHandler
		department: 	a Department


WARenderingGuide(WAPresenterGuide)>>visit:
	Receiver: a WARenderingGuide
	Arguments and temporary variables: 
		aPainter: 	a DepartmentScreen
	Receiver's instance variables: 
		client: 	a WARenderVisitor


DepartmentScreen(WAPainter)>>renderWithContext:
	Receiver: a DepartmentScreen
	Arguments and temporary variables: 
		aRenderContext: 	a WARenderContext
	Receiver's instance variables: 
		decoration: 	a WAValueHolder contents: a WAAnswerHandler
		department: 	a Department



--- The full stack ---
ByteString(Object)>>doesNotUnderstand: #html
[] in DepartmentScreen>>renderContentOn:
BlockClosure>>renderOn:
WARenderCanvas(WARenderer)>>render:
WARenderCanvas(WACanvas)>>render:
[] in WAFormTag(WATagBrush)>>with:
BlockClosure>>renderOn:
WARenderCanvas(WARenderer)>>render:
WARenderCanvas(WACanvas)>>render:
WARenderCanvas(WACanvas)>>nest:
WAFormTag(WABrush)>>with:
WAFormTag(WATagBrush)>>with:
WARenderCanvas(WAHtmlCanvas)>>form:
DepartmentScreen>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitComponent:
DepartmentScreen(WAComponent)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitComponent:
DepartmentScreen(WAComponent)>>accept:
DepartmentScreen(WAPresenter)>>renderUndecoratedWithContext:
WAAnswerHandler(WADecoration)>>renderNextOn:
WAAnswerHandler(WADecoration)>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAAnswerHandler(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
DepartmentScreen(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
DepartmentScreen(WAPainter)>>renderWithContext:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
DepartmentScreen(WAPainter)>>renderOn:
WARenderCanvas(WARenderer)>>render:
WARenderCanvas(WACanvas)>>render:
WADelegation>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WARenderVisitor(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WARenderingGuide(WAPainterVisitor)>>visitDelegation:
WADelegation>>accept:
WADelegation(WAPresenter)>>renderUndecoratedWithContext:
WAToolDecoration(WADecoration)>>renderNextOn:
WAToolDecoration>>renderChildOn:
WAToolDecoration>>renderContentOn:
WARenderVisitor>>visitPainter:
WARenderVisitor(WAPainterVisitor)>>visitPresenter:
WARenderVisitor(WAPainterVisitor)>>visitDecoration:
WAToolDecoration(WADecoration)>>accept:
WARenderVisitor(WAVisitor)>>visit:
WARenderingGuide(WAPresenterGuide)>>visitPainter:
WARenderingGuide(WAPainterVisitor)>>visitPresenter:
WARenderingGuide(WAPainterVisitor)>>visitDecoration:
WAToolDecoration(WADecoration)>>accept:
WARenderingGuide(WAPainterVisitor)>>visitDecorationsOfComponent:
CompanyScreen(WAComponent)>>acceptDecorated:
WARenderingGuide(WAPresenterGuide)>>visit:
CompanyScreen(WAPainter)>>renderWithContext:
WARenderPhaseContinuation>>processRendering:
[] in WARenderPhaseContinuation>>handleRequest
WARequestContext>>respond:
WARenderPhaseContinuation(WASessionContinuation)>>respond:
WARenderPhaseContinuation>>handleRequest
[] in WARenderPhaseContinuation(WASessionContinuation)>>basicValue
BlockClosure>>on:do:
WARenderPhaseContinuation(WASessionContinuation)>>withUnregisteredHandlerDo:
WARenderPhaseContinuation(WASessionContinuation)>>basicValue
WARenderPhaseContinuation(WASessionContinuation)>>value
WASession>>handleFiltered:
WATimingToolFilter(WARequestFilter)>>handleFiltered:
[] in WATimingToolFilter>>handleFiltered:
BlockClosure>>ensure:
WATimingToolFilter>>handleFiltered:
WADeprecatedToolFilter(WARequestFilter)>>handleFiltered:
[] in WADeprecatedToolFilter>>handleFiltered:
BlockClosure>>on:do:
WADeprecatedToolFilter>>handleFiltered:
WAMutualExclusionFilter(WARequestFilter)>>handleFiltered:
[] in WAMutualExclusionFilter>>handleFiltered:
BlockClosure>>ensure:
[] in WAMutex>>critical:
[] in Semaphore>>critical:
BlockClosure>>ensure:
Semaphore>>critical:
WAMutex>>critical:
WAMutualExclusionFilter>>handleFiltered:
[] in WASession(WARequestHandler)>>handle:
BlockClosure>>on:do:
WACurrentRequestContext class(WADynamicVariable class)>>use:during:
[] in WARequestContext>>push:while:
BlockClosure>>ensure:
WARequestContext>>push:while:
WASession(WARequestHandler)>>handle:
WAApplication(WARegistry)>>dispatch:to:
WAApplication(WARegistry)>>handleKeyed:with:
WAApplication(WARegistry)>>handleFiltered:
WAApplication>>handleFiltered:
WAExceptionFilter(WARequestFilter)>>handleFiltered:
[] in WAExceptionFilter>>handleFiltered:
BlockClosure>>on:do:
WAWalkbackErrorHandler(WAExceptionHandler)>>handleExceptionsDuring:
WAWalkbackErrorHandler class(WAExceptionHandler class)>>handleExceptionsDuring:context:
WAExceptionFilter>>handleFiltered:
[] in WAApplication(WARequestHandler)>>handle:
BlockClosure>>on:do:
WACurrentRequestContext class(WADynamicVariable class)>>use:during:
[] in WARequestContext>>push:while:
BlockClosure>>ensure:
WARequestContext>>push:while:
WAApplication(WARequestHandler)>>handle:
WADispatcher>>handleFiltered:named:
WADispatcher>>handleFiltered:
[] in WADispatcher(WARequestHandler)>>handle:
BlockClosure>>on:do:
WACurrentRequestContext class(WADynamicVariable class)>>use:during:
[] in WARequestContext>>push:while:
BlockClosure>>ensure:
WARequestContext>>push:while:
WADispatcher(WARequestHandler)>>handle:
[] in WAComancheAdaptor(WAServerAdaptor)>>handleRequest:
BlockClosure>>on:do:
WAComancheAdaptor(WAServerAdaptor)>>handleRequest:
WAComancheAdaptor(WAServerAdaptor)>>handle:
[] in WAComancheAdaptor(WAServerAdaptor)>>process:
BlockClosure>>ensure:
WAComancheAdaptor(WAServerAdaptor)>>process:
WAComancheAdaptor>>processHttpRequest:
HttpService>>processHttpRequest:
[] in HttpAdaptor>>dispatchRequest:
BlockClosure>>on:do:
HttpService>>handleDispatchErrorsIn:
HttpAdaptor>>dispatchRequest:
[] in HttpAdaptor>>beginConversation
BlockClosure>>ensure:
HttpAdaptor>>beginConversation
HttpAdaptor class>>readAndWriteTo:service:
HttpAdaptor class>>readAndWriteToSocket:service:
HttpService>>serve:
[] in HttpService(TcpService)>>value:
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
Error: Please close this to abort file opening
1 May 2011 1:49:41 pm

VM: Win32 - IX86 - 6.1 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47]
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Contents\Resources
Trusted Dir C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Contents\Resources\Andrei Varanovich
Untrusted Dir C:\Users\Andrei Varanovich\Documents\My Squeak

MultiByteFileStream class(Object)>>error:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		aString: 	'Please close this to abort file opening'
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


MultiByteFileStream class(StandardFileStream class)>>fileExistsUserHandling:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fullFileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app...etc...
		dir: 	DosFileDirectory on 'C:\Users\Andrei Varanovich\Desktop\101companies\101co...etc...
		localName: 	'101companies.st'
		choice: 	3
		newName: 	nil
		newFullFileName: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileExistsException>>defaultAction
	Receiver: FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	FileExistsException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fileClass: 	MultiByteFileStream


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companie...etc...
	Receiver's instance variables: 
nil

FileExistsException(Exception)>>pass
	Receiver: FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	FileExistsException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fileClass: 	MultiByteFileStream


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101compani...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[757@291 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1436@792
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(361758720) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.809 g: 0.809 b: 0.809)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>valueWithPossibleArgs:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101c...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companie...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(445382656)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		valueWithPossibleArgs: {exception}]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	90
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companie...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(445382656)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileExistsException(Exception)>>signal
	Receiver: FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	FileExistsException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fileClass: 	MultiByteFileStream


MultiByteFileStream class(StandardFileStream class)>>newFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fullName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>newFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'101companies.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*System-Changes' fileIn fileInObjectAndCode fileIntoNewChangeSe...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Files-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


FileStream class>>writeSourceCodeFrom:baseName:isSt:
	Receiver: FileStream
	Arguments and temporary variables: 
		aStream: 	a WriteStream 'WAComponent subclass: #AbstractComponent
	instanceVaria...etc...
		baseName: 	#'101companies'
		stOrCsFlag: 	true
		extension: 	'.st'
		converter: 	a MacRomanTextConverter
		f: 	nil
		fileName: 	'101companies.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*System-Changes' fileIn fileInObjectAndCode fileIntoNewChangeSe...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Files-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet Announcer)
('Announcements-View' Announ...etc...
	Arguments and temporary variables: 
		category: 	#'101companies'
		internalStream: 	a WriteStream 'WAComponent subclass: #AbstractComponent
	instan...etc...
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-View' #'Balloon-Collecti...etc...
		categoryStops: 	#(3 4 8 12 17 21 26 30 38 44 45 57 64 73 88 89 101 108 116 127 1...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #Announcer #AnnouncementSpy #Poi...etc...


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<101companies>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#'101companies'


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<101companies>
		requestor: 	an OBColumn(101companies)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(372768768)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<101companies>
		requestor: 	an OBColumn(101companies)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(295698432)'File out (o)'
	Arguments and temporary variables: 
		evt: 	[757@291 mouseUp 10119972 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	676@282 corner: 866@296
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	676@282 corner: 866@296
		color: 	Color black
		extension: 	a MorphExtension (298057728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(295698432)'File out (o)'
	Arguments and temporary variables: 
		evt: 	[757@291 mouseUp 10119972 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	676@282 corner: 866@296
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	676@282 corner: 866@296
		color: 	Color black
		extension: 	a MorphExtension (298057728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(295698432)'File out (o)'
	Arguments and temporary variables: 
		evt: 	[757@291 mouseUp 10119972 nil]
	Receiver's instance variables: 
		bounds: 	676@282 corner: 866@296
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	676@282 corner: 866@296
		color: 	Color black
		extension: 	a MorphExtension (298057728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(295698432)'File out (o)'
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
	Receiver's instance variables: 
		bounds: 	676@282 corner: 866@296
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	676@282 corner: 866@296
		color: 	Color black
		extension: 	a MorphExtension (298057728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [757@291 mouseUp 10119972 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(295698432)'File out (o)'
	Receiver's instance variables: 
		timeStamp: 	10119972
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	757@291
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(295698432)'File out (o)'
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
	Receiver's instance variables: 
		bounds: 	676@282 corner: 866@296
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	676@282 corner: 866@296
		color: 	Color black
		extension: 	a MorphExtension (298057728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		aMorph: 	a ToggleMenuItemMorph(295698432)'File out (o)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		aMorph: 	a ToggleMenuItemMorph(295698432)'File out (o)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(295698432)'File out (o)'
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	676@282 corner: 866@296
		owner: 	a MenuMorph(1009254400)
		submorphs: 	#()
		fullBounds: 	676@282 corner: 866@296
		color: 	Color black
		extension: 	a MorphExtension (298057728)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		aMorph: 	a MenuMorph(1009254400)
		localEvt: 	[757@291 mouseUp 10119972 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(295698432)'File out (o)'
		morphs: 	an Array(a ToggleMenuItemMorph(60555264)'Add category...' a ToggleMenuI...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		aMorph: 	a MenuMorph(1009254400)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(1009254400)
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	672@174 corner: 870@403
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(60555264)'Add category...' a ToggleMe...etc...
		fullBounds: 	672@174 corner: 871@404
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (1012662272) [other:  (basicColor -> (Color r: 0.78...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(101companies)
		selectedItem: 	a ToggleMenuItemMorph(295698432)'File out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(1009254400)
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
	Receiver's instance variables: 
		bounds: 	672@174 corner: 870@403
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(60555264)'Add category...' a ToggleMe...etc...
		fullBounds: 	672@174 corner: 871@404
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (1012662272) [other:  (basicColor -> (Color r: 0.78...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(101companies)
		selectedItem: 	a ToggleMenuItemMorph(295698432)'File out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(1009254400)
	Arguments and temporary variables: 
		evt: 	[757@291 mouseUp 10119972 nil]
	Receiver's instance variables: 
		bounds: 	672@174 corner: 870@403
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(60555264)'Add category...' a ToggleMe...etc...
		fullBounds: 	672@174 corner: 871@404
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (1012662272) [other:  (basicColor -> (Color r: 0.78...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(101companies)
		selectedItem: 	a ToggleMenuItemMorph(295698432)'File out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		focusHolder: 	a MenuMorph(1009254400)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	695@301 corner: 711@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	695@301 corner: 711@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(56098816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[695@301 695@301 mouseMove 10125369 nil]
		targetOffset: 	79@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10125369 695 301 0 0 0 1)
		lastKeyScanCode: 	49
		combinedChar: 	nil


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1436@792
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(361758720) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.809 g: 0.809 b: 0.809)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>on:do:
	Receiver: [aBlock value]
	Arguments and temporary variables: 
		exception: 	Error
		handlerAction: 	[:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	...etc...
		handlerActive: 	false
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	67
		numArgs: 	0


PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		aBlock: 	[ActiveHand := self.
	ActiveEvent := anEvent.
	result := focusHolder
		...etc...
		priorWorld: 	a PasteUpMorph(425197568) [world]
		priorHand: 	a HandMorph(843055104)
		priorEvent: 	[757@291 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1436@792
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(361758720) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.809 g: 0.809 b: 0.809)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[757@291 mouseUp 10119972 nil]
		focusHolder: 	a MenuMorph(1009254400)
		aBlock: 	[self mouseFocus: nil]
		w: 	a PasteUpMorph(425197568) [world]
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	695@301 corner: 711@317
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	695@301 corner: 711@317
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(56098816)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[695@301 695@301 mouseMove 10125369 nil]
		targetOffset: 	79@7
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10125369 695 301 0 0 0 1)
		lastKeyScanCode: 	49
		combinedChar: 	nil



--- The full stack ---
MultiByteFileStream class(Object)>>error:
MultiByteFileStream class(StandardFileStream class)>>fileExistsUserHandling:
FileExistsException>>defaultAction
UndefinedObject>>handleSignal:
FileExistsException(Exception)>>pass
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>valueWithPossibleArgs:
[] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileExistsException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>newFileNamed:
FileStream class>>newFileNamed:
FileStream class>>writeSourceCodeFrom:baseName:isSt:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

THERE_BE_DRAGONS_HERE
MessageNotUnderstood: receiver of "asVmPathName" is nil
1 May 2011 1:56:59 pm

VM: Win32 - IX86 - 6.1 - Croquet Closure Cog VM [CoInterpreter VMMaker-oscog.47]
Image: Pharo1.1.1 [Latest update: #11414]

SecurityManager state:
Restricted: false
FileAccess: true
SocketAccess: true
Working Dir C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Contents\Resources
Trusted Dir C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Contents\Resources\Andrei Varanovich
Untrusted Dir C:\Users\Andrei Varanovich\Documents\My Squeak

UndefinedObject(Object)>>doesNotUnderstand: #asVmPathName
	Receiver: nil
	Arguments and temporary variables: 
		aMessage: 	asVmPathName
		exception: 	MessageNotUnderstood: receiver of "asVmPathName" is nil
		resumeValue: 	nil
	Receiver's instance variables: 
nil

MultiByteFileStream(StandardFileStream)>>open:forWrite:
	Receiver: MultiByteFileStream: nil
	Arguments and temporary variables: 
		fileName: 	nil
		writeMode: 	false
		f: 	nil
	Receiver's instance variables: 



MultiByteFileStream>>open:forWrite:
	Receiver: MultiByteFileStream: nil
	Arguments and temporary variables: 
		fileName: 	nil
		writeMode: 	false
		result: 	nil
	Receiver's instance variables: 



MultiByteFileStream class(StandardFileStream class)>>isAFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	nil
		f: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


MultiByteFileStream class(StandardFileStream class)>>newFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	nil
		fullName: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


MultiByteFileStream class(StandardFileStream class)>>fileExistsUserHandling:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fullFileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app...etc...
		dir: 	DosFileDirectory on 'C:\Users\Andrei Varanovich\Desktop\101companies\101co...etc...
		localName: 	'101companies.st'
		choice: 	2
		newName: 	nil
		newFullFileName: 	nil
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileExistsException>>defaultAction
	Receiver: FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	FileExistsException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fileClass: 	MultiByteFileStream


UndefinedObject>>handleSignal:
	Receiver: nil
	Arguments and temporary variables: 
		exception: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companie...etc...
	Receiver's instance variables: 
nil

FileExistsException(Exception)>>pass
	Receiver: FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	FileExistsException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fileClass: 	MultiByteFileStream


[] in PasteUpMorph>>becomeActiveDuring:
	Receiver: a PasteUpMorph(425197568) [world]
	Arguments and temporary variables: 
		priorWorld: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101compani...etc...
		priorHand: 	a PasteUpMorph(425197568) [world]
		priorEvent: 	a HandMorph(843055104)
		ex: 	[765@296 mouseOver red nil nil]
	Receiver's instance variables: 
		bounds: 	0@0 corner: 1436@792
		owner: 	nil
		submorphs: 	an Array(a TaskbarMorph(811335680) a PreDebugWindow(607649792) an OB...etc...
		fullBounds: 	nil
		color: 	(Color r: 0.191 g: 0.191 b: 0.191)
		extension: 	a MorphExtension (666632192) [eventHandler = an EventHandler]  [othe...etc...
		borderWidth: 	0
		borderColor: 	(Color r: 0.809 g: 0.809 b: 0.809)
		model: 	a MorphicModel(504889344)
		cursor: 	1
		padding: 	3
		backgroundMorph: 	nil
		isPartsBin: 	nil
		autoLineLayout: 	false
		indicateCursor: 	nil
		resizeToFit: 	nil
		worldState: 	a WorldState
		griddingOn: 	nil


BlockClosure>>valueWithPossibleArgs:
	Receiver: [:ex | 
ActiveWorld := priorWorld.
	ActiveEvent := priorEvent.
	ActiveHand := priorHand.
	...etc...
	Arguments and temporary variables: 
		anArray: 	an Array(FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101c...etc...
	Receiver's instance variables: 
		outerContext: 	PasteUpMorph>>becomeActiveDuring:
		startpc: 	78
		numArgs: 	1


[] in MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companie...etc...
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(445382656)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


BlockClosure>>ensure:
	Receiver: [(self tempAt: 2)
		valueWithPossibleArgs: {exception}]
	Arguments and temporary variables: 
		aBlock: 	[self tempAt: 3 put: true]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	MethodContext(ContextPart)>>handleSignal:
		startpc: 	90
		numArgs: 	0


MethodContext(ContextPart)>>handleSignal:
	Receiver: BlockClosure>>on:do:
	Arguments and temporary variables: 
		exception: 	FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companie...etc...
		val: 	nil
	Receiver's instance variables: 
		sender: 	PasteUpMorph>>becomeActiveDuring:
		pc: 	17
		stackp: 	3
		method: 	(BlockClosure>>#on:do: "a CompiledMethod(445382656)")
		closureOrNil: 	nil
		receiver: 	[aBlock value]


FileExistsException(Exception)>>signal
	Receiver: FileExistsException: 'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Arguments and temporary variables: 

	Receiver's instance variables: 
		messageText: 	nil
		tag: 	nil
		signalContext: 	FileExistsException(Exception)>>signal
		handlerContext: 	BlockClosure>>on:do:
		outerContext: 	nil
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fileClass: 	MultiByteFileStream


MultiByteFileStream class(StandardFileStream class)>>newFileNamed:
	Receiver: MultiByteFileStream
	Arguments and temporary variables: 
		fileName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
		fullName: 	'C:\Users\Andrei Varanovich\Desktop\101companies\101companies.app\Con...etc...
	Receiver's instance variables: 
		superclass: 	StandardFileStream
		methodDict: 	a MethodDictionary(#accepts:->(MultiByteFileStream>>#accepts: "a Co...etc...
		format: 	152
		instanceVariables: 	#('converter' 'lineEndConvention' 'wantsLineEndConversion')
		organization: 	('accessing' ascii binary converter converter: fileInEncodingName...etc...
		subclasses: 	nil
		name: 	#MultiByteFileStream
		classPool: 	a Dictionary(#Cr->Character cr #CrLf->'

' #Lf->Character lf #LineEn...etc...
		sharedPools: 	nil
		environment: 	a SystemDictionary(lots of globals)
		category: 	#'Multilingual-TextConversion'
		traitComposition: 	{}
		localSelectors: 	nil


FileStream class>>newFileNamed:
	Receiver: FileStream
	Arguments and temporary variables: 
		fileName: 	'101companies.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*System-Changes' fileIn fileInObjectAndCode fileIntoNewChangeSe...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Files-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


FileStream class>>writeSourceCodeFrom:baseName:isSt:
	Receiver: FileStream
	Arguments and temporary variables: 
		aStream: 	a WriteStream 'WAComponent subclass: #AbstractComponent
	instanceVaria...etc...
		baseName: 	#'101companies'
		stOrCsFlag: 	true
		extension: 	'.st'
		converter: 	a MacRomanTextConverter
		f: 	nil
		fileName: 	'101companies.st'
	Receiver's instance variables: 
		superclass: 	ReadWriteStream
		methodDict: 	a MethodDictionary(#asBinaryOrTextStream->(FileStream>>#asBinaryOrT...etc...
		format: 	140
		instanceVariables: 	#('rwmode')
		organization: 	('*System-Changes' fileIn fileInObjectAndCode fileIntoNewChangeSe...etc...
		subclasses: 	{StandardFileStream}
		name: 	#FileStream
		classPool: 	a Dictionary()
		sharedPools: 	nil
		environment: 	nil
		category: 	#'Files-Kernel'
		traitComposition: 	nil
		localSelectors: 	nil


SystemOrganizer>>fileOutCategory:
	Receiver: ('Announcements-Core' Announcement AnnouncementSet Announcer)
('Announcements-View' Announ...etc...
	Arguments and temporary variables: 
		category: 	#'101companies'
		internalStream: 	a WriteStream 'WAComponent subclass: #AbstractComponent
	instan...etc...
	Receiver's instance variables: 
		categoryArray: 	#(#'Announcements-Core' #'Announcements-View' #'Balloon-Collecti...etc...
		categoryStops: 	#(3 4 8 12 17 21 26 30 38 44 45 57 64 73 88 89 101 108 116 127 1...etc...
		elementArray: 	#(#Announcement #AnnouncementSet #Announcer #AnnouncementSpy #Poi...etc...


OBClassCategoryNode>>fileOut
	Receiver: OBClassCategoryNode<101companies>
	Arguments and temporary variables: 

	Receiver's instance variables: 
		metaNode: 	ClassCategory
#classes->Class
#comments->ClassComment
#metaclasses->M...etc...
		environment: 	Smalltalk
		name: 	#'101companies'


OBCmdFileOut>>execute
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 

	Receiver's instance variables: 
		target: 	OBClassCategoryNode<101companies>
		requestor: 	an OBColumn(101companies)


OBCmdFileOut(OBCommand)>>perform:orSendTo:
	Receiver: an OBCmdFileOut
	Arguments and temporary variables: 
		aSelector: 	#execute
		anObject: 	an OBPluggableListMorph(372768768)
	Receiver's instance variables: 
		target: 	OBClassCategoryNode<101companies>
		requestor: 	an OBColumn(101companies)


[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(40632320)'File out (o)'
	Arguments and temporary variables: 
		evt: 	[765@296 mouseUp 10366672 nil]
		selArgCount: 	2
	Receiver's instance variables: 
		bounds: 	685@288 corner: 875@302
		owner: 	a MenuMorph(745275392)
		submorphs: 	#()
		fullBounds: 	685@288 corner: 875@302
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


BlockClosure>>ensure:
	Receiver: [| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [target perform: selector...etc...
	Arguments and temporary variables: 
		aBlock: 	[oldcursor show]
		complete: 	nil
		returnValue: 	nil
	Receiver's instance variables: 
		outerContext: 	ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
		startpc: 	132
		numArgs: 	0


CursorWithMask(Cursor)>>showWhile:
	Receiver: ((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r10000000000000000000000...etc...
	Arguments and temporary variables: 
		aBlock: 	[| selArgCount | (selArgCount := selector numArgs) = 0
		ifTrue: [targe...etc...
		oldcursor: 	((CursorWithMask
	extent: 16@16
	depth: 1
	fromArray: #(
		2r0
		2r1...etc...
	Receiver's instance variables: 
		bits: 	a Bitmap of length 16
		width: 	16
		height: 	16
		depth: 	1
		offset: 	-1@ -1
		maskForm: 	Form(16x16x1)


ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
	Receiver: a ToggleMenuItemMorph(40632320)'File out (o)'
	Arguments and temporary variables: 
		evt: 	[765@296 mouseUp 10366672 nil]
		w: 	a PasteUpMorph(425197568) [world]
	Receiver's instance variables: 
		bounds: 	685@288 corner: 875@302
		owner: 	a MenuMorph(745275392)
		submorphs: 	#()
		fullBounds: 	685@288 corner: 875@302
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
	Receiver: a ToggleMenuItemMorph(40632320)'File out (o)'
	Arguments and temporary variables: 
		evt: 	[765@296 mouseUp 10366672 nil]
	Receiver's instance variables: 
		bounds: 	685@288 corner: 875@302
		owner: 	a MenuMorph(745275392)
		submorphs: 	#()
		fullBounds: 	685@288 corner: 875@302
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
	Receiver: a ToggleMenuItemMorph(40632320)'File out (o)'
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
	Receiver's instance variables: 
		bounds: 	685@288 corner: 875@302
		owner: 	a MenuMorph(745275392)
		submorphs: 	#()
		fullBounds: 	685@288 corner: 875@302
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MouseButtonEvent>>sentTo:
	Receiver: [765@296 mouseUp 10366672 nil]
	Arguments and temporary variables: 
		anObject: 	a ToggleMenuItemMorph(40632320)'File out (o)'
	Receiver's instance variables: 
		timeStamp: 	10366672
		source: 	a HandMorph(843055104)
		windowIndex: 	nil
		type: 	#mouseUp
		buttons: 	0
		position: 	765@296
		handler: 	nil
		wasHandled: 	true
		whichButton: 	4


ToggleMenuItemMorph(Morph)>>handleEvent:
	Receiver: a ToggleMenuItemMorph(40632320)'File out (o)'
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
	Receiver's instance variables: 
		bounds: 	685@288 corner: 875@302
		owner: 	a MenuMorph(745275392)
		submorphs: 	#()
		fullBounds: 	685@288 corner: 875@302
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
		aMorph: 	a ToggleMenuItemMorph(40632320)'File out (o)'
		localEvt: 	nil
		index: 	1
		child: 	nil
		morphs: 	#()
		inside: 	true
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
		aMorph: 	a ToggleMenuItemMorph(40632320)'File out (o)'
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


ToggleMenuItemMorph(Morph)>>processEvent:using:
	Receiver: a ToggleMenuItemMorph(40632320)'File out (o)'
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	685@288 corner: 875@302
		owner: 	a MenuMorph(745275392)
		submorphs: 	#()
		fullBounds: 	685@288 corner: 875@302
		color: 	Color black
		extension: 	a MorphExtension (43253760)
		font: 	a StrikeFont(Bitmap DejaVu Sans 9 14)
		emphasis: 	0
		contents: 	'File out (o)'
		hasFocus: 	false
		isEnabled: 	true
		subMenu: 	nil
		isSelected: 	false
		target: 	an OBCmdFileOut
		selector: 	#perform:orSendTo:
		arguments: 	an Array(#execute an OBPluggableListMorph(372768768))
		icon: 	Form(16x1x8)
		getStateSelector: 	nil
		enablementSelector: 	nil
		keyText: 	nil


MorphicEventDispatcher>>dispatchDefault:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
		aMorph: 	a MenuMorph(745275392)
		localEvt: 	[765@296 mouseUp 10366672 nil]
		index: 	9
		child: 	a ToggleMenuItemMorph(40632320)'File out (o)'
		morphs: 	an Array(a ToggleMenuItemMorph(873463808)'Add category...' a ToggleMenu...etc...
		inside: 	false
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MorphicEventDispatcher>>dispatchEvent:with:
	Receiver: a MorphicEventDispatcher
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
		aMorph: 	a MenuMorph(745275392)
	Receiver's instance variables: 
		lastType: 	#mouseUp
		lastDispatch: 	#dispatchDefault:with:


MenuMorph(Morph)>>processEvent:using:
	Receiver: a MenuMorph(745275392)
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
		defaultDispatcher: 	a MorphicEventDispatcher
	Receiver's instance variables: 
		bounds: 	681@180 corner: 879@409
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(873463808)'Add category...' a ToggleM...etc...
		fullBounds: 	681@180 corner: 880@410
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (748945408) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(101companies)
		selectedItem: 	a ToggleMenuItemMorph(40632320)'File out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph(Morph)>>processEvent:
	Receiver: a MenuMorph(745275392)
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
	Receiver's instance variables: 
		bounds: 	681@180 corner: 879@409
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(873463808)'Add category...' a ToggleM...etc...
		fullBounds: 	681@180 corner: 880@410
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (748945408) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(101companies)
		selectedItem: 	a ToggleMenuItemMorph(40632320)'File out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


MenuMorph>>handleFocusEvent:
	Receiver: a MenuMorph(745275392)
	Arguments and temporary variables: 
		evt: 	[765@296 mouseUp 10366672 nil]
	Receiver's instance variables: 
		bounds: 	681@180 corner: 879@409
		owner: 	nil
		submorphs: 	an Array(a ToggleMenuItemMorph(873463808)'Add category...' a ToggleM...etc...
		fullBounds: 	681@180 corner: 880@410
		color: 	(Color r: 0.871 g: 0.871 b: 0.871)
		extension: 	a MorphExtension (748945408) [other:  (basicColor -> (Color r: 0.784...etc...
		borderWidth: 	1
		borderColor: 	Color gray
		defaultTarget: 	an OBColumn(101companies)
		selectedItem: 	a ToggleMenuItemMorph(40632320)'File out (o)'
		stayUp: 	false
		popUpOwner: 	nil
		activeSubMenu: 	nil
		activatorDockingBar: 	nil
		embeddable: 	nil


[] in HandMorph>>sendFocusEvent:to:clear:
	Receiver: a HandMorph(843055104)
	Arguments and temporary variables: 
		anEvent: 	[765@296 mouseUp 10366672 nil]
		focusHolder: 	a MenuMorph(745275392)
		result: 	#(nil)
	Receiver's instance variables: 
		bounds: 	923@357 corner: 939@373
		owner: 	a PasteUpMorph(425197568) [world]
		submorphs: 	#()
		fullBounds: 	923@357 corner: 939@373
		color: 	Color blue
		extension: 	a MorphExtension (141295616) [eventHandler = an EventHandler] 
		mouseFocus: 	nil
		keyboardFocus: 	a PluggableButtonMorph(305922048)
		eventListeners: 	nil
		mouseListeners: 	nil
		keyboardListeners: 	nil
		mouseClickState: 	nil
		mouseOverHandler: 	a MouseOverHandler
		lastMouseEvent: 	[923@358 923@357 mouseMove 10564590 nil]
		targetOffset: 	27@13
		damageRecorder: 	a DamageRecorder
		cacheCanvas: 	nil
		cachedCanvasHasHoles: 	true
		temporaryCursor: 	nil
		temporaryCursorOffset: 	nil
		hardwareCursor: 	nil
		hasChanged: 	true
		savedPatch: 	nil
		userInitials: 	''
		lastEventBuffer: 	#(1 10564590 923 357 0 0 1 1)
		lastKeyScanCode: 	29
		combinedChar: 	nil



--- The full stack ---
UndefinedObject(Object)>>doesNotUnderstand: #asVmPathName
MultiByteFileStream(StandardFileStream)>>open:forWrite:
MultiByteFileStream>>open:forWrite:
MultiByteFileStream class(StandardFileStream class)>>isAFileNamed:
MultiByteFileStream class(StandardFileStream class)>>newFileNamed:
MultiByteFileStream class(StandardFileStream class)>>fileExistsUserHandling:
FileExistsException>>defaultAction
UndefinedObject>>handleSignal:
FileExistsException(Exception)>>pass
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>valueWithPossibleArgs:
[] in MethodContext(ContextPart)>>handleSignal:
BlockClosure>>ensure:
MethodContext(ContextPart)>>handleSignal:
FileExistsException(Exception)>>signal
MultiByteFileStream class(StandardFileStream class)>>newFileNamed:
FileStream class>>newFileNamed:
FileStream class>>writeSourceCodeFrom:baseName:isSt:
SystemOrganizer>>fileOutCategory:
OBClassCategoryNode>>fileOut
OBCmdFileOut>>execute
OBCmdFileOut(OBCommand)>>perform:orSendTo:
[] in ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
BlockClosure>>ensure:
CursorWithMask(Cursor)>>showWhile:
ToggleMenuItemMorph(MenuItemMorph)>>invokeWithEvent:
ToggleMenuItemMorph(MenuItemMorph)>>mouseUp:
ToggleMenuItemMorph(MenuItemMorph)>>handleMouseUp:
MouseButtonEvent>>sentTo:
ToggleMenuItemMorph(Morph)>>handleEvent:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
ToggleMenuItemMorph(Morph)>>processEvent:using:
MorphicEventDispatcher>>dispatchDefault:with:
MorphicEventDispatcher>>dispatchEvent:with:
MenuMorph(Morph)>>processEvent:using:
MenuMorph(Morph)>>processEvent:
MenuMorph>>handleFocusEvent:
[] in HandMorph>>sendFocusEvent:to:clear:
 - - - - - - - - - - - - - - -  
			- - - - - - - - - - - - - - - - - -
[] in PasteUpMorph>>becomeActiveDuring:
BlockClosure>>on:do:
PasteUpMorph>>becomeActiveDuring:
HandMorph>>sendFocusEvent:to:clear:
HandMorph>>sendEvent:focus:clear:
HandMorph>>sendMouseEvent:
HandMorph>>handleEvent:
HandMorph>>processEvents
[] in WorldState>>doOneCycleNowFor:
Array(SequenceableCollection)>>do:
WorldState>>handsDo:
WorldState>>doOneCycleNowFor:
WorldState>>doOneCycleFor:
PasteUpMorph>>doOneCycle
[] in Project class>>spawnNewProcess
[] in BlockClosure>>newProcess
------------------------------------------------------------

