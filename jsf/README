== Intent ==

[[web programming]] with [[Technology:JavaServer Faces]]

== Languages ==

* [[Language:Java]]
* [[Language:XHTML]]
* [[Language:CSS]]
* [[Language:XML]]

== Technologies ==

* [[Technology:JavaServer Faces]]
* [[Technology:Hibernate]]
* [[Language:Java]]-[[:Category:Annotation|annotations]]
* [[Technology:NetBeans]]
* [[Technology:Glassfish]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]
* [[101feature:Persistence]]
* [[101feature:Precedence]]
* [[101feature:Validation]]

== Motivation ==

This implementation covers the popular approach for [[Web-application programming]] with [[Technology:JavaServer Faces]]. It introduces the [[Technology:GlassFish]] [[:Category:Webserver]]. The implementation illustrates the use of the [[Pattern:Model View Controller|MVC]]- and [[Pattern:Data Access Object|DAO]]-[[:Category:Pattern|patterns]]. The view and controller are implemented with [[Technology:JavaServer Faces]], where the model is implemented with [[Technology:Hibernate]].

== Illustration ==

The features [[101feature:Cut]] and [[101feature:Total]] are implemented by [[Technology:Java Beans]]. In case of [[101feature:Company|company]] the [this!!jsf/web/company.xhtml company.xhtml] contains a button:

<syntaxhighlight lang="xml" source="jsf/web/company.xhtml" line>

    ...
    <h:commandButton value="cut" actionListener="#{companyBean.cut()}"/>
    ...

</syntaxhighlight>

The ''commandButton'' creates an html-button with the name "cut", specified by the attribute ''value''. The action-listener invokes the method ''cut()'' in the managed [[Technology:Java Beans|bean]] [this!!jsf/src/java/company/beans/jsf/CompanyBean.java CompanyBean.java]:

<syntaxhighlight lang="java" source="jsf/src/java/company/beans/jsf/CompanyBean.java" line>

    // this method cuts all employees of the loaded company
    public void cut() {
        HibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();
        DAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);
        EmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();
        
        for (Employee employee : employees) {
            employee.setSalary(employee.getSalary() / 2);
            employeeDAO.makePersistent(employee);
        }
        
        total = total / 2;
        HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();
    }

</syntaxhighlight>

== Architecture ==

* The architecture is based on the [[Pattern:Model View Controller|MVC]]-Pattern. View and Controller are implemented with the [[Technology:JavaServer Faces|JSF]]-technology. The view is made with [[Technology:Facelets]], e. g. [this!!jsf/web/company.xhtml company.xhtml], [this!!jsf/web/department.xhtml department.xhtml], [this!!jsf/web/employee.xhtml employee.xhtml]. The controller is made with [[Technology:Java Beans#Managed Beans|managed beans]]. The view invokes the specific methods of this controller [this!!jsf/src/java/company/beans/jsf/CompanyBean.java CompanyBean.java], [this!!jsf/src/java/company/beans/jsf/DepartmentBean.java DepartmentBean.java] and [this!!jsf/src/java/company/beans/jsf/EmployeeBean.java EmployeeBean.java].

* The [[Technology:JavaServer Faces|JSF]]-framework creates [[Language:HTML]]- and [[Language:JavaScript]]-code out of the [[Technology:Facelets]]. Within this [[Language:JavaScript]], the [[client]] creates requests to the [[:Category:Server]] via [[Technology:XMLHttpRequest]].

* The [[Technology:Java Beans]] encapsulate business methods to create the webservices, which send the responses to the [[:Category:Client]]-requests. The used [[:Category:Webserver]] for this webservices is [[Technology:GlassFish]].

* The grid for the main [[101feature:Interaction|GUI]] features is implemented via [this!!jsf/web/template.xhtml template]. This template adjusts the headline, content-frame and button-line for each view.

* The model is realized as [[Pattern:Data Access Object|DAOs]]. The [[Technology:Java Beans]] call the DAO-methods and the DAOs fill the [this!!jsf/src/java/company/classes/company.java company]-, [this!!jsf/src/java/company/classes/department.java department]- and [this!!jsf/src/java/company/classes/employee.java employee]-objects. In case of this implementation, the DAO connects to a [[Technology:MySQL]]-Database via [[Technology:Hibernate]].

== Usage ==

You need an sql-server to use this application. In this tutorial both will be taken by XAMPP: http://www.apachefriends.org/en/xampp.html

You can use the ''company.sql'' and ''sampleCompany.sql'' of [[101implementation:mySql]] for this project.

* Download and install XAMPP
* Open the "XAMPP Control Panel" and start "Apache" and "MySQL"
* Use the guideline of [[101implementation:mySql]] up to "Populate tables..."

After the database is running, follow the next steps:

* To start the application, you need to download all project-files except the README
* Open the project with [[Technology:NetBeans]] (http://netbeans.org/)
* Select the project, right click and ''run''
* The glassfish-server (and a browser window) with the application will start automatically

The project is implemented with [[Technology:NetBeans]] 7.0.1. You will need the full version with an installed [[Technology:GlassFish]] [[:Category:Webserver]].

== Contributors ==

* {{101contributor|Tobias Zimmer|developer}}