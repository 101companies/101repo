== Intent ==

[[web programming]] with [[Technology:JavaServer Faces]]

== Languages ==

* [[Language:Java]]
* [[Language:XHTML]]
* [[Language:CSS]]
* [[Language:XML]]

== Technologies ==

* [[Technology:JavaServer Faces]]
* [[Technology:Hibernate]]
* [[Language:Java]]-[[:Category:Annotation|annotations]]
* [[Technology:NetBeans]]
* [[Technology:Glassfish]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]
* [[101feature:Persistence]]
* [[101feature:Precedence]]
* [[101feature:Validation]]

== Motivation ==

This implementation covers the popular approach for [[Web-application programming]] with [[Technology:JavaServer Faces]]. It introduces the [[Technology:Glassfish]] [[webserver]]. The implementation illustrates the use of [[Pattern:Model View Controller|MVC]] and [[Pattern:Data Access Object]]. The view and controller are implemented with [[Technology:JavaServer Faces]], where the model is implemented with [[Technology:Hibernate]].

== Illustration ==

The features [[101feature:Cut]] and [[101feature:Total]] are implemented by [[Technology:Java Beans]]. In case of [[101feature:Company|company]] the [this!!org.softlang.jsf/web/company.xhtml company.xhtml] contains a button:

<syntaxhighlight lang="xml">

    ...
    <h:commandButton value="cut" actionListener="#{companyBean.cut()}"/>
    ...

</syntaxhighlight>

The ''h:commandButton'' creates an html-button with the name "cut", specified by the attribute ''value''. The action-listener invokes the method ''cut()'' in the managed [[Technology:Java Beans|bean]] [this!!org.softlang.jsf/src/java/company/beans/jsf/CompanyBean.java CompanyBean.java]:

<syntaxhighlight lang="java">

    // this method cuts all employees of the loaded company
    public void cut() {
        HibernateUtil.getSessionFactory().getCurrentSession().beginTransaction();
        DAOFactory daoFactory = DAOFactory.instance(DAOFactory.HIBERNATE);
        EmployeeDAO employeeDAO = daoFactory.getEmployeeDAO();
        
        for (Employee employee : employees) {
            employee.setSalary(employee.getSalary() / 2);
            employeeDAO.makePersistent(employee);
        }
        
        total = total / 2;
        HibernateUtil.getSessionFactory().getCurrentSession().getTransaction().commit();
    }

</syntaxhighlight>

== Architecture ==

* The architecture is based on the [[Pattern:Model View Controller|MVC]]-Pattern. View and Controller are implemented with the [[Technology:JavaServer Faces|JSF]]-technology. The [[101feature:Interaction|GUI]] is made with [[Technology:Facelets]], e. g. [this!!org.softlang.jsf/web/company.xhtml company.xhtml], [this!!org.softlang.jsf/web/department.xhtml department.xhtml], [this!!org.softlang.jsf/web/employee.xhtml employee.xhtml].

== Usage ==

You need an sql-server to use this application. In this tutorial both will be taken by XAMPP: http://www.apachefriends.org/en/xampp.html

You can use the ''company.sql'' and ''sampleCompany.sql'' of [[101implementation:mySql]] for this project.

* Download and install XAMPP
* Open the "XAMPP Control Panel" and start "Apache" and "MySQL"
* Use the guideline of [[101implementation:mySql]] up to "Populate tables..."

After the database is running, follow the next steps:

* To start the application, you need to download all project-files except the README
* Open the project with [[Technology:NetBeans]] (http://netbeans.org/)
* Select the project, right click and ''run''
* The glassfish-server (and a browser window) with the application will start automatically

The project is implemented with [[Technology:NetBeans]] 7.0.1. You will need the full version with an installed [[Technology:Glassfish]] [[webserver]].

== Contributors ==

* {{101contributor|Tobias Zimmer|developer}}