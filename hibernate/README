== Intent == 

[[O/R mapping]] with [[Technology:Hibernate]]

== Languages ==

* [[Language:Java]]
* [[Language:SQL]]
* [[Language:HSQLDialect]]
* [[Language:HQL]]
* [[Language:XML]]

== Technologies ==

* [[Technology:Hibernate]]
* [[Technology:HSQLDB]]
* [[Javaclipse]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Persistence]]

== Motivation ==

[[O/R mapping]] or [[persistence]] within the Java platform are exercised by means 
of [[Technology:Hibernate]]. The primary data model for companies is a straightforward
object model for [[POJO]]s. A mapping is defined to associate a relational schema
with the classes. The mapping is specified in an [[Language:XML]] language and organized
in a per-class manner. For each class, properties and relationships are specified by
the mapping. It is insightful to compare the object model and the mapping-implied relational
schema. It is also insightful to compare the latter schema with one that was ''natively'' 
designed from a relational database point of view; see [[101implementation:mySql]]. In 
particular, the object model and the implied relational schema are essentially "optimized" 
for downwards traversal of the company structure whereas a native relational schema would
rather provide foreign keys for upwards navigation (such as navigating from an employee to
its department or company).

== Illustration ==

Consider the following sketch of the class for departments:

<syntaxhighlight lang="java">
public class Department {
  private Long id;
  private String name;
  private Set<Employee> employees;
  private Set<Department> subdepts;

  public Long getId() { ... }
  private void setId(Long id) { ... }
  public String getName() { ... }
  public void setName(String name) { ... }
  public Set<Employee> getEmployees() { ... }
  private void setEmployees(Set<Employee> employees) { ... }
  public Set<Department> getSubdepts() { ... }
  private void setSubdepts(Set<Department> subdepts) { ... }
}
</syntaxhighlight>

Each persistent class must provide a property (i.e., a getter and a setter) for
an ''id'' that can serve as primary key in the database. Relationships with cardinality 
one-to-many should be implemented as ''sets'' as opposed to ''lists''.
Other than that, a persistent class is not much different from a regular
[[POJO]]-like class. (Hibernate uses setters for object population---as opposed
to direct field access. Hence, there are private setters that would be missing
from a native object model.)

Consider the mapping file of class ''Department'' to table ''DEPARTMENT'':

<syntaxhighlight lang="xml">
<hibernate-mapping>
 <class name="org.softlang.company.Department" table="DEPARTMENT">
  <id name="id" column="ID">
    <generator class="native" />
  </id>
  <property name="name" />
  <set name="employees" cascade="all">
   <key column="DEPT_ID" />
   <one-to-many class="org.softlang.company.Employee" />
  </set>
  <set name="subdepts" cascade="all">
   <key column="DEPT_ID" />
   <one-to-many class="org.softlang.company.Department" />
  </set>
 </class>
</hibernate-mapping>
</syntaxhighlight>

All properties of the class are associated with the relational schema.
That is, the ''id'' property is directly mapped to a primary key column
''ID'' of the ''DEPARTMENT'' table. Also, the ''name'' property is mapped
to a column of just that name---applying default mapping rules between
SQL types and Java types. Further, the ''employees'' property is 
non-trivially associated with a foreign key ''DEPT_ID'' of the 
''EMPLOYEE'' table (which is only indirectly identified through the 
mentioning of the ''Employee'' class; likewise for sub-departments.

Persistent objects are brought back to memory as follows:

<syntaxhighlight lang="java">
public Company loadCompany(String name) {
  this.session = getSessionFactory().getCurrentSession();
  this.session.beginTransaction();
  List<?> result = this.session.createQuery(
    "from Company where name = '" + name + "'").list();
  for (Object o : result)
    return (Company)o;
  return null;
}
</syntaxhighlight>

That is, an [[Language:HQL]] query is executed to retrieve a company 
that is identified by name; the Hibernate framework takes care of populating
the company object and all its sub-objects. If the requested company cannot be found,
then ''null'' is returned.

Finally, consider the Hibernate configuration:

<syntaxhighlight lang="xml">
<hibernate-configuration>
 <session-factory>
  <!-- Database connection settings. -->
  <property name="connection.driver_class">org.hsqldb....
  <property name="connection.url">...
  <property name="connection.username">...
  <property name="connection.password">...
   <!-- Create the database schema, if needed; update otherwise -->
  <property name="hbm2ddl.auto">update</property>			  			  
  <!-- This part lists all the mapping files present in the project -->
  <mapping resource="org/softlang/company/Company.hbm.xml" />
  <mapping resource="org/softlang/company/Department.hbm.xml" />
  <mapping resource="org/softlang/company/Employee.hbm.xml" />
  ...
 </session-factory>
</hibernate-configuration>
</syntaxhighlight>

This configuration helps the runtime to connect to the right database, to find
all mapping files of interest, and to define some essential settings. For instance,
Hibernate is informed here that the database catalog is to be updated automatically
(see ''hbm2ddl.auto'' ... ''update'') upon setting a Hibernate session. If the mapping-implied
tables are not yet defined by the database at hand, then they will be automatically created.

== Architecture ==

Package ''org.softlang.company'' hosts the java object model for [[101feature:Company]]
and the O/R-mapping files. Package ''org.softlang.features'' provides functionality for 
[[101feature:Total]] and [[101feature:Cut]] as well as boilerplate code for 
[[101feature:Persistence]]. The folder ''scripts'' contains SQL-scripts to create tables
(extracted from the hibernate log; there is no need to execute these statements), and to 
populate the tables (needed in the workflow described below). The Hibernate configuration 
file is located in the root dir. The HSQLDB database files are located in the data dir.

== Usage ==

Please follow these steps carefully.

=== Start from a clean setup ===

Upon checking out the implementation, you are clean.

The "make clean" target in the root dir should bring you back to a clean setup.

However, make sure the HSQL database server is shutdown as you go clean.

=== Build the project ===

This is an Eclipse project.

Everything is included.

The project should built fine within Eclipse without additional efforts.

=== Start the HSQL database server ===

* Go to the data dir of the distribution.
* Run the following command in the command line:
** > java -classpath ../lib/hsqldb.jar org.hsqldb.Server 
** You can also send it to the background if you like.
** You can also go to the root dir and run "make start-db" instead.

=== Start the database monitor ===

* Go to the root dir of the distribution.
* Run the following command in the command line:
** > java -classpath lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
** You can also send it to the background if you like.
** You can also go to the root dir and run "make start-gui" instead.
* When the GUI pops up, make sure to select '''"HSQL Database Engine Server"'''.

=== Create tables ===

The tables are automatically created by trying to query them.

There is JUnit test ''Load'' in package ''org.softlang.tests'' which just does that.

Do ''refresh'' in the database monitor to see all tables in the left panel.

=== Populate tables ===

Suitable INSERT statements for population are to be found in scripts/PopulateTables.sql

Open the file and copy and paste its content over to the database monitor, and execute the statements.

You may want to double-check that the tables were populated.

To this end, enter a SQL statement such as "select * from EMPLOYEE;".

=== More testing ===

Run the JUnit test ''Operations'' in package ''org.softlang.tests''.

The modified state is '''not''' committed; hence, the test can be executed time and again.

Run the JUnit test ''Save'' in package ''org.softlang.tests''.

The modified state is committed; the test will only succeed once.

=== Finish off ===

Go to the database monitor and enter and execute "shutdown;".

Quite the database monitor.

You may also want to run "make clean" in the root dir to be clean for next time.

== Issues == 

* Efficiency/incrementality of loading objects and saving changes

== Contributors ==

* {{101contributor|Jürgen Starek|assistant}}
* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf Lämmel|developer}}
* {{101contributor|Andrei Varanovich|reviewer}}

== Acknowledgments ==

This implementation has consulted and adopted material from several sources.

* https://sourceforge.net/projects/developers/
* The Hibernate Tutorial by Red Hat Middleware LLC: http://www.hibernate.org/hib_docs/v3/reference/en/html/tutorial.html
* Christian Bauer, Gavin King: Java Persistence with Hibernate. Manning Publications, 2006