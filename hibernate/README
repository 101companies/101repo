== Intent == 

[[O/R mapping]] with [[Technology:Hibernate]]

== Languages ==

* [[Language:Java]]
* [[Language:SQL]]
* [[Language:XML]]

== Technologies ==

* [[Technology:Hibernate]]: Hibernate Framework
* [[Technology:HSQLDB]]: Hibernate [:Category:Database management system|DBMS]
* [[Technology:javac]]: Java compiler (Version 1.6)
* [[Technology:JDK]]: provider of javac et al.
* [[Technology:JSE]]: execution platform (Version 1.6)
* [[Technology:JUnit]]: automated testing support (Version 4)
* [[Technology:Eclipse]]: optional IDE (Version 3.4.1)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Persistence]]

== Motivation ==

An [[object model]] for companies is provided, as well as classes to total and cut salaries.
This is, we apply a basic style of [[OO programming]]. Instances of the company model are [[Persistence|persisted]] by making use of the [[Technology:Hibernate]]
technology. To that end the [[O/R mapping]] is realized by making use of [[Language:XML]]-mapping files both for departments and employees. 

== Illustration ==

<syntaxhighlight lang="xml">
</syntaxhighlight>

== Architecture ==

Package ''org.softlang.company'' hosts the java object model for [[101feature:Company]] and the O/R-mapping files.
''org.softlang.features'' provides functionality for [[101feature:Total]] and [[101feature:Cut]] as well as 
boilerplate code for [[101feature:Persistence]]. The folder ''scripts'' contains SQL-scripts to create tables 
(extracted from the hibernate log; there is no need to execute these statements), populate the tables (needed
in the workflow described below). The Hibernate configuration file is located in the root dir.

== Usage ==

Please follow these steps carefully.

=== Start from a clean setup ===

Upon checking out the implementation, you are clean.

The "make clean" target in the root dir should bring you back to a clean setup.

However, make sure the HSQL database server is shutdown as you go clean.

=== Build the project ===

This is an Eclipse project.

Everything is included.

The project should built fine within Eclipse without additional efforts.

=== Start the HSQL database server ===

* Go to the data dir of the distribution.
* Run the following command in the command line:
** > java -classpath ../lib/hsqldb.jar org.hsqldb.Server 
** You can also send it to the background if you like.
** You can also go to the root dir and run "make start-db" instead.

=== Start the database monitor ===

* Go to the root dir of the distribution.
* Run the following command in the command line:
** > java -classpath lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
** You can also send it to the background if you like.
** You can also go to the root dir and run "make start-gui" instead.
* When the GUI pops up, make sure to select '''"HSQL Database Engine Server"'''.

=== Create tables ===

The tables are automatically created by trying to query them.

There is JUnit test ''Load'' in package ''org.softlang.tests'' which just does that.

Do ''refresh'' in the database monitor to see all tables in the left panel.

=== Populate tables ===

Suitable INSERT statements for population are to be found in scripts/PopulateTables.sql

Open the file and copy and paste its content over to the database monitor, and execute the statements.

You may want to double-check that the tables were populated.

To this end, enter a SQL statement such as "select * from EMPLOYEE;".

=== More testing ===

Run the JUnit test ''Operations'' in package ''org.softlang.tests''.

The modified state is '''not''' committed; hence, the test can be executed time and again.

Run the JUnit test ''Save'' in package ''org.softlang.tests''.

The modified state is committed; the test will only succeed once.

=== Finish off ===

Go to the database monitor and enter and execute "shutdown;".

Quite the database monitor.

You may also want to run "make clean" in the root dir to be clean for next time.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}

== Issues == 

* Efficiency/incrementality of saving changes
* How to deal with acknowledgments? (See COPYRIGHT file in svn)  
