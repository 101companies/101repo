== Intent == 

[[O/R mapping]] with [[Technology:Hibernate]]

== Implementations ==

There is another Hibernate implementation available: [[101implementation:hibernate2]]. The variation is concerned with object model and relational schema details. 
That is, this project's object model is mapped to a relational schema, which uses backward references, while [[101implementation:hibernate2|hibernate2]]'s schema represents the company structure in a compositional way 

== Languages ==

* [[Language:XML]]
* [[Language:Java]]
* [[Language:SQL]]

== Technologies ==

* [[Technology:Hibernate]]: Hibernate Framework
* [[Technology:HSQLDB]]: Hibernate [:Category:Database management system|DBMS]
* [[Technology:javac]]: Java compiler (Version 1.6)
* [[Technology:JDK]]: provider of javac et al.
* [[Technology:JSE]]: execution platform (Version 1.6)
* [[Technology:JUnit]]: automated testing support (Version 4)
* [[Technology:Eclipse]]: optional IDE (Version 3.4.1)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Persistence]]

== Motivation == 

An [[object model]] for companies is provided, as well as classes to total and cut salaries.
This is, we apply a basic style of [[OO programming]]. Instances of the company model are [[Persistence|persisted]] by making use of the [[Technology:Hibernate]]
technology. To that end the [[O/R mapping]] is realized by making use of [[Language:XML]]-mapping files both for departments and employees. 

== Illustration ==

<syntaxhighlight lang="xml">
</syntaxhighlight>

== Architecture ==

Package ''org.softlang.om'' holds the java object model for [[101feature:Company]] and the xml-mapping files.
''org.softlang.hibernate'' provides functionality to [[101feature:Total]] and [[101feature:Cut]] salaries. 
This package also hosts ''Init.java'' which tells hibernate to create tables; also test cases (see below) and
and ''HibernateConnectivity.java'' to easily load and save company objects. This class uses the ''SessionFactory'' provided by ''HibernateUtil.java'' in ''org.softlang.util''.
The folder ''scripts'' contains sql-scripts to create tables (extracted from the hibernate log), populate data and to drop tables.
Hibernate configuration files (see below) can be found in the project's root folder.

== Usage ==

Please follow these steps carefully.

=== Start from a clean setup ===

Upon checking out the implementation, you are clean.

The "make clean" target in the root dir should bring you back to a clean setup.

=== Build the project ===

This is an Eclipse project.

Everything is included.

The project should build within Eclipse without additional efforts.

=== Start the HSQL database server ===

* Go to the data dir of the distribution.
* Run the following command in the command line:
** > java -classpath ../lib/hsqldb.jar org.hsqldb.Server 
** You can also send it to the background if you like.
** You can also go to the root dir and run "make start-db" instead.

=== Start the database monitor ===

* Go to the root dir of the distribution.
* Run the following command in the command line:
** > java -classpath lib/hsqldb.jar org.hsqldb.util.DatabaseManagerSwing
** You can also send it to the background if you like.
** You can also go to the root dir and run "make start-gui" instead.
* When the GUI pops up, make sure to select '''"HSQL Database Engine Server"'''.

=== Create tables ===

The tables are automatically created by trying to query them.

There is JUnit test ''Load'' in package ''org.softlang.tests'' which just does that.

Do ''refresh'' in the database monitor.

All tables should be now listed in left panel.


'''How and why to start the database monitor:'''



* Build the project with Eclipse.
* Summary of remaining steps:
** Start the HSQL database server.
** Run ''org/softlang/hibernate/Init.java'' to create tables.
** Run the database monitor and populate the tables with scripts/PopulateTables.
** Patch hibernate.cfg.xml to disable "drop and re-recreate".
** Run ''org/softlang/hibernate/Tests.java''.

All steps are explained in more detail below.



* If you had performed Main already, you see the tables of the app.
* Populate these tables:
** Open scripts/PopulateTables (File -> Open Script)
** Press "Execute SQL"


'''How and why to patch ''hibernate.cfg.xml?'' '''

You can edit that XML file in Eclipse.
It is the configuration that is used for Hibernate for persistency.
Upon the first use the EventManager the database must be initialized.
Hence it says:
: <property name="hbm2ddl.auto">create</property>
Subsequently, we want to keep all data.
Hence the line should be commented out.

'''How to test:'''

* Run ''Tests.java'' in ''org.softlang.hibernate''.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}

== Issues == 

* Efficiency/incrementality of saving changes
* How to deal with acknowledgements? (See COPYRIGHT file in svn)  
