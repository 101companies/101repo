== Intent ==

parsing textual syntax with [[Technology:Parsec]] in [[Language:Haskell]]

== Languages ==

* [[Language:Haskell]]

== Technologies ==

* [[Technology:GHCi]]
* [[Technology:Parsec]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Mentoring]]
* [[101feature:Serialization]]
* [[101feature:Parsing]]

== Motivation ==

We make use of [[Language:Haskell]]'s [[Technology:Parsec]] [[Parsing|parser]] combinator [[:Category:Library|library]] to parse concrete textual syntax for [[101feature:Company|companies]].
We combine smaller parsers, say for salaries, to larger parsers, say for departments and employees, to build a parser for companies.
In terms of parsing we exercise sequence, alternative and option.
This implementation also demonstrates [[Functor|applicative functors]] and functor combinators provided by the ''Control.Applicative'' module.

== Illustration ==

=== Parser type ===

We define a type alias of all parsers that are defined in this implementation:

<syntaxhighlight lang="haskell" source="haskellParser/Parser.hs" line>
type P = Parsec String ()
</syntaxhighlight>

That is, we are dealing with parsers of stream type <syntaxhighlight lang="haskell" enclose="none">String</syntaxhighlight> and state type <syntaxhighlight lang="haskell" enclose="none">()</syntaxhighlight> (no state). The return type of running such a parser is explained further below.

=== Primitive parsers ===

In order to build the company parser we first need some primitive parsers.
For parsing a given <syntaxhighlight lang="haskell" enclose="none">String</syntaxhighlight> value we define:

<syntaxhighlight lang="haskell" source="haskellParser/Parser.hs" line>
pString :: String -> P String
pString s = string s <* spaces
</syntaxhighlight>

This parser also consumes trailing spaces.
We also need a parser for literals. <syntaxhighlight lang="haskell" enclose="none">pLit</syntaxhighlight> parses a quoted string:

<syntaxhighlight lang="haskell" source="haskellParser/Parser.hs" line>
pLit :: P String
pLit = string "\"" *> many (noneOf "\"") <* string "\"" <* spaces
</syntaxhighlight>

=== Parsing a department ===

<syntaxhighlight lang="haskell" source="haskellParser/Parser.hs" line>
pDepartment :: P Department
pDepartment = Department
  <$  pString "department" <*> pLit 
  <*  pString "{" <*> pEmployee "manager"
  <*> many pSubUnit <* pString "}"
</syntaxhighlight>

We make use of the <syntaxhighlight lang="haskell" enclose="none">(<$) :: Functor f => a -> f b -> f a </syntaxhighlight> operator in line 3. That is, we pass the department constructor <syntaxhighlight lang="haskell" enclose="none">Department</syntaxhighlight> and a parser for all constructor parameters (for name, manager and for the list of subunits) to receive a parser for departments. 
In line 3 we parse the keyword for department declaration "department". In the next line we parse the department name, followed by an opening curly bracket. In line 4 we compose a parser for the department's manager using the employee parser <syntaxhighlight lang="haskell" enclose="none">pEmployee</syntaxhighlight>, which should use "manager" as the keyword. In the last line <syntaxhighlight lang="haskell" enclose="none">many :: f a -> f [a]</syntaxhighlight> is used to parse the list of subunits using <syntaxhighlight lang="haskell" enclose="none">pSubUnit</syntaxhighlight> as the parser for each subunits. Finally, we define that we expect a closing curly bracket at the end of a department declaration.

=== Running the Parser ===

Running the company parser is realized by making use of <syntaxhighlight lang="haskell" enclose="none">runP</syntaxhighlight>:
<syntaxhighlight lang="haskell">
runP :: Stream s Identity t => Parsec s u a -> u -> SourceName -> s -> Either ParseError a
</syntaxhighlight>
We illustrated above that we use parsers of type <syntaxhighlight lang="haskell" enclose="none">Parsec String ()</syntaxhighlight>, which parse values of type <syntaxhighlight lang="haskell" enclose="none">Company</syntaxhighlight>. Therefore we can simplify the type signature: 
<syntaxhighlight lang="haskell">
Parsec String () Company -> () -> SourceName -> String -> Either ParseError a
</syntaxhighlight>
When we choose <syntaxhighlight lang="haskell" enclose="none">"input"</syntaxhighlight> as the source name we can define a function to run the company parser:

<syntaxhighlight lang="haskell" source="haskellParser/Parser.hs" line>
parseCompany :: String -> Either ParseError Company
parseCompany = runP (spaces *> pCompany <* eof) () 
               "input"
</syntaxhighlight>

We added a parser for possible leading spaces and a parser for the EOF-symbol.

=== Executing the Parser ===

In [this!!Main.hs] we execute the company parser:

<syntaxhighlight lang="haskell" source="haskellParser/Main.hs" line>
parsedCompany <- liftM parseCompany $ 
                 readFile "sample.Company"
</syntaxhighlight>

The variable <syntaxhighlight lang="haskell" enclose="none">parsedCompany</syntaxhighlight> either holds a <syntaxhighlight lang="haskell" enclose="none">ParseError</syntaxhighlight> value or a parsed company. 
We define print-function handling both cases:

<syntaxhighlight lang="haskell" source="haskellParser/Main.hs" line>
eitherPrint :: Show a => Either ParseError Company -> (Company -> a) -> IO ()
eitherPrint (Right c) f = print $ f c
eitherPrint (Left e) _ = print e
</syntaxhighlight>

In case parsing was successful this function applies a given function to the company and prints the result. In case of a parse error, it prints the error message.
We can use this function to print the total salary of <syntaxhighlight lang="haskell" enclose="none">parsedCompany</syntaxhighlight> in case of parsing success:

<syntaxhighlight lang="haskell" line>
rightApplyPrint parsedCompany total
</syntaxhighlight>

== Architecture ==

[this!!Parser.hs] provides the Parsec-based parser. [this!!Company.hs] holds the algebraic datatype for companies, 
while [this!!Total.hs] and [this!!Cut.hs] provide functionality to total and cut companies. [this!!SampleCompany] holds a sample company used to be compared to a parsed sample company (hosted by [this!!sample.Company]). [this!!Main.hs] collects test scenarios.

== Usage ==

* [this!!Main.hs] has to be loaded into GHCi. 
* The <syntaxhighlight lang="haskell" enclose="none">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Contributors ==

* {{101contributor|Martijn van Steenbergen|developer}}
* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}