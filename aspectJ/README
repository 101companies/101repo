== Intent ==

advanced modularization with [[Language:AspectJ]]

== Languages ==

* [[Language:AspectJ]]

== Technologies ==

* [[Technology:AJDT]]: compilation and IDE support for AspectJ
* [[Technology:AspectJ compiler]]: compilation (provided by AJDT)
* [[Technology:JSE]]: execution platform (Version 1.6)
* [[Technology:JUnit]]: automated testing support (Version 4)
* [[Technology:Eclipse]]: optional IDE (Version 3.6)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Depth]]
* [[101feature:Logging]]

== Motivation ==

Some concepts of [[aspect-oriented programming]] are put to work. The starting 
point is a simple [[object model]] for companies with only [[getter]]s, [[setter]]s, 
and [[constructor method]]s. Basic operations on companies are provided by means 
of [[inter-type declaration]]s. That is, inter-type declarations allow us here to 
implement those methods "after the fact" in an extra module. Compare this
with the use [[101implementation:java]] where the methods are readily implemented
with the classes. Further, logging is supported by [[around advice]] attached to 
any call for cutting salaries. 

== Illustration ==

The following [[Language:AspectJ]] aspect declares instance methods for
cutting salaries on the classes of the object model for companies; the
actual method bodies, which are elided, do not differ in any way from a 
straightforward OO implementation:

<syntaxhighlight lang="aspectj">
public aspect Cut {
   public void Company.cut() { ... }
   public void Department.cut() { ... }
   public void Employee.cut() { ... }
}
</syntaxhighlight>

The next goal is to log applications of cut so that the total of an 
object is logged before and after applying ''cut''. Thus:

<pre>
...
> BEGIN Cut org.softlang.company.Department "Dev1.1". Total: 4689.0
> BEGIN Cut org.softlang.company.Employee "Karl". Total: 2345.0
> END Cut org.softlang.company.Employee "Karl". Total: 1172.5
> BEGIN Cut org.softlang.company.Employee "Joe". Total: 2344.0
> END Cut org.softlang.company.Employee "Joe". Total: 1172.0
> END Cut org.softlang.company.Department "Dev1.1". Total: 2344.5
...
</pre>

To this end, the ''cut'' methods of company, department, and employee
objects must be intercepted. In an effort to improve the design of
the object model so that the pointcut can be expressed more polymorphically,
we introduce an interface for all common operations and implement it "after 
the fact" for all the types of the object model for companies:

<syntaxhighlight lang="aspectj">
public interface Operations {
   String getName();
   double total();
   void cut();
}

public aspect Polymorphism {
   declare parents: Company implements Operations;
   declare parents: Department implements Operations;
   declare parents: Employee implements Operations;
}
</syntaxhighlight>

It remains to declare a pointcut for all calls of
''cut'' and to advice each intercepted methods call with logging
actions before and after (say, around) it.

<syntaxhighlight lang="aspectj">
pointcut cut(Operations o):
   target(o) && call(void Operations.cut());
        
void around(Operations o): cut(o) {
   ... // Log "before" state
   proceed(o);
   ... // Log "after" state
}
</syntaxhighlight>

== Architecture ==

Package ''org.softlang.company'' hosts the object model for [[101feature:Company]].
The Java classes of this object model do not implement any other features.
Package ''org.softlang.aspectj'' hosts aspects for [[101feature:Total]], 
[[101feature:Cut]], [[101feature:Depth]], and [[101feature:Logging]]. There is 
another aspect ''Polymorphism'' which rehashes existing operations (getName,
total, cut) as an interface ''Operations'' on the relevant classes. Finally, 
package ''org.softlang.aspectj.tests'' hosts JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project.
* AJDT must be installed in Eclipse if Eclipse is to be used.
* Open the project with Eclipse; this will also build the project.
* There are JUnit tests available as the package ''org.softlang.java.tests''.
** Run class Tests with JUnit to exercise all features.

== Contributors ==

* {{101contributor|Ralf LÃ¤mmel|developer}}
* {{101contributor|Thomas Schmorleiz|developer}}
