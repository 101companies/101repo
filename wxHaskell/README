== Intent ==

Provide [[101feature:Interaction|interaction]] on companies by means of [[Technology:wxHaskell]]

== Languages ==

* [[Language:Haskell]]

== Technologies ==

* [[Technology:wxHaskell]]
* [[Technology:GHC]]
* [[Technology:GHCi]]      

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]

== Motivation ==

We use the [[Technology:wxHaskell]] library to provide a simple GUI for [[101feature:Company|companies]]. 
One can navigate the hierarchical company structure, [[101feature:Cut|cut]] [[101feature:Total|totaled]] salaries and edit fields for values of [[Primitive Type|primitive types]]. 
We make use of the [[Zipper|zipper]]-inspired focus concept to specify which part of the company should be shown or saved after editing.
This concept also helps us to read departments/employees from a given position within the company and write transformed departments/employees back.  

== Illustration ==

=== Focus datatype ===

We are using a datastructure inspired by the concept of [[Zipper|zippers]] to specify positions of components within the company. We provide an algebraic datatype <syntaxhighlight lang="haskell" enclose="none">Focus</syntaxhighlight>:

<syntaxhighlight lang="haskell" source="wxHaskell/Focus.hs" line>
data Focus = 
     CompanyFocus
   | DeptFocus [Int]
   | ManagerFocus [Int]
   | EmployeeFocus [Int] Int
    deriving (Show, Read)
</syntaxhighlight>

We define one constructor per company datatype and one for managers. For example to construct a focus for an employee one needs to pass:
* A list of indexes: Starting from the company root this list is used to navigate through the departments and subdepartments to the employee's department.
* An index: The index of this employee in the employee's department's employees list.
On top of this definition we provide functions to get sub and upper foci and to read and write company components (see [this!!Focus.hs] for details).

=== The views ===

For each company datatype, that is <syntaxhighlight lang="haskell" enclose="none">Company</syntaxhighlight>, <syntaxhighlight lang="haskell" enclose="none">Department</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">Employee</syntaxhighlight>, [this!!Views.hs] provides a view to display the specific component including buttons to navigate and cut salaries. All of these functions are of type <syntaxhighlight lang="haskell" enclose="none">Frame () -> Focus -> Company -> IO ()</syntaxhighlight>. That is, given the global frame, a focus and a company these functions perform GUI actions (which are IO actions). 
In the following we demonstrate how an employee is displayed.

==== Viewing an employee ====

<syntaxhighlight lang="haskell" enclose="none">showEmployee</syntaxhighlight> is the view function for employees:

<syntaxhighlight lang="haskell" source="wxHaskell/Views.hs" line>
viewEmployee :: Frame () -> Focus -> Company -> IO ()
viewEmployee f focus c = do
    -- reading employee
    let e = readEM focus c
    -- setting up frames and panels
    set f [ text := "Employee \"" ++ ename e ++ "\""]
    p <- panel f [textColor := textBlue]
    -- boxes for name, address and salary
    nameBox <- entry p [text := ename e]                                    
    addressBox <- entry p [text := address e]
    salaryBox <- entry p [text := show $ salary e]
    -- cut button
    cButton <- cutButton p f focus c
    -- back button                                
    bButton <- backButton p f focus c           
    -- save button                                                             
    sButton <- button  p 
          [ text := "Save"
          , size := Size 50 22 
          , on command := do { 
              newName <- get nameBox text;
              newAddress <- get addressBox text;
              newSalary <- get salaryBox text;
              objectDelete p;
              viewEmployee f focus $ 
               writeEM focus c $ 
                Employee newName newAddress $ 
                 read newSalary; }]
    -- compose layout                                 
    setEmployeeLayout f p sButton bButton nameBox addressBox salaryBox cButton
</syntaxhighlight>

In line 4 we read the employee in question using the ''Focus'' module's function <syntaxhighlight lang="haskell" enclose="none">readEM</syntaxhighlight>. In lines 6-7 we set the frame title and create a new panel for this view. In lines 9-11 we create one input box per employee field. We create buttons to cut the employee's salary and to go back to the department level in lines 13-15. In lines 17-28 we set up a save button: When a user clicks the button, the name, address and salary fields are read, the panel is deleted, the employee is updated in the company and the new company is displayed. In the last line  we call <syntaxhighlight lang="haskell" enclose="none">setEmployeeLayout</syntaxhighlight>, which composes the layout using various layout combinators (see [this!!Views.hs] for details).

=== Cutting button ===

On each view the GUI provides a button to cut all salaries: 

<syntaxhighlight lang="haskell" source="wxHaskell/Views.hs" line>
cutButton :: Panel () -> Frame () -> Focus -> Company -> IO (Button ())
cutButton p f focus c = 
  button p [ text := "Cut"      
           , size := Size 50 22                                                                
           , on command := do {
                objectDelete p; 
                view f focus $ readCutWrite focus c;}]   
</syntaxhighlight>

When the user clicks the button the <syntaxhighlight lang="haskell" enclose="none">command</syntaxhighlight> action (lines 5-7) is executed. First the view's panel is deleted in line 6. We use <syntaxhighlight lang="haskell" enclose="none">readCutWrite</syntaxhighlight> to cut the company component's salaries. This function reads the component in question based on the focus, then cuts this component's salaries and replaces it in the given company. In line 7 the <syntaxhighlight lang="haskell" enclose="none">command</syntaxhighlight> action calls <syntaxhighlight lang="haskell" enclose="none">view</syntaxhighlight> to view the company, department or employee. Based on the focus <syntaxhighlight lang="haskell" enclose="none">view</syntaxhighlight> decides which concrete view-function to call:

<syntaxhighlight lang="haskell" source="wxHaskell/Views.hs" line>
view:: Frame () -> Focus -> Company -> IO ()
view f focus = view' f focus
  where 
    view' = case focus of
              CompanyFocus        -> viewCompany
              (DeptFocus _)       -> viewDept
              (EmployeeFocus _ _) -> viewEmployee
              (ManagerFocus _)    -> viewEmployee       
</syntaxhighlight>

=== Starting the GUI ===

We use xwHaskell's <syntaxhighlight lang="haskell" enclose="none">start :: IO a -> IO ()</syntaxhighlight>. This function runs the given GUI of type <syntaxhighlight lang="haskell" enclose="none">IO a</syntaxhighlight> while discarding <syntaxhighlight lang="haskell" enclose="none">a</syntaxhighlight> and returning <syntaxhighlight lang="haskell" enclose="none">IO ()</syntaxhighlight>:

<syntaxhighlight lang="haskell" source="wxHaskell/Main.hs" line>
gui :: IO ()
gui = do
    f <- frame [ textBgcolor := colorRGB 112 128 144 
               , resizeable := False
               , fontWeight := WeightBold
               , fontUnderline := False
               , position := Point 50 50]
    showCompany f CompanyFocus company 

main :: IO ()
main = start gui
</syntaxhighlight>

In lines 3-7 <syntaxhighlight lang="haskell" enclose="none">gui</syntaxhighlight> creates the main frame for all views passing a list attributes, which are assigned by making use of assign operator <syntaxhighlight lang="haskell" enclose="none">(:=)</syntaxhighlight>. The function calls <syntaxhighlight lang="haskell" enclose="none">showCompany</syntaxhighlight> passing the frame, the root focus and a sample company in line 8.

== Architecture ==

[this!!Views.hs] provides one view per company datatype. [this!!Main.hs] starts the GUI. The algebraic datatype for companies can be found in [this!!Company.hs], a sample company in [this!!SampleCompany.hs]. [this!!Focus.hs] provides a focus datatype and functions on top of it. [this!!Total.hs] and [this!!Cut.hs] provide functionality to total and cut salaries.

== Usage ==

* [this!!Main.hs] has to be compiled using GHC
* The output executable has to run. 
There is a ''Makefile'' with a target ''start'' covering both stepts. 

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}