== Intent ==

Provide [[101feature:Interaction|interaction]] on companies by means of [[Technology:wxHaskell]]

== Languages ==

* [[Language:Haskell]]

== Technologies ==

* [[Technology:wxHaskell]]
* [[Technology:GHC]]
* [[Technology:GHCi]]      

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]

== Motivation ==

We use the [[Technology:wxHaskell]] library to provide a simple GUI for [[101feature:Company|companies]]. 
One can navigate the hierachical company structure, [101feature:Cut|cut] salaries and edit fields of [[Primitive Type|primitive types ]]. 
We make use the [[Zipper]] concept to specify which part of the company should be shown or saved after editing.
This concept also helps us to read departments/employees from a given position within the company and write manipulated departments/employees back.  

== Illustration ==

=== Starting the GUI ===

In the ''Main'' module we use xwHaskell's <syntaxhighlight lang="haskell" enclose="none">start :: IO a -> IO ()</syntaxhighlight>. This function runs the given GUI of type <syntaxhighlight lang="haskell" enclose="none">IO a</syntaxhighlight> while discarding <syntaxhighlight lang="haskell" enclose="none">a</syntaxhighlight> and returning <syntaxhighlight lang="haskell" enclose="none">IO ()</syntaxhighlight> (code can be found in [this!!Main.hs]):

<syntaxhighlight lang="haskell">
gui :: IO ()
gui = do
    f <- frame [ textBgcolor := colorRGB 112 128 144 
               , resizeable := False
               , fontWeight := WeightBold
               , fontUnderline := False
               , position := Point 50 50]
    showCompany f CompanyFocus company 

main :: IO ()
main = start gui
</syntaxhighlight>

<syntaxhighlight lang="haskell" enclose="none">gui</syntaxhighlight> creates the main frame for all views passing a list design attributes by using the assign operator <syntaxhighlight lang="haskell" enclose="none">(:=)</syntaxhighlight>. After that the function calls <syntaxhighlight lang="haskell" enclose="none">showCompany</syntaxhighlight> passing the frame, the root focus and a sample company provided by the ''SampleCompany'' module (in [this!!SampleCompany.hs]).

=== The views ===

For each company data type, that is <syntaxhighlight lang="haskell" enclose="none">Company</syntaxhighlight>, <syntaxhighlight lang="haskell" enclose="none">Department</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">Employee</syntaxhighlight>, the ''Views'' module (in [this!!Views.hs]) provides a view to display the specific component including buttons to cut and save.

In the following we demonstrate how an employee is displayed.

==== Viewing an employee ====

The function <syntaxhighlight lang="haskell" enclose="none">viewEmployee</syntaxhighlight> to view an employee can be found in the ''Views'' module (in [this!!Views.hs]). The function is of type <syntaxhighlight lang="haskell" enclose="none">Company</syntaxhighlight>.



== Architecture ==

There is also a simple API (''API.hs'') to companies providing reading and writing (see Motivation) and getters and setters.

== Usage ==

The ''Main'' module has to be compiled using GHC the output executable has to run. There is a ''Makefile'' with a target ''start'' covering both stepts. Also, there is a ''clean'' target to reset the project.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}