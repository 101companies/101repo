== Intent ==

database programming with [[Technology:HaskellDB]]

== Languages ==

* [[Language:Haskell 98]]
* [[Language:SQL]]

== Technologies ==

* [[Technology:HaskellDB]]
* [[Technology:ODBC]]
* [[Technology:HDBC]]
* [[Technology:DBDirect]]
* [[Technology:MySql]]
* [[Technology:GHCi]]      

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]

== Motivation ==

We make use of [[Technology:HaskellDB|HaskellDB]] to express [[Database|database]] [[Query|queries]] as [[Language:Haskell]] functions rather than [[Language:SQL]]-statements. That is, we use the rich [[Combinator Library|combinator library]] of HaskellDB to express [[101feature:Total|totaling]] and [[101feature:Cut|cutting]] statements based on [[Rational algebra|rational algebra]].  We demonstrate:

* Projection (HaskellDB' <syntaxhighlight lang="haskell" enclose="none">project</syntaxhighlight>)
* Selection (HaskellDB' <syntaxhighlight lang="haskell" enclose="none">restrict</syntaxhighlight>)
* Aggregation (Here HaskellDB' <syntaxhighlight lang="haskell" enclose="none">_sum</syntaxhighlight>)
* Renaming (HaskellDB' <syntaxhighlight lang="haskell" enclose="none"><<</syntaxhighlight>)

We connect to the underlining [[Technology:MySql]] database through a HaskellDB-[[Technology:HDBC]]-[[Technology:ODBC]] backend. We show the common approach of seperating query/statement definition from the actual [[Database implementation|database implementation]]-dependent query/statement execution. That is, the queries and statements themselfs are database implementation-independent (see the illustration section for details).

This implementation also demonstrates the use of [[Technology:DBDirect]]. We use this [[Tool|tool]] to generate the modules describing the database. The modules are the basis for quering the rational data.

== Illustration ==

TBD 

== Architecture ==

TBC

== Usage ==

TBD

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}