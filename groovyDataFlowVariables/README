== Intent ==

A [[Language:Groovy|Groovy]]-based implementation that uses [[data flow variables]]

== Languages ==

* [[Language:Groovy]] 

== Technologies ==

* [[Technology:Eclipse]] IDE (Version 3.7)
* [[Technology:Groovy-Eclipse]]  Eclipse plugin (Version 2.5.1)
* [[Technology:GPars]] Parallel computing framework (Version 0.12)
* [[Technology:JUnit]] Unit testing (Version 4.8.2)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Parallelism]]

== Motivation == 

[[Language:Groovy|Groovy]] is one of the most well-known [[JVM languages]]. 
One of its strength lies in the [[Technology:GPars|GPars]] [[Category:Framework|framework]], 
which offers many different approaches to [[parallel programming]]. An 
interesting concept is the [[concurrency]] based on [[data flow]]. The overall 
idea is the creation of a temporal order between processes, seeing the availability 
of certain values as [[constraints]]. This project demonstrates the usage of 
this [[data flow]] [[concurrency]] in [[Language:Groovy|Groovy]] using [[data flow variables]].

== Illustration ==

Queries like [[101feature:Total|Total]] depends on different values (e.g. 
the [[101feature:Total|total]] of each department). Because these subqueries 
are independent from each other they can be executed in parallel.

In general, all subcomputations are outsourced in a new [[thread]]. Therefore, 
these computations are encapsulated into [[Closure|closures]] and transfered 
to the ''task'' method. If such a [[thread]] needs a value of a [[data flow variables|data flow variable]], 
which is not bound (i.e. computed) yet, it is [[wait|suspended]] until its [[notify all|awoken]] 
by the system. For compact programing [[Technology:GPars|GPars]] offers a 
[[container]] like [[bean]], which properties are [[data flow variables]]. 
These variables are initialized [[Lazy Evaluation|lazily]] the first time they are accessed. 
An example for such a [[bean]] is ''totals''.

<nowiki>
// outsourcing total computation for each the department
for (i in 0..<depts.size) {
    Department d = depts.get i
    task {
    // adding dept's total as dataflow variable to the bean
        totals.putAt d.name, d.total()
    }
}
</nowiki>

== Architecture ==

* ''Company.groovy'' everything related to a company
* ''Department.groovy'' everything related to a department
* ''Employee.groovy'' everything related to an employee
* ''Basic.groovy'' basic functionality tests with a sample company

== Usage ==

You need to install the [[Technology:Eclipse|Eclipse]] plugin [[Technology:Groovy-Eclipse|Groovy-Eclipse]].
Update Site: [http://dist.springsource.org/release/GRECLIPSE/e3.7/]

Then open ''Basic.groovy'' and start the [[Technology:JUnit|JUnit]] test case you like.

== Contributors ==

* {{101contributor|Jan Baltzer|developer}}
