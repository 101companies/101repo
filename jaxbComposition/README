== Intent ==

[[O/X mapping]] with [[Technology:JAXB]]

== Languages ==

* [[Language:XML]]
* [[Language:XSD]]
* [[Language:Java]]

== Technologies ==

* [[Technology:JAXB]]
* [[Technology:xjc]] (part of JAXB)
* [[101profile:Java CLI]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

O/X mapping within the Java platform is exercised.
The primary data model for companies is an XML schema. The schema compiler
[[Technology:xjc]] of [[Technology:JAXB]] is used to generate Java classes
from the schema. In this manner, operations on an XML representation of
companies can be implemented in near-to-regular OO fashion while
using a problem-specific object model. 
In different terms, one can carry out [[:Category:XML processing]] while
essentially staying in the technical space of [[objectware]]. It is insightful
to compare XML schema and schema-derived classes. The XML
schema is defined in a manner that the resulting object model systematically
leverages [[object composition]] and no [[class inheritance]]. In fact, the
schema-derived classes are very similar to a regular OO design; see 
[[101implementation:javaComposition]]. It is important to note that 
the operations on companies are not implemented as [[:Category:instance method]]s
since this would imply modification of schema-derived classes---unless advanced 
modularization mechanisms were leveraged. Instead, the operations are implemented
as [[:Category:static method]]s in non-schema-derived classes.

== Illustration ==

The following XML schema fragment shows the element declaration for departments:

<syntaxhighlight lang="xml">
 <xs:element name="department">
  <xs:complexType>
   <xs:sequence>
    <xs:element ref="name"/>
    <xs:element name="manager" type="employee"/>
    <xs:element ref="department"
                maxOccurs="unbounded" minOccurs="0"/>
    <xs:element name="employee" type="employee"
                maxOccurs="unbounded" minOccurs="0"/>
   </xs:sequence>
  </xs:complexType>
 </xs:element>	
</syntaxhighlight>

That is, department elements line up children elements for name, manager, sub-departments,
and employees. There is an XSD type ''employee'' which is used in two local element
declarations: one for managers; another one for regular employees. The corresponding,
schema-derived class looks as follows:

<syntaxhighlight lang="java">
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "name",
    "manager",
    "department",
    "employee"
})
@XmlRootElement(name = "department")
public class Department {
    @XmlElement(required = true)
    protected String name;
    @XmlElement(required = true)
    protected Employee manager;
    protected List<Department> department;
    protected List<Employee> employee;
    // Getters and setters omitted
}
</syntaxhighlight>

This class essentially models [[POJO]]s for departments in a way similar to
regular OO programming. However, the schema compiler injects a number of annotations 
into the schema-derived classes so that sufficient information is tracked for serialization,
and, in fact, validation. For instance, the fields for name and manager are annotated with 
''required=true'', thereby expressing that a valid department object must specify a name
and manager. On top of the schema-derived classes, the operation ''cut'' is implemented
with [[:Category:static method]]s: 

<syntaxhighlight lang="java">
public class Cut {
  public static void cut(Company c) {
    for (Department d : c.getDepartment())
      cut(d);
  }
  public static void cut(Department d) {
    cut(d.getManager());
    for (Department s : d.getDepartment())
      cut(s);
    for (Employee e : d.getEmployee())
      cut(e);
  }
  public static void cut(Employee e) {
    e.setSalary(e.getSalary() / 2);
  }		
}
</syntaxhighlight>

== Architecture ==

''Company.xsd'' is the schema for [[schema-first mapping]].
''Makefile'' shows how to (trivially) invoke the schema compiler [[Technology:xjc]] 
of [[Technology:JAXB]]. Package ''org.softlang.company'' hosts all schema-derived
classes and interfaces. Package ''org.softlang.features'' hosts 
implementations for [[101feature:Total]] and [[101feature:Cut]] as well as
some boilerplate code for [[101feature:Serialization]]. Package ''org.softlang.tests''
hosts JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project.
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available in package ''org.softlang.tests''.
* If you want to regenerate classes from the scheme, see the ''Makefile''.

Hint: if you need to add schema files to a project so that XML files are 
automatically validated on the grounds of their namespace, as it is useful for
the schema Company.xsd, which is part of the present implementation, then 
you need to add the files via Eclipse preferences -> XML -> XML catalog.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}