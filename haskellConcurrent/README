== Intent ==

concurrent programming in [[Language:Haskell]]

== Languages ==

* [[Language:Haskell]]

== Technologies ==

* [[Technology:GHCi]]      

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Concurrency]]

== Motivation ==

We make use of [[Language:Haskell]]'s [[101feature:Concurrency|concurrency]] support. That is, we divide computations into multiple threads and make use of synchronized variables ([[MVar]]), which are shared among different threads. 
Each thread [[101feature:Total|totals]] or [[101feature:Cut|cuts]] only the salaries in a specified department; subdepartments are handled by new threads.
The result of the computations (float values resp. new company entities) are stored in a MVar and then collected and aggregated with other results by the "upper" thread. 

== Illustration ==

=== Conucrrent cutting ===

We create new threads using <syntaxhighlight lang="haskell" enclose="none">forkIO :: IO () -> IO ThreadId</syntaxhighlight> provided by Haskell's concurrency library <syntaxhighlight lang="haskell" enclose="none">Control.Concurrent</syntaxhighlight>. This function executes the given IO action in a new thread and returns a <syntaxhighlight lang="haskell" enclose="none">ThreadId</syntaxhighlight> value. On the top company level we do so for every department:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Cut.hs">
cutCompany :: Company -> IO Company
cutCompany (Company n depts) = do
    threads <- forM depts $ \d -> do
        mvar' <- newEmptyMVar
        forkIO $ cutDept mvar' d
        return mvar'
    cutDepts <- takeAllMVars threads
    return $ Company n cutDepts
</syntaxhighlight>

By making use of <syntaxhighlight lang="haskell" enclose="none">forM</syntaxhighlight> we start one thread per department and pass the cut function for departments to <syntaxhighlight lang="haskell" enclose="none">forkIO</syntaxhighlight>. We collect all <syntaxhighlight lang="haskell" enclose="none">ThreadId</syntaxhighlight> values in <syntaxhighlight lang="haskell" enclose="none">threads</syntaxhighlight> in line 3. In line 7 we wait for the results of the computations. The new company is returned in line 8. Analogous to this we cut departments:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Cut.hs">
cutDept :: MVar Department -> Department -> IO ()
cutDept mvar (Department n m dus eus) = do
    mvars <- forM dus $ \d -> do
        mvar' <- newEmptyMVar
        forkIO $ cutDept mvar' d
        return mvar'
    cutDus <- takeAllMVars mvars
    putMVar mvar $ Department n (cutEmployee m) 
                                (cutDus) 
                                (map cutEmployee eus)    
</syntaxhighlight>

The cutting of direct department employees is not performed in a new thread:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Cut.hs">
cutEmployee :: Employee -> Employee
cutEmployee (Employee name address salary) = Employee name address $ salary / 2
</syntaxhighlight>

=== Collecting results ===

Both functions <syntaxhighlight lang="haskell" enclose="none">cutCompany</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">cutDept</syntaxhighlight> need to wait for the child-threads to terminate. To do so we provide a function <syntaxhighlight lang="haskell" enclose="none">takeAllMVars</syntaxhighlight> in the in [this!!Utils.hs]:

<syntaxhighlight lang="haskell" source="haskellConcurrent/Utils.hs">
takeAllMVars ::  [MVar a] -> IO [a]
takeAllMVars = mapM takeMVar
</syntaxhighlight> 

This function takes all <syntaxhighlight lang="haskell" enclose="none">MVar</syntaxhighlight> values one by one blocking on every empty MVar.

== Architecture ==

[this!!Total.hs] and [this!!Cut.hs] provide functionality for totaling and cutting salaries in a concurrent way. 
[this!!Utils.hs] contains a function to collect content of a list of <syntaxhighlight lang="haskell" enclose="none">MVar</syntaxhighlight> values.
The algebraic datatype for companies can be found in [this!!Company.hs]. 
[this!!Main.hs] collects test scenarios for totaling and cutting a sample company hosted by [this!!SampleCompany.hs].

== Usage ==

* [this!!Main.hs] has to be loaded into GHCi. 
* The <syntaxhighlight lang="haskell" enclose="none">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Issues ==

* The current implementation does not address the problem of a possibly unbalanced department tree.
* The collection function for MVars blocks on every empty element. We may need a more sophisticated collection function.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}