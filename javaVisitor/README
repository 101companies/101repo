== Intent ==

visitor programming in [[Language:Java]]

== Languages ==

* [[Language:Java]] (Version 5)

== Technologies ==

* [[101profile:Simple Java]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

The present  implementation can be viewed as a variation on [[101implementation:javaComposition]]. 
The [[Visitor pattern]] is applied to implement operations modularly. 
To this end, two visitor interfaces are defined: one for ''void'' visitors (that
do not return any values), another one for ''returning'' visitors (with a designated
type parameter for the result type). Indeed, [[101feature:Total]] calls
for a returning visitor whereas [[101feature:Cut]] can be expressed as
a void visitor---if an [[impure computation]] is assumed.

== Illustration ==

The interface for void visitors looks as follows:

<syntaxhighlight lang="java">
public interface VoidVisitor {
	void visit(Company o);
	void visit(Department o);
	void visit(Employee o);		
}
</syntaxhighlight>

For comparison, here is the interface for returning visitors:

<syntaxhighlight lang="java">
public interface ReturningVisitor<R> {
	R visit(Company o);
	R visit(Department o);
	R visit(Employee o);
}
</syntaxhighlight>

The classes of the object model for companies do not implement
any operations of the [[101companies:System]], but instead they
are able to apply a given visitor to an object. For example:

<syntaxhighlight lang="java">
public class Department implements Serializable {

	// fields, getters, and setters omited

	public void accept(VoidVisitor v) { v.visit(this); }
	public <R> R accept(ReturningVisitor<R> v) { return v.visit(this); }
}
</syntaxhighlight>

Here is the implementation of ''cut'' as a void visitor:

<syntaxhighlight lang="java">
public class Cut implements VoidVisitor {

	public void visit(Company o) {
		for (Department d : o.getDepts())
			d.accept(this);
	}	
	public void visit(Department o) {
		o.getManager().accept(this);
		for (Department s : o.getSubdepts())
			s.accept(this);
		for (Employee e : o.getEmployees())
			e.accept(this);
	}
	public void visit(Employee o) {
		o.setSalary(o.getSalary() / 2.0d);		
	}	
}
</syntaxhighlight>

== Architecture ==

Package ''org.softlang.company'' hosts the object model for [[101feature:Company]]
and the general interfaces for void and returning visitors on companies, departments,
and employees. Package ''org.softlang.features'' hosts implementations of the basic 
operations [[101feature:Total]] and [[101feature:Cut]] as well as some boilerplate
code for [[101feature:Serialization]]. Package ''org.softlang.tests'' hosts JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project. 
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available in the package ''org.softlang.tests''.
** Run class ''Basics'' with JUnit to exercise basic features.

The sample data is retrieved from the file ''sampleCompany.ser''.

The latter file was saved with [[101implementation:javaComposition]].

== Contributors ==

* {{101contributor|Ralf LÃ¤mmel|developer}}