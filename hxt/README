== Intent ==

tree-based XML processing with [[Technology:HXT]] in [[Language:Haskell]]

== Languages ==

* [[Language:XML]]
* [[Language:Haskell]]

== Technologies ==

* [[Technology:HXT]]: Haskell XML Toolbox
* [[Technology:GHCi]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

[[101feature:Company|Companies]] are represented in [[Language:XML]] and the [[Technology:HXT|Haskell XML Toolbox]] is used for processing such company-xml-data.
That is, we use a rich combinator library to formulate a query for [[101feature:Total|totaling]] and a transformation for [[101feature:Cut|cutting]] salaries in a given company-xml-tree.
The concept of [[Arrow|arrows]] is also heavily demonstrated in this implementation, because the combinator library is based on this concept. That is we exercise:
* Using arrow combinators such as ''>>>'' and ''`when`''.
* Lifing ordinary functions into the arrow space using ''arr''.
* Using ''Control.Arrow.ArrowList'''s ''listA'' for collecting all arrow results in a list.
* Running these arrows with IO, say switching between arrows and the IO [[monad|Monad]] space (See the illustration section).


== Illustration ==

In the following we will demonstrate the construction of the arrow for [[101feature:Total|totaling]] and how one can run this arrow in IO.
The code can be found in [this!!Total.hs] respectively [this!!Main.hs]

=== Total ===

First we want to get all salary nodes:

<syntaxhighlight lang="haskell">deep $ hasName "salary" :: ArrowXml a => a XmlTree XmlTree</syntaxhighlight> 

This is an arrow from XmlTree to XmlTree, say a '''filter''' for all salary nodes. In general ''deep'' only works for non-nested results, but because of the fact that we are dealing with text nodes, which can not be nested, this is ok.

The result of this node is then combined with <syntaxhighlight lang="haskell" enclose="none">getChildren >>> getText</syntaxhighlight> by using <syntaxhighlight lang="haskell"  enclose="none">>>></syntaxhighlight>. 

This gives us the text of each salary node. So the combination has the type: <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a XmlTree String</syntaxhighlight> 

We then use ''Control.Arrow.ArrowList'''s <syntaxhighlight lang="haskell" enclose="none">listA</syntaxhighlight> to collect all results from this arrow in an array, giving us a new arrow of type: <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a XmlTree [String]</syntaxhighlight> 

The result of this arrow is then passed to the lifted version of <syntaxhighlight lang="haskell" enclose="none">(sum.(map read)) :: (Read c, Num c) => [String] -> c</syntaxhighlight>, which in this case is of type: <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a [String] Float</syntaxhighlight>.

The overall emerging arrow, giving us the total salary, is of type <syntaxhighlight lang="haskell" enclose="none">ArrowXml a => a XmlTree Float</syntaxhighlight> :

<syntaxhighlight lang="haskell">
total :: ArrowXml a => a XmlTree Float
total = listA (deep $ hasName "salary"
               >>> 
               getChildren  
               >>> 
               getText)     
        >>>
        arr (sum.(map read)) 
</syntaxhighlight>

=== Running an arrow ===

For running an arrow in IO <syntaxhighlight lang="haskell" enclose="none">runX :: IOSArrow XmlTree c -> IO [c]</syntaxhighlight>can be used.
The function returns all arrow results. 

When we combinate the arrow for reading a sample company from a XML file with the total arrow we get:
<syntaxhighlight lang="haskell" enclose="none">readDocument [] "sampleCompany.xml" >>> total</syntaxhighlight>

Executing this arrow with runX returns a list of float values:

<syntaxhighlight lang="haskell">[ttl] <- runX (readDocument [] "sampleCompany.xml" >>> total)</syntaxhighlight>

<syntaxhighlight lang="haskell" enclose="none">ttl</syntaxhighlight> holds total salary in the sample company.

== Architecture ==

[this!!Total.hs] holds the arrow for [[101feature:Total|totaling]] salaries as described in the illustration section. 

[this!!Cut.hs] contains a transformation arrow for [[101feature:Cut|cutting]] salaries.

The ''main'' module (in [this!!Main.hs]) collects test scenarios for totaling and cutting the xml data provided by [this!!sampleCompany.xml]

== Usage ==

The Haskell module ''Main'' has to be consulted with GHCi, and the
''main'' function has to be applied so that output for the test
scenarios is produced. The ''expected'' output is available through
the file ''baseline''. There is a ''Makefile'' with a target ''test''
for [[test automation]].
Use the taget ''clean'' to "reset" the project.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}