== Intent ==

[[Web programming]] with [[Technology:Happstack]] in [[Language:Haskell]] 

== Languages ==

* [[Language:Haskell]]
* [[Language:JavaScript]]
* [[Language:XHTML]]
* [[Language:CSS]]

== Technologies ==

* [[Technology:GHC]]
* [[Technology:Happstack]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]
* [[101feature:Distribution]]
* [[101feature:Validation]]

== Motivation ==

This implementation provides a small client/server [[Web Application|web application]] written with the help of the [[Technology:Happstack]] [[Framework|framework]]. That is, we exercice the use of [[Routing filter| routing filters]] to filter requests by action. A user can either view a specific part of a [[101feature:Company|company]], [[101feature:Cut|cut]] a specific part or save a company component after manipulation of primitive fields.
The company is stored in a client-sided [[Cookie|cookie]].
The part to be viewed,cut or saved is specified by making use if the [[Zipper|zipper]] concept. That is, the [[URL]] contains a company focus (see illustration section). 
We also demonstrate [[101feature:Validation|validation]]. When processing a save-request, sent by an HTML-form, the server applies various validators to eventuelly return error messages, which will be displayed to the user in the [[Browser|browser]].

As an response the client receives HTML-documents, composed by making use of the [[Heist]] HTML-templating engine.

== Illustration ==

In the following we will demonstate how a specific request is processed by the server:


After requesting to view an employee the user manipulated the input fields and submits a request by clicking a save button.

The browser sends an HTTP-request together with a company-cookie to the server. The URL looks like this:

'''<nowiki>http://localhost:8000/Employee/Save/ManagerFocus%20[0]/?Name=Erik&Address=Utrecht&Salary=1234.0</nowiki>'''

The ''Main'' module (in [this!!Main.hs]) contains:

<syntaxhighlight lang="haskell">
main = simpleHTTP nullConf $ msum [ path $ \v -> path $ \a -> path $ \f -> mainPart a v f
                                  , serveDirectory EnableBrowsing [] "static"]   
</syntaxhighlight>

That is by making use of Happstack's <syntaxhighlight lang="haskell" enclose="none">path</syntaxhighlight> function we extract:

* The kind of component to display
* The action
* The focus 

In case the extraction fails the server falls back to being a file server.











== Architecture ==

TBD

== Usage ==

* The Haskell module ''Main'' has to compiled with GHC. 
* Run the executable. 
Alternatively just run the module ''Main'' using ''runhaskell''. 
There is a ''Makefile'' with a target ''run'' to do this.
* Open [http://localhost:8000/Company/View/CompanyFocus http://localhost:8000/Company/View/CompanyFocus] to demo, starting with the root view.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}