== Intent ==

a simple implementation in [[Language:CSharp|C#]] for the [[Technology:.NET]] Framework

== Languages ==

* [[Language:CSharp]] (C#): Programming language used for all code (Version 4.0)

== Technologies ==

* [[Technology:csc.exe]]: C# compiler (Version 4.0)
* [[Technology:.NET]]: framework used to execute compiled code (Version 4.0)
* [[Technology:NUnit]]: unit testing framework used for testing (Version 2.5)
* [[Technology:Visual Studio]]: optional IDE (Version 2010)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Depth]]
* [[101feature:Serialization]]

== Motivation == 

Basic style of [[OO programming]] is exercised. The C# type system is
used to create an in-memory representation, in fact, an [[object
model]] for companies, departments, and employees. There is also an
extra base class for persons from which employees are derived, thereby
illustrating [[class inheritance]]. Operations on companies are
implemented as [[Category:instance method]]s. XML-based
[[:Category:serialization]] is immediately available for all public
[[Technology:.NET]] classes. Arguably, the generic [[O/X mapping]]
used for serialization produces XML that is not platform independent
so that [[open serialization]] is supported.

== Architecture ==

C# object-oriented representation of 101companies model is located in
the ''CompanyModel folder''. It contains classes with required
properties and methods (features implementations).

''Tests'' folder contains:
* ''FeaturesTest'' class which covers test cases for the features: [[:101feature:Total|Total]], [[:101feature:Cut|Cut]], [[:101feature:Depth|Depth]].
* ''SerializationTests'' class which covers test cases for [[serialization]]/de-serialization.

Also helpers for building in-memory model for meganalysis company and
serialization are implemented.

== Usage ==

[[Technology:Visual Studio]] 2010 should be used to open a project
file. The project itself is a class-library and compiles into a
DLL. To run a project you must execute at least one unit test (or all
at once). The Nunit GUI could be used for executing the unit tests
conveniently.

== Contributors ==

* {{101contributor|Andrei Varanovich|developer}}
