== Intent == 

A simple C/S [[Web Application|WebApp]] for companies

== Languages ==

* [[Language:Java]]
* [[Language:Javascript]]
* [[Language:HTML]]
* [[Language:XML]]
* [[Language:CSS]]

== Technologies ==

* [[Technology:GWT]]: Google Web Toolkit SDK
* [[Technology:javac]]: Java compiler (Version 1.6)
* [[Technology:JDK]]: provider of javac et al.
* [[Technology:JSE]]: execution platform (Version 1.6)
* [[Technology:Eclipse]]: optional IDE (Version 3.6.2)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Interaction]]
* [[101feature:Distribution]]

== Motivation ==

The present project provides a simple [[Web Application|WebApp]] for companies by making use of the [[Technology:GWT| Google Web Toolkit]] and therefore [[Technology:Ajax]]. 
Via [[asynchronous communication]] the server provides functionality for cutting and totaling salaries.
The server allows the client to retrieve instances of [[Serialization|serializable]] classes of the company's [[object model]].
The client presents the provided functionality and retrieved data via predefined [[GUI]] components.
 
== Architecture ==

'''Client''': 
Client classes are to be found in the client package. See ''org.softlang.client''.
There is the GUI and a special [[101feature:Company]] object model for the client with classes that support [[101feature:Serialization]]. See ''org.softlang.client.company'' for the latter.
This object model holds "shallow" data for the widgets. The entry point for the client is the ''Gwt.java'' class.
Here we describe the app's client side appearance and functionality.

'''Server''': 
Server classes are to be found in the server package. See ''org.softlang.server''. 
We use an object model for [[101feature:Company]] very much like in project [[101implementation:java]]
(We use a cloned object model for the sake of a simple build for this GWT project.)
The server maintains an index (see class Index.java) between shallow and proper objects.
That is, departments and employees are identifiable by their ids (say, names).
 
The communication between client and server is modeled by the ''Service'' interface. See the client package.
There is also the asynchronous version of it: ''ServiceAsync.java''. 
These services allow the client to load and save data and perform scenarios [[101feature:Total]] and [[101feature:Cut]]. 

== Usage ==

* To run a demo:
** compile ''org.softlang.client.Gwt'' (click the red GWT icon).
** run ''org.softlang.server.ServiceImpl''.
** open http://localhost:8888 in your browser.
* The server runs until is terminated explicitly in the eclipse console.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|reviewer}}
Foo.