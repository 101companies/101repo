== Intent ==

a simple implementation in [[Language:Java]]

== Languages ==

* [[Language:Java]]

== Technologies ==

* [[101profile:Simple Java]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

Basic style of [[OO programming]] is applied. A simple [[object model]]
for companies is provided with [[method]]s to implement a [[query]] for
totaling salaries and a [[:Category:transformation]] for cutting salaries.
In fact, [[class inheritance]] is leveraged, but see [[101implementation:java]] 
for a variation that uses [[object composition]]. Because of the use of class
inheritance, the aforementioned methods are actual [[Virtual method|virtual]].
Basic [[serialization]] in the sense of [[Technology:Object Streams]] 
is enabled by means of the [[Marker interface pattern|marker interface]]
''Serializable'', which is applied to the [[:Category:class]]es of the object model 
for companies.

== Architecture ==

Package ''org.softlang.basics'' hosts the object model for [[101feature:Company]] 
with the virtual methods for [[101feature:Total]] and [[101feature:Cut]]. Some 
boilerplate code for [[101feature:Serialization]] is implemented in the class 
''org.softlang.basics.Company'' (see methods ''readObject'' and ''writeObject'').
Package ''org.softlang.tests'' hosts JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project.
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available as the package ''org.softlang.tests''.
** Run class ''Basics'' with JUnit to exercise basic features.
** Run class ''Serialization'' with JUnit to exercise serialization.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Betim Sojeva|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}