== Intent ==

parse companies with parser combinators in Java 

== Languages ==

* [[Language:Java]]

== Technologies ==

* [[101profile:Simple Java]]

== Features == 

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Parsing]]

== Motivation ==

By using functor objects systematically, we can define a combinator
library for (top-down) parsing. In fact, two scenarios are supported:
plain acceptance versus proper parsing into an intermediate representation.
There are acceptor and parser combinators for all common EBNF
constructs as well as building blocks for lexical analysis. 
The parser for [[101companies:System]] actually implements 
[[101feature:Total]]. That is, salaries are totaled as the company
is parsed.

== Architecture ==

* Folder ''input'' hosts valid and invalid input files for the companies acceptor/parser.
* Package ''javaf.prelude'' hosts basic functor types for functional OO programming.
* Package ''parseLib.acceptor'' hosts combinators for acceptors.
* Package ''parseLib.parser'' hosts combinators for parsers.
* Package ''parseLib.util'' hosts general utilities.
* Package ''org.softlang.parser'' hosts lexer, acceptor, and parser for companies.
* There are also two ''...tests'' packages with JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project. 
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available in the following packages:
** Package ''org.softlang.tests'' tests the companies acceptor and parser.
** Package ''parseLib.tests'' tests the combinator library in some basic way.

== Issues ==

Class ''Input'' of package ''parseLib.util'' should be replaced by 
some class of the framework.

== Contributors ==

* {{101contributor|Ralf LÃ¤mmel|developer}}
