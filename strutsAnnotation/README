== Intent ==

implement a web application with Struts

== Languages ==

* [[Language:Java]]
* [[Language:JavaServerPages]]

== Features == 

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation == 

This is a simple web implementation of the basic 101companies-features using  
Struts2 (annotations) and Serialization as persistence mechanism. 
It provides server-side storage for the data using serialization.

== Illustration == 

The company data is stored in a serialization file. To obtain the stored data, we implemented 
a few services (methods) in the CompanyService class, which is a singleton.

<syntaxhighlight lang="java">
public class CompanySerivce { 
 ...
 private static CompanyService instance;
 
 public static CompanyService instance() {
   if(instance == null) {
     instance = new CompanyService();
   }
   return instance;
 }
	
 public List<Company> listAllCompanies() {
   if(companies == null || companies.size() == 0) {
     companies = new ArrayList<Company>();
	 Company company = Company.readObject("sampleCompany.ser");
	 companies.add(company);
	}
	return companies;
 }
 ...
}
</syntaxhighlight>

Services in this class implement access methods to the company data. 

Based on the struts2 architecture, the controller layer is implemented 
by Java classes (action classes) with special annotations; whereas the view layer might be implemented using 
Java Server Pages (JSPs) or other template languages such as Velocity. Here, 
we use JSPs to implement the view layer. For instance, consider an action class 
that deals with all requests related to departments (requests such as detailing departments 
or cutting department salaries)

<syntaxhighlight lang="java">
public class DepartmentAction {

	private Department department;
	private String message;
	
	
	@Action(value = "department.detail", 
			results = {@Result(name = "detail", location="department-detail.jsp")}
	)
	public String execute() {
		//the next assignment exposes the department 
		//member as a "bean", so that the forwarded view (a JSP) 
		//component is able to access its value. 
		department = CompanyService.instance().findDepartment(Long.parseLong(RequestUtil.getRequestParameter("dptId")));
		return "detail";
	}
	
	@Action(value = "department.cutSalariesOfDepartment", 
			results = {@Result(name = "detail", location="department-detail.jsp")}
	)
	public String cutSalariesOfSubunit() throws Exception {	
		department = CompanyService.instance().findDepartment(department.getId());
		department.cut();
		return "detail";
	}
	...
</syntaxhighlight> 	

Besides methods with the @Action annotation, the Department class looks like 
a conventional Plain Old Java Object. The @Action annotation is used to expose 
a class as an Struts Action, which might be later referred to by view components. 
In addition, each @Action is parameterized according to a value, which 
might be associated to a request; and a map of possible results, which relates 
the return value of an action method to the next view whose request 
will be redirected. Within JSPs, we could refer to actions as well 
as to properties of an Action class, as we show in 
the next listing. 

<syntaxhighlight lang="html4strict">
...
<s:form action="department.update" >
...
<s:textfield label="Name" value="%{department.name}"  name="department.name" /> 
<s:textfield label="Manager" value="%{department.manager.name}" name="department.manager.name" /> 
<s:textfield label="Manager salary" value="%{department.manager.salary}" name="department.manager.salary" /> 
...

<s:submit label="Cut" value="Cut" action="department.cutSalariesOfDepartment"  />
</s:form>
</syntaxhighlight>


    

  
== Usage ==
	
=== Requirements ===
	
	        Any web server based on Servlet technology, such as Tomcat.
	        
=== Build === 

	        (a) run "mvn clean package" in the root directory of the Struts 2 implementation of 101companies
	        (b) copy target/struts2app.war to the webs app of your web server

=== Accessing the system ===
	
	        (a) start the web server
	        
	        (b) start a web browser and inform the URL http://localhost:8080/struts2app, if the web server is configured to accept requests on the 8080 port   

== Contributors ==
	   
* {{101contributor|Rodrigo Bonifacio|developer}}
 
