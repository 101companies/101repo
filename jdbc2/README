== Intent ==

Database programming with [[Technology:JDBC]]

== Languages ==

* [[Language:SQL]]
* [[Language:Java]]

== Technologies ==

* [[Technology:JDBC]]
* [[Technology:MySQL]]
* [[101profile:Simple Java]]

== Description ==

This is a sophistication of [[101implementation:jdbc]]. We experiment with a naive O/R mapping for companies.
We exercise some company scenarios with the resulting object model. In the implementation of the O/R mapping, we use JDBC.

== Architecture ==

The package ''org.softlang.company'' contains the object model.
The ''ObjectFactory'' in ''org.softlang.util'' is used to retrieve objects from the database.
The PersistenceTool writes objects back to the database.
Some minimal effort is made to only commit *changes* to the database.
The tests package ''org.softlang.tests'' contains test cases.

Prerequisites (very much like in project "jdbc"):

== Usage ==

* You will need a suitable JDBC Driver for MySQL
**  An appropriate driver is available here: http://dev.mysql.com/downloads/connector/j/
**  Add the JAR that comes with the download to the build path of this project.
* Set up a company database.
** Follow the steps described here [[101implementation:mySql]] to set up the company database. That is, stop after populating the tables. 
* There are JUnit tests available as the package ''org.softlang.tests''.
** Run class ''Basics'' with JUnit to exercise basic features.
** Run class ''Persistence'' with JUnit to exercise O/R mapping / persistence.
  
== Issues == 

* The id after insertion should be determined in a more robust manner.
* Lazy load is triggered upon testing collection items for changes.
* Perhaps ObjectFactory and PersistenceTool could be merged into one class.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|reviewer}}