/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.oneoonecompanies.schema.impl.std;

import de.uni_koblenz.jgralab.impl.IncidenceIterable;

import de.uni_koblenz.jgralab.impl.std.VertexImpl;

import de.uni_koblenz.jgralab.Edge;
import de.uni_koblenz.jgralab.EdgeDirection;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.NoSuchAttributeException;

import de.uni_koblenz.jgralab.schema.impl.DirectedM1EdgeClass;

import java.io.IOException;
import java.util.HashSet;
import java.util.Set;

public class CompanyImpl extends VertexImpl implements de.uni_koblenz.oneoonecompanies.schema.Company, de.uni_koblenz.oneoonecompanies.schema.NamedElement {

	protected java.lang.String _name;

	public CompanyImpl(int id, de.uni_koblenz.jgralab.Graph g) {
		super(id, g);
	}

	public final de.uni_koblenz.jgralab.schema.AttributedElementClass getAttributedElementClass() {
		return de.uni_koblenz.oneoonecompanies.schema.OneOOneSchema.instance().vc_Company;
	}

	public final java.lang.Class<? extends de.uni_koblenz.jgralab.AttributedElement> getM1Class() {
		return de.uni_koblenz.oneoonecompanies.schema.Company.class;
	}

	public Object getAttribute(String attributeName) {
		if (attributeName.equals("name")) return get_name();
		throw new NoSuchAttributeException("Company doesn't contain an attribute " + attributeName);
	}

	public void setAttribute(String attributeName, Object data) {
		if (attributeName.equals("name")) {
			set_name((java.lang.String) data);
			return;
		}
		throw new NoSuchAttributeException("Company doesn't contain an attribute " + attributeName);
	}

	public java.lang.String get_name() {
		return _name;
	}

	public void set_name(java.lang.String _name) {
		this._name = _name;
		graphModified();
	}

	public void readAttributeValues(GraphIO io) throws GraphIOException {
		_name = io.matchUtfString();
		set_name(_name);
	}

	public void readAttributeValueFromString(String attributeName, String value) throws GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringReader(value, getSchema());
			_name = io.matchUtfString();
			set_name(_name);
			return;
		}
		throw new NoSuchAttributeException("Company doesn't contain an attribute " + attributeName);
	}

	public void writeAttributeValues(GraphIO io) throws GraphIOException, IOException {
		io.space();
		io.writeUtfString(_name);
	}

	public String writeAttributeValueToString(String attributeName) throws IOException, GraphIOException {
		if (attributeName.equals("name")) {
			GraphIO io = GraphIO.createStringWriter(getSchema());
			io.writeUtfString(_name);
			return io.getStringWriterResult();
		}
		throw new NoSuchAttributeException("Company doesn't contain an attribute " + attributeName);
	}

	/* add all valid from edges */
	private static Set<java.lang.Class<? extends Edge>> validFromEdges = new HashSet<java.lang.Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidAlpha()
	 */
	@Override
	public boolean isValidAlpha(Edge edge) {
		return validFromEdges.contains(edge.getM1Class());
	}
	
	{

		validFromEdges.add(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class);

	}
	
	/* add all valid to edges */
	private static Set<java.lang.Class<? extends Edge>> validToEdges = new HashSet<java.lang.Class<? extends Edge>>();
	
	/* (non-Javadoc)
	 * @see jgralab.Vertex:isValidOemga()
	 */
	@Override
	public boolean isValidOmega(Edge edge) {
		return validToEdges.contains(edge.getM1Class());
	}
	
	{

	}

	@Override
	public de.uni_koblenz.oneoonecompanies.schema.Company getNextCompany() {
		return (de.uni_koblenz.oneoonecompanies.schema.Company)getNextVertex(de.uni_koblenz.oneoonecompanies.schema.Company.class);
	}

	@Override
	public de.uni_koblenz.oneoonecompanies.schema.NamedElement getNextNamedElement() {
		return (de.uni_koblenz.oneoonecompanies.schema.NamedElement)getNextVertex(de.uni_koblenz.oneoonecompanies.schema.NamedElement.class);
	}

	@Override
	public de.uni_koblenz.oneoonecompanies.schema.HasDepartment getFirstHasDepartmentIncidence() {
		return (de.uni_koblenz.oneoonecompanies.schema.HasDepartment)getFirstIncidence(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class);
	}

	@Override
	public de.uni_koblenz.oneoonecompanies.schema.HasDepartment getFirstHasDepartmentIncidence(EdgeDirection orientation) {
		return (de.uni_koblenz.oneoonecompanies.schema.HasDepartment)getFirstIncidence(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, orientation);
	}
		@Override
		public de.uni_koblenz.oneoonecompanies.schema.HasDepartment add_departments(de.uni_koblenz.oneoonecompanies.schema.Department vertex) {
			return ((de.uni_koblenz.oneoonecompanies.schema.CompaniesGraph)getGraph()).createEdge(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, (de.uni_koblenz.oneoonecompanies.schema.Company) this, (de.uni_koblenz.oneoonecompanies.schema.Department) vertex);
		}
		@Override
		public java.util.List<? extends de.uni_koblenz.oneoonecompanies.schema.Department> remove_departments() {
			java.util.List<de.uni_koblenz.oneoonecompanies.schema.Department> adjacences = new java.util.ArrayList<de.uni_koblenz.oneoonecompanies.schema.Department>();
			de.uni_koblenz.oneoonecompanies.schema.HasDepartment edge = (de.uni_koblenz.oneoonecompanies.schema.HasDepartment) getFirstIncidence(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.oneoonecompanies.schema.HasDepartment next = (de.uni_koblenz.oneoonecompanies.schema.HasDepartment) edge.getNextIncidence(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, EdgeDirection.OUT);
				adjacences.add((de.uni_koblenz.oneoonecompanies.schema.Department) edge.getThat());
				edge.delete();
				edge = next;
			}
			return adjacences;
		}
		@Override
		public boolean remove_departments(de.uni_koblenz.oneoonecompanies.schema.Department vertex) {
			boolean elementRemoved = false;
			de.uni_koblenz.oneoonecompanies.schema.HasDepartment edge = (de.uni_koblenz.oneoonecompanies.schema.HasDepartment) getFirstIncidence(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, EdgeDirection.OUT);
			while (edge != null) {
				de.uni_koblenz.oneoonecompanies.schema.HasDepartment next = (de.uni_koblenz.oneoonecompanies.schema.HasDepartment) edge.getNextIncidence(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, EdgeDirection.OUT);
				if (edge.getThat().equals(vertex)) {			edge.delete();
					elementRemoved = true;
				}
				edge = next;
			}
			return elementRemoved;
		}
		@Override
		public Iterable<? extends de.uni_koblenz.oneoonecompanies.schema.Department> get_departments() {
			return new de.uni_koblenz.jgralab.impl.NeighbourIterable<de.uni_koblenz.oneoonecompanies.schema.HasDepartment, de.uni_koblenz.oneoonecompanies.schema.Department>(this, de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, EdgeDirection.OUT);
		}

	@Override
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasDepartment> getHasDepartmentIncidences() {
		return new IncidenceIterable<de.uni_koblenz.oneoonecompanies.schema.HasDepartment>(this, de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class);
	}
	
	
	@Override
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasDepartment> getHasDepartmentIncidences(EdgeDirection direction) {
		return new IncidenceIterable<de.uni_koblenz.oneoonecompanies.schema.HasDepartment>(this, de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, direction);
	}

	private static java.util.Map<String, DirectedM1EdgeClass> roleMap;

	static {
	roleMap = new java.util.HashMap<String, DirectedM1EdgeClass>();

	roleMap.put("departments", new DirectedM1EdgeClass(de.uni_koblenz.oneoonecompanies.schema.HasDepartment.class, de.uni_koblenz.jgralab.EdgeDirection.OUT));

	}

	public DirectedM1EdgeClass getEdgeForRolename(String rolename) {
		return roleMap.get(rolename);
	}
}
