/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.oneoonecompanies.schema;

public interface Manager extends de.uni_koblenz.oneoonecompanies.schema.Person {

	/**
	 * @return the next de.uni_koblenz.oneoonecompanies.schema.Manager vertex in the global vertex sequence
	 */
	public de.uni_koblenz.oneoonecompanies.schema.Manager getNextManager();

	/**
	 * @return the next de.uni_koblenz.oneoonecompanies.schema.NamedElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.oneoonecompanies.schema.NamedElement getNextNamedElement();

	/**
	 * @return the next de.uni_koblenz.oneoonecompanies.schema.Person vertex in the global vertex sequence
	 */
	public de.uni_koblenz.oneoonecompanies.schema.Person getNextPerson();
		/**
		 * adds the given vertex as <code>department</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.oneoonecompanies.schema.HasEmployee add_department(de.uni_koblenz.oneoonecompanies.schema.Department vertex);
		/**
		 * removes all department adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.oneoonecompanies.schema.Department> remove_department();
		/**
		 * removes the given vertex as <code>department</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_department(de.uni_koblenz.oneoonecompanies.schema.Department vertex);
		/**
		 * @return the vertex to this one with the rolename 'department' 
		 *         (connected with a <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.oneoonecompanies.schema.Department get_department();
		/**
		 * adds the given vertex as <code>mentee</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.oneoonecompanies.schema.Mentors</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.oneoonecompanies.schema.Mentors</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.oneoonecompanies.schema.Mentors add_mentee(de.uni_koblenz.oneoonecompanies.schema.Employee vertex);
		/**
		 * removes all mentee adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.oneoonecompanies.schema.Mentors</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.oneoonecompanies.schema.Employee> remove_mentee();
		/**
		 * removes the given vertex as <code>mentee</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.oneoonecompanies.schema.Mentors</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_mentee(de.uni_koblenz.oneoonecompanies.schema.Employee vertex);
		/**
		 * @return the vertex to this one with the rolename 'mentee' 
		 *         (connected with a <code>de.uni_koblenz.oneoonecompanies.schema.Mentors</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.oneoonecompanies.schema.Employee get_mentee();
}
