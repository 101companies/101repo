/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.oneoonecompanies.schema;

import de.uni_koblenz.jgralab.EdgeDirection;

public interface Department extends de.uni_koblenz.oneoonecompanies.schema.NamedElement {

	/**
	 * @return the next de.uni_koblenz.oneoonecompanies.schema.Department vertex in the global vertex sequence
	 */
	public de.uni_koblenz.oneoonecompanies.schema.Department getNextDepartment();

	/**
	 * @return the next de.uni_koblenz.oneoonecompanies.schema.NamedElement vertex in the global vertex sequence
	 */
	public de.uni_koblenz.oneoonecompanies.schema.NamedElement getNextNamedElement();

	/**
	 * @return the first edge of class HasDepartment at this vertex
	 */
	public de.uni_koblenz.oneoonecompanies.schema.HasDepartment getFirstHasDepartmentIncidence();

	/**
	 * @return the first edge of class HasDepartment at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.oneoonecompanies.schema.HasDepartment getFirstHasDepartmentIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasEmployee at this vertex
	 */
	public de.uni_koblenz.oneoonecompanies.schema.HasEmployee getFirstHasEmployeeIncidence();

	/**
	 * @return the first edge of class HasEmployee at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.oneoonecompanies.schema.HasEmployee getFirstHasEmployeeIncidence(EdgeDirection orientation);

	/**
	 * @return the first edge of class HasSubDepartment at this vertex
	 */
	public de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment getFirstHasSubDepartmentIncidence();

	/**
	 * @return the first edge of class HasSubDepartment at this vertex
	 * @param orientation the orientation of the edge
	 */
	public de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment getFirstHasSubDepartmentIncidence(EdgeDirection orientation);
		/**
		 * adds the given vertex as <code>parentDept</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment add_parentDept(de.uni_koblenz.oneoonecompanies.schema.Department vertex);
		/**
		 * removes all parentDept adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.oneoonecompanies.schema.Department> remove_parentDept();
		/**
		 * removes the given vertex as <code>parentDept</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_parentDept(de.uni_koblenz.oneoonecompanies.schema.Department vertex);
		/**
		 * @return the vertex to this one with the rolename 'parentDept' 
		 *         (connected with a <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edge), or null if no such vertex exists
		 */
		public de.uni_koblenz.oneoonecompanies.schema.Department get_parentDept();
		/**
		 * adds the given vertex as <code>persons</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.oneoonecompanies.schema.HasEmployee add_persons(de.uni_koblenz.oneoonecompanies.schema.Person vertex);
		/**
		 * removes all persons adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.oneoonecompanies.schema.Person> remove_persons();
		/**
		 * removes the given vertex as <code>persons</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_persons(de.uni_koblenz.oneoonecompanies.schema.Person vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'persons'
		 *         (connected with a <code>de.uni_koblenz.oneoonecompanies.schema.HasEmployee</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.oneoonecompanies.schema.Person> get_persons();
		/**
		 * adds the given vertex as <code>subDepts</code> to this vertex, i.e. creates an
		 * <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edge from this vertex to the given 
		 * one and returns the created edge.
		 * @return  a newly created edge of type <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code>
		 *          between this vertex and the given one.
		 */
		public de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment add_subDepts(de.uni_koblenz.oneoonecompanies.schema.Department vertex);
		/**
		 * removes all subDepts adjacences to all vertices by 
		 * deleting the <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edges of this vertex to 
		 * all other ones, but doesn't delete those vertices.
		 *
		 * @return the adjacent vertices prior to removal of incidences
		 */
		public java.util.List<? extends de.uni_koblenz.oneoonecompanies.schema.Department> remove_subDepts();
		/**
		 * removes the given vertex as <code>subDepts</code> from this vertex, i.e. 
		 * deletes the <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edge connections of this vertex with 
		 * the given one.
		 */
		public boolean remove_subDepts(de.uni_koblenz.oneoonecompanies.schema.Department vertex);
		/**
		 * @return an Iterable of all vertices adjacent to this one with the rolename 'subDepts'
		 *         (connected with a <code>de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment</code> edge).
		 */
		public Iterable<? extends de.uni_koblenz.oneoonecompanies.schema.Department> get_subDepts();

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasDepartment or subtypes.
	 */
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasDepartment> getHasDepartmentIncidences();
	
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasDepartment.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasDepartment> getHasDepartmentIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasEmployee or subtypes.
	 */
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasEmployee> getHasEmployeeIncidences();
	
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasEmployee.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasEmployee> getHasEmployeeIncidences(EdgeDirection direction);

	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSubDepartment or subtypes.
	 */
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment> getHasSubDepartmentIncidences();
	
	
	/**
	 * Returns an Iterable for all incidence edges of this vertex that are of type HasSubDepartment.
	 * @param direction EdgeDirection.IN or EdgeDirection.OUT, only edges of this direction will be included in the Iterable
	 */
	public Iterable<de.uni_koblenz.oneoonecompanies.schema.HasSubDepartment> getHasSubDepartmentIncidences(EdgeDirection direction);
}
