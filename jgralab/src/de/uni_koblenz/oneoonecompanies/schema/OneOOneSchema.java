/*
 * This code was generated automatically.
 * Do NOT edit this file, changes will be lost.
 * Instead, change and commit the underlying schema.
 */

package de.uni_koblenz.oneoonecompanies.schema;

import de.uni_koblenz.jgralab.impl.db.GraphDatabase;
import de.uni_koblenz.jgralab.impl.db.GraphDatabaseException;

import de.uni_koblenz.jgralab.Graph;
import de.uni_koblenz.jgralab.GraphIO;
import de.uni_koblenz.jgralab.GraphIOException;
import de.uni_koblenz.jgralab.ProgressFunction;

import de.uni_koblenz.jgralab.schema.impl.SchemaImpl;

import de.uni_koblenz.jgralab.schema.EdgeClass;
import de.uni_koblenz.jgralab.schema.GraphClass;
import de.uni_koblenz.jgralab.schema.VertexClass;

import de.uni_koblenz.oneoonecompanies.schema.OneOOneSchemaFactory;

import java.lang.ref.WeakReference;

/**
 * The schema OneOOneSchema is implemented following the singleton pattern.
 * To get the instance, use the static method <code>instance()</code>.
 */
public class OneOOneSchema extends SchemaImpl {
	public final GraphClass gc_CompaniesGraph;
	public final VertexClass vc_NamedElement;
	public final VertexClass vc_Company;
	public final VertexClass vc_Person;
	public final VertexClass vc_Manager;
	public final VertexClass vc_Department;
	public final VertexClass vc_Employee;
	public final EdgeClass ec_HasDepartment;
	public final EdgeClass ec_Mentors;
	public final EdgeClass ec_HasEmployee;
	public final EdgeClass ec_HasSubDepartment;

	/**
	 * the weak reference to the singleton instance
	 */
	static WeakReference<OneOOneSchema> theInstance = new WeakReference<OneOOneSchema>(null);
	
	/**
	 * @return the singleton instance of OneOOneSchema
	 */
	public static OneOOneSchema instance() {
		OneOOneSchema s = theInstance.get();
		if (s != null) {
			return s;
		}
		synchronized (OneOOneSchema.class) {
			s = theInstance.get();
			if (s != null) {
				return s;
			}
			s = new OneOOneSchema();
			theInstance = new WeakReference<OneOOneSchema>(s);
		}
		return s;
	}
	
	/**
	 * Creates a OneOOneSchema and builds its schema classes.
	 * This constructor is private. Use the <code>instance()</code> method
	 * to acess the schema.
	 */
	private OneOOneSchema() {
		super("OneOOneSchema", "de.uni_koblenz.oneoonecompanies.schema");

		{
			GraphClass gc = gc_CompaniesGraph = createGraphClass("CompaniesGraph");
			gc.setAbstract(false);
			@SuppressWarnings("unused")
			VertexClass vc_Vertex = getDefaultVertexClass();

			{
				VertexClass vc = vc_NamedElement = gc.createVertexClass("NamedElement");
				vc.setAbstract(true);
				vc.addAttribute(createAttribute("name", getDomain("String"), getAttributedElementClass("NamedElement"), null));
			}

			{
				VertexClass vc = vc_Company = gc.createVertexClass("Company");
				vc.setAbstract(false);
				vc.addSuperClass(vc_NamedElement);
			}

			{
				VertexClass vc = vc_Person = gc.createVertexClass("Person");
				vc.setAbstract(true);
				vc.addSuperClass(vc_NamedElement);
				vc.addAttribute(createAttribute("address", getDomain("String"), getAttributedElementClass("Person"), null));
				vc.addAttribute(createAttribute("salary", getDomain("Integer"), getAttributedElementClass("Person"), null));
			}

			{
				VertexClass vc = vc_Manager = gc.createVertexClass("Manager");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Person);
			}

			{
				VertexClass vc = vc_Department = gc.createVertexClass("Department");
				vc.setAbstract(false);
				vc.addSuperClass(vc_NamedElement);
			}

			{
				VertexClass vc = vc_Employee = gc.createVertexClass("Employee");
				vc.setAbstract(false);
				vc.addSuperClass(vc_Person);
			}

			{
				EdgeClass ec = ec_HasDepartment = gc.createEdgeClass("HasDepartment",
					vc_Company, 1, 1, "", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Department, 1, 2147483647, "departments", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_Mentors = gc.createEdgeClass("Mentors",
					vc_Person, 0, 2147483647, "mentor", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Employee, 0, 1, "mentee", de.uni_koblenz.jgralab.schema.AggregationKind.NONE);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasEmployee = gc.createEdgeClass("HasEmployee",
					vc_Department, 1, 1, "department", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Person, 1, 2147483647, "persons", de.uni_koblenz.jgralab.schema.AggregationKind.SHARED);
				ec.setAbstract(false);
			}

			{
				EdgeClass ec = ec_HasSubDepartment = gc.createEdgeClass("HasSubDepartment",
					vc_Department, 1, 1, "parentDept", de.uni_koblenz.jgralab.schema.AggregationKind.NONE,
					vc_Department, 0, 2147483647, "subDepts", de.uni_koblenz.jgralab.schema.AggregationKind.COMPOSITE);
				ec.setAbstract(false);
			}
		}

		graphFactory = new OneOOneSchemaFactory();

	}

	/**
	 * Creates a new CompaniesGraph graph with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public CompaniesGraph createCompaniesGraph(int vMax, int eMax) {
		return (CompaniesGraph) graphFactory.createGraph(CompaniesGraph.class, null, vMax, eMax);
	}
	
	/**
	 * Creates a new CompaniesGraph graph with the ID <code>id</code> initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param id the id name of the new graph
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	 */
	public CompaniesGraph createCompaniesGraph(String id, int vMax, int eMax) {
		return (CompaniesGraph) graphFactory.createGraph(CompaniesGraph.class, id, vMax, eMax);
	}
	
	/**
	 * Creates a new CompaniesGraph graph.
	*/
	public CompaniesGraph createCompaniesGraph() {
		return (CompaniesGraph) graphFactory.createGraph(CompaniesGraph.class, null);
	}
	
	/**
	 * Creates a new CompaniesGraph graph with the ID <code>id</code>.
	 *
	 * @param id the id name of the new graph
	 */
	public CompaniesGraph createCompaniesGraph(String id) {
		return (CompaniesGraph) graphFactory.createGraph(CompaniesGraph.class, id);
	}
	
	/**
	 * Creates a new CompaniesGraph graph with savemem support with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public CompaniesGraph createCompaniesGraphWithSavememSupport(int vMax, int eMax) {
		throw new UnsupportedOperationException("No Savemem support compiled.");
	}
	
	/**
	 * Creates a new CompaniesGraph graph with savemem support with the ID <code>id</code> initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param id the id name of the new graph
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	 */
	public CompaniesGraph createCompaniesGraphWithSavememSupport(String id, int vMax, int eMax) {
		throw new UnsupportedOperationException("No Savemem support compiled.");
	}
	
	/**
	 * Creates a new CompaniesGraph graph.
	*/
	public CompaniesGraph createCompaniesGraphWithSavememSupport() {
		throw new UnsupportedOperationException("No Savemem support compiled.");
	}
	
	/**
	 * Creates a new CompaniesGraph graph with the ID <code>id</code>.
	 *
	 * @param id the id name of the new graph
	 */
	public CompaniesGraph createCompaniesGraphWithSavememSupport(String id) {
		throw new UnsupportedOperationException("No Savemem support compiled.");
	}
	
	/**
	 * Creates a new CompaniesGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param graphDatabase Database which should contain graph
	 */
	public CompaniesGraph createCompaniesGraphWithDatabaseSupport(String id, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No database support compiled.");
	}
	/**
	 * Creates a new CompaniesGraph graph in a database with given <code>id</code>.
	 *
	 * @param id Identifier of new graph
	 * @param vMax Maximum initial count of vertices that can be held in graph.
	 * @param eMax Maximum initial count of edges that can be held in graph.
	 * @param graphDatabase Database which should contain graph
	 */
	public CompaniesGraph createCompaniesGraphWithDatabaseSupport(String id, int vMax, int eMax, GraphDatabase graphDatabase) throws GraphDatabaseException{
		throw new UnsupportedOperationException("No database support compiled.");
	}
	/**
	 * Creates a new CompaniesGraph graph with transaction support with initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	*/
	public CompaniesGraph createCompaniesGraphWithTransactionSupport(int vMax, int eMax) {
		throw new UnsupportedOperationException("No Transaction support compiled.");
	}
	
	/**
	 * Creates a new CompaniesGraph graph with transaction support with the ID <code>id</code> initial vertex and edge counts <code>vMax</code>, <code>eMax</code>.
	 *
	 * @param id the id name of the new graph
	 * @param vMax initial vertex count
	 * @param eMax initial edge count
	 */
	public CompaniesGraph createCompaniesGraphWithTransactionSupport(String id, int vMax, int eMax) {
		throw new UnsupportedOperationException("No Transaction support compiled.");
	}
	
	/**
	 * Creates a new CompaniesGraph graph.
	*/
	public CompaniesGraph createCompaniesGraphWithTransactionSupport() {
		throw new UnsupportedOperationException("No Transaction support compiled.");
	}
	
	/**
	 * Creates a new CompaniesGraph graph with the ID <code>id</code>.
	 *
	 * @param id the id name of the new graph
	 */
	public CompaniesGraph createCompaniesGraphWithTransactionSupport(String id) {
		throw new UnsupportedOperationException("No Transaction support compiled.");
	}
	
	/**
	 * Loads a CompaniesGraph graph from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @return the loaded CompaniesGraph
	 * @throws GraphIOException if the graph cannot be loaded
	 */
	public CompaniesGraph loadCompaniesGraph(String filename) throws GraphIOException {
		return loadCompaniesGraph(filename, null);
	}
	
	/**
	 * Loads a CompaniesGraph graph from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @param pf a progress function to monitor graph loading
	 * @return the loaded CompaniesGraph
	 * @throws GraphIOException if the graph cannot be loaded
	 */
	public CompaniesGraph loadCompaniesGraph(String filename, ProgressFunction pf) throws GraphIOException {
		Graph graph = GraphIO.loadGraphFromFileWithStandardSupport(filename, this, pf);
	if (!(graph instanceof CompaniesGraph)) {
		throw new GraphIOException("Graph in file '" + filename + "' is not an instance of GraphClass CompaniesGraph");
	}	return (CompaniesGraph) graph;

	}
	
	/**
	 * Saves a CompaniesGraph graph to the file <code>filename</code>.
	 *
	 * @param CompaniesGraph the graph to save
	 * @param filename the name of the file
	 * @throws GraphIOException if the graph cannot be saved
	 */
	
	public void saveCompaniesGraph(String filename, CompaniesGraph CompaniesGraph) throws GraphIOException {
		saveCompaniesGraph(filename, CompaniesGraph, null);
	}
	/**
	 * Saves a CompaniesGraph graph to the file <code>filename</code>.
	 *
	 * @param CompaniesGraph the graph to save
	 * @param filename the name of the file
	 * @param pf a progress function to monitor graph loading
	 * @throws GraphIOException if the graph cannot be saved
	 */
	
	public void saveCompaniesGraph(String filename, CompaniesGraph CompaniesGraph, ProgressFunction pf) throws GraphIOException {
		GraphIO.saveGraphToFile(filename, CompaniesGraph, pf);
	}
	
	/**
	 * Loads a CompaniesGraph graph with savemem support from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @return the loaded CompaniesGraph
	 * @throws GraphIOException if the graph cannot be loaded
	 */
	public CompaniesGraph loadCompaniesGraphWithSavememSupport(String filename) throws GraphIOException {
		throw new UnsupportedOperationException("No Savemem support compiled.");
	}
	
	/**
	 * Loads a CompaniesGraph graph with savemem support from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @param pf a progress function to monitor graph loading
	 * @return the loaded CompaniesGraph
	 * @throws GraphIOException if the graph cannot be loaded
	 */
	public CompaniesGraph loadCompaniesGraphWithSavememSupport(String filename, ProgressFunction pf) throws GraphIOException {
		throw new UnsupportedOperationException("No Savemem support compiled.");
	}
	/**
	 * Loads a CompaniesGraph graph with transaction support from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @return the loaded CompaniesGraph
	 * @throws GraphIOException if the graph cannot be loaded
	 */
	public CompaniesGraph loadCompaniesGraphWithTransactionSupport(String filename) throws GraphIOException {
		throw new UnsupportedOperationException("No Transaction support compiled.");
	}
	
	/**
	 * Loads a CompaniesGraph graph with transaction support from the file <code>filename</code>.
	 *
	 * @param filename the name of the file
	 * @param pf a progress function to monitor graph loading
	 * @return the loaded CompaniesGraph
	 * @throws GraphIOException if the graph cannot be loaded
	 */
	public CompaniesGraph loadCompaniesGraphWithTransactionSupport(String filename, ProgressFunction pf) throws GraphIOException {
		throw new UnsupportedOperationException("No Transaction support compiled.");
	}
	
	@Override
	public boolean equals(Object o) {
		return super.equals(o);
	}
	
	@Override
	public int hashCode() {
		return super.hashCode();
	}
}
