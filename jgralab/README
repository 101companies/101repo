== Intent ==

use [[Language:TGraphs]] with [[Technology:JGraLab]] in [[Language:Java]]

== Motivation ==

TGraphs are typed, attributed, ordered, and directed graphs.
TGraphs can be maintained in a repository and programmatically processed.
One can clearly use TGraphs to represent companies.
In fact, a TGraphs schema defines the structure of companies.
One can then use supplementary languages and technologies to query and transform such graphs 
so that typical operations on companies are implemented.
In particular, [[Technology:JGraLab]] supports Java-class generation from a TGraphs schema,
and query evaluation with [[Language:GReQL]] on TGraphs.
Transformations can be performed with [[Language:GReTL]]
or ''plain'' Java based on the schema-derived API.

== Languages ==

* [[Language:TGraphs]]
* [[Language:GReQL]]
* [[Language:GReTL]]
* [[Language:Java]]

== Technologies ==

* [[Technology:JGraLab]]: Java-based support for the TGraph technical space
* [[Technology:GReTL]]: the implementation of [[Language:GReTL]]
* [[Technology:JDK]]: provider of javac et al.
* [[Technology:JSE]]: execution platform (Version 1.6)
* [[Technology:Eclipse]]: optional IDE (Version 3.4.1)
* [[Technology:Ant]]: for building
* [[Technology:GraphViz]]: graph visualization

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Depth]]
* [[101feature:Mentoring]]
* [[101feature:Exchange]]
* [[101feature:Visualization]]

== Architecture ==

The ''101companies-schema.xmi'' is the schema TGraph that represents the data
structure for companies. This file was exported from the
IBM Rational Software Architect (RSA) tool and is based on a simple UML class diagram.
The ''101companies-schema.pdf'' illustrates the UML class diagram that was
modeled to represent the schema. The ''101companies-schema.emx'' is the original IBM RSA model file.

The jgralab.jar contains the core technology for creating and operating on TGraphs.
It also contains the facilities for using GReQL. The gretl.jar contains GReTL for modifying TGraphs.



The ''src.de.uni_koblenz.oneoonecompanies'' package contains two hand-written classes:
	(i) ''CompanyCreator.java''
	Creates the companies TGraph/model. This utility class is used by CompanyServices.
	
	(ii) ''CompanyServices.java''
	A full example class that loads the model from a TG file if a model has been
	created before. Otherwise, the model is created first and then written to
	the ''companies.tg'' file. The TG file format is the TGraph-specific format
	for persistency. This class also contains a main method that can be run to
	execute the sample methods that operate on the company data (cut/total/depth/mentoring).
	
== Usage ==

* The implementation is provided as an Eclipse project.
* If the TGraphs schema ''101companies-schema.xmi'' is ever changed, 
then code-generation must be re-executed. 
To this end, run ''ant'' on the included ''build.xml'' file from the command line or from within Eclipse.
This process would re-generate all types in the packages ''...schema'' and ''...schema.impl.std''.
These packages provide the API for ''CompanyServices''.
* There are JUnit tests in package ''...tests''.
Run these tests to exercise all implemented operations and capabilities.
GReQL queries and GReTL transformations are evaluated in due the process.
One of the tests is, in fact, a main method (for the visualization).

== Discussion ==

Here are some minor issues that could be normalized/improved:
* Managers are employees definitely.
* Person not really needed (inheritance illustrated with NamedElement).
* Use float or double instead of ints for salaries.
* Mentors and mentees should be both employees.
* Enforce cardinality constraints for mentors:
** See [[101feature:Mentoring]].
** See prepared test testAddMentorNotOk.

== Contributors ==

* [[Contributor:Tassilo Horn]]
* [[Contributor:Mahdi Derakhshanmanesh]]
