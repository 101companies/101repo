== Intent ==

an implementation in [[Language:Haskell]] using [[SYB]]

== Implementations ==

There is more basic, [[functional programming]]-based implementation
in [[Language:Haskell]]: [[101implementation:haskell]]. The present
implementation exercises an advanced programming technique: [[SYB]]
style of generic programming.

== Languages ==

* [[Language:Haskell]] including [[SYB]]-related extensions

== Technologies ==

* [[Technology:GHCi]]: Haskell interpreter used for testing (Version 6.12.3)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Depth]]
* [[101feature:Serialization]]

== Motivation ==

Several of the 101companies features essentially involve traversal over 
arbitrarily nested data. For instance, totaling all salaries requires
the location of salary subterms at all levels in the term. Hence, 
support for traversals can significantly help here. In fact, [[SYB]]
style of generic programming can be put to work, and the corresponding
function implementations become drastically more concise.

== Architecture ==

The implementation is straightforward. 

There are Haskell modules for the basic features.

* [[101feature:Company]]: ''Company.hs''
* [[101feature:Total]]: ''Total.hs''
* [[101feature:Cut]]: ''Cut.hs''
* [[101feature:Depth]]: ''Depth.hs''

[[101feature:Serialization]] is enabled by "deriving" clauses for type classes ''Read'' and ''Show'' in ''Company.hs''.
[[SYB]] style of generic programming is enabled by "deriving" clauses for type classes ''Typeable'' and ''Data'' in ''Company.hs''.
Finally, there is a ''Main'' module which collects a few test scenarios; see below.

== Usage ==

The Haskell module ''Main'' has to be consulted with GHCi, and the
''main'' function has to be applied so that output for the test
scenarios is produced. The ''expected'' output is available through
the file ''baseline''. There is a ''Makefile'' with a target ''test''
for [[test automation]].

== Contributors ==

* {{101contributor|Ralf LÃ¤mmel|developer}}
