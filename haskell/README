== Intent ==

a simple implementation in [[Language:Haskell]]

== Languages ==

* [[Language:Haskell 98]]

== Technologies ==

* [[Technology:GHCi]]: Haskell interpreter used for testing (Version 6.12.3)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

Basic style of [[functional programming]] is applied. That is,
[[algebraic datatype]]s are used to represent companies, and recursive,
[[Pure computation|pure]] functions implement the [[query]] for
totaling salaries and the [[:Category:transformation]] for cutting
salaries. Since (sufficiently restrictive) algebraic datatypes are
amenable to uniform read and show functions, basic [[serialization]] is
immediately enabled.

== Architecture ==

The implementation is straightforward. 

There are Haskell modules for the basic features.

* [[101feature:Company]]: ''Company.hs''
* [[101feature:Total]]: ''Total.hs''
* [[101feature:Cut]]: ''Cut.hs''

[[101feature:Serialization]] is enabled by "deriving" clauses in ''Company.hs''.
Finally, there is a ''Main'' module which collects a few test scenarios; see below.

== Usage ==

The Haskell module ''Main'' has to be consulted with GHCi, and the
''main'' function has to be applied so that output for the test
scenarios is produced. The ''expected'' output is available through
the file ''baseline''. There is a ''Makefile'' with a target ''test''
for [[test automation]].
