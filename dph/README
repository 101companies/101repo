== Intent ==

exercise [[Parallelism|data parallelism]] in [[Language:Haskell]] using [[Technology:DPH|Data Parallel Haskell]]

== Languages ==

* [[Language:Haskell]]

== Technologies ==

* [[Technology:GHC]] (Version 7.2.1)
* [[Technology:GHCi]] (Version 7.2.1)
* [[Technology:DPH]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Parallelism]]

== Motivation ==

We exercise [[101feature:Parallelism|data parallelism]] in [[Language:Haskell]] ([[Technology:DPH]]). That is, we [[101feature:Total|total]] and [[101feature:Cut|cut]] salaries in a [[101feature:Company|company]] by making use of [[Parallel array|parallel arrays]] and DPH-specific functionality on these arrays.
In this context we also demonstrate some of DPH's (current) limitations (see illustration section for details):
* The inability to mix [[Vectorisation|vectorised]] and non-vectorised code.
* No vectorization support for user-defined types.
* A DPH-specific [[Prelude]] with specific primitive types.
* Data parallelism can only be applied to arrays.
The first two limitations force us to have both vectorised and non-vectorised modules, in which we define the company datatype.
The last limitation forces us to flatten the company to a list of salary values, which are of a DPH-float type, before salaries can be totaled and cut.
The resulting list of cut salary values has then to be "reconsumed" by the company in question.
These flatten/consume and other conversion computations obviously take more time than we gain by switching to parallel salary functions, 
but this implementation is supposed to demonstrate Haskell's data parallelism support rather than being about efficiency.

== Illustration ==

=== Cutting in Parallel ===

As we mentioned in the motivation section, data parallelism can only be applied to arrays.
We therefore flatten the company to become a list of salaries (see [this!!SalaryFlattener.hs] for details).

==== Non-vectorised code ====

Unfortunately the normal Prelude list type <syntaxhighlight lang="haskell" enclose="none">[a]</syntaxhighlight> is not supported in vectorised modules, but a special array type called <syntaxhighlight lang="haskell" enclose="none">PArray a</syntaxhighlight>. We therefore need a special function in a non-vectorised module for converting between <syntaxhighlight lang="haskell" enclose="none">[Float]</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">PArray Float</syntaxhighlight> before we can cut in parallel:

<syntaxhighlight lang="haskell" source="dph/Cut.hs">
cut :: Company -> Company
cut c = (consumeSalaries c) (toList $ cutV $ fromList $ flattenSalaries c)
</syntaxhighlight>

We first flatten the company, then convert the salary list to <syntaxhighlight lang="haskell" enclose="none">PArray Float</syntaxhighlight> and call the cut function <syntaxhighlight lang="haskell" enclose="none">cutV</syntaxhighlight> from a vectorised module. After that we convert back to <syntaxhighlight lang="haskell" enclose="none">[Float]</syntaxhighlight> and call <syntaxhighlight lang="haskell" enclose="none">consumeSalaries</syntaxhighlight> to replace all salaries in the company tree.

==== Vectorised code ====

In the vectorised module for cutting, where we want to work data parallel, we declare:

<syntaxhighlight lang="haskell" source="dph/CutV.hs">
{-# LANGUAGE ParallelArrays #-}
{-# OPTIONS_GHC -fvectorise #-}
</syntaxhighlight>

This tells [[Technology:GHC]] to vectorise this module and that this module uses parallel arrays.
We then define the interface function between vectorised and non-vectorised code <syntaxhighlight lang="haskell" enclose="none">cutV</syntaxhighlight>:

<syntaxhighlight lang="haskell" source="dph/CutV.hs">
cutV :: PArray Float -> PArray Float
{-# NOINLINE cutV #-}
cutV v = toPArrayP (cutVP (fromPArrayP v))
</syntaxhighlight>

This function converts from <syntaxhighlight lang="haskell" enclose="none">PArray Float</syntaxhighlight> to a parallel array <syntaxhighlight lang="haskell" enclose="none">[:Float:]</syntaxhighlight>, calls the
parallel code and converts back to <syntaxhighlight lang="haskell" enclose="none">PArray Float</syntaxhighlight>.
A parallel array can only be used in a vectorised module, so only here can we convert to it. Marking this function <syntaxhighlight lang="haskell" enclose="none">{-# NOINLINE cutV #-}</syntaxhighlight> makes
it usable in non-vectorised modules. <syntaxhighlight lang="haskell" enclose="none">cutP</syntaxhighlight> calls the actual data parallel function <syntaxhighlight lang="haskell" enclose="none">cutVP</syntaxhighlight>, which uses a parallel map function to cut all list values:

<syntaxhighlight lang="haskell" source="dph/CutV.hs">
cutVP :: [:Float:] -> [:Float:]
cutVP = mapP (/2)
</syntaxhighlight>

== Architecture ==

The module in [this!!SalaryFlattener.hs] contains functionality to flatten a company and to replace all salaries.
[this!!Total.hs] and [this!!Cut.hs] host the code for converting between <syntaxhighlight lang="haskell" enclose="none">[Float]</syntaxhighlight> and <syntaxhighlight lang="haskell" enclose="none">PArray Float</syntaxhighlight> and calling data parallel functions for totaling and cutting salaries, which can be found in [this!!TotalV.hs] and [this!!CutV.hs].
The algebraic datatype for companies can be found in [this!!Company.hs]. [this!!SampleCompany.hs] holds a sample company.
[this!!Main.hs] collects test scenarios for totaling and cutting.

== Usage ==

* All sources have to be compiled using the GHC-options <syntaxhighlight lang="make" enclose="none">-c -Odph -fdph-seq</syntaxhighlight>.
* [this!!Main.hs] has to be loaded into GHCi. 
* The <syntaxhighlight lang="haskell" enclose="none">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline]. 
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}