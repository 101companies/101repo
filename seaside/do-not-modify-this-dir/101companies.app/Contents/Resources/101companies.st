WAComponent subclass: #AbstractComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!AbstractComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:14'!renderControlsOn: html	"Serialize the form and return"	html submitButton 			callback:[self answer];			with: 'Save'.	"Return without serializing the form"	html anchor			callback:[self answer];			with:'Cancel'! !AbstractComponent subclass: #AbstractCompositeDepartmentComponent	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!AbstractCompositeDepartmentComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:15'!renderDepartments: aCollection on: html	aCollection ifNotEmpty:[		html div:[			html label:'Departments'.			html unorderedList:[				aCollection do:[:each |					html listItem:[						html anchor 							callback:[self call:(DepartmentComponent new department: each)];							with:(each name)]]]]]! !Object subclass: #AbstractModelEntity	instanceVariableNames: 'name'	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!AbstractModelEntity methodsFor: 'actions' stamp: 'AndyKellens 4/8/2011 16:00'!cut	self subclassResponsibility ! !!AbstractModelEntity methodsFor: 'actions' stamp: 'AndyKellens 4/8/2011 15:58'!total	self subclassResponsibility ! !!AbstractModelEntity methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:53'!name	^ name! !!AbstractModelEntity methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:53'!name: anObject	name := anObject! !AbstractModelEntity subclass: #AbstractCompositeDepartment	instanceVariableNames: 'departments'	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!AbstractCompositeDepartment methodsFor: 'initialize-release' stamp: 'AndyKellens 4/16/2011 19:45'!initialize	super initialize.		departments := OrderedCollection new! !!AbstractCompositeDepartment methodsFor: 'accessing' stamp: 'AndyKellens 4/16/2011 19:45'!departments	^departments! !!AbstractCompositeDepartment methodsFor: 'actions' stamp: 'AndyKellens 4/16/2011 19:46'!cut	self departments do:[:each | each cut]! !!AbstractCompositeDepartment methodsFor: 'actions' stamp: 'AndyKellens 4/16/2011 19:46'!total	^self departments inject:0 into:[:total :current | total + (current total)]! !AbstractCompositeDepartment subclass: #Company	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Company class	instanceVariableNames: ''!!Company class methodsFor: 'instance creation' stamp: 'AndyKellens 4/8/2011 15:55'!new	^super new initialize! !AbstractCompositeDepartmentComponent subclass: #CompanyComponent	instanceVariableNames: 'company'	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!CompanyComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:20'!renderContentOn: html	html heading		level: 1;		with: (company name).	html form:[		self renderNameOn: html.		self renderDepartments: company departments on: html.		self renderSalaryOn: html.		html submitButton			callback:[self answer];			with:'Save']! !!CompanyComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:11'!renderNameOn: html	html div:[		html label: 'Name:'.		html textInput			callback: [ :value | company name: value ];			with: company name]! !!CompanyComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:11'!renderSalaryOn: html	html div:[		html label:'Total salary = ', company total asFloat asString,' $'.		html anchor			callback:[company cut];			with:'Cut']! !!CompanyComponent methodsFor: 'initialize-release' stamp: 'AndyKellens 4/8/2011 16:19'!initialize	super initialize.	company := ManyCompaniesTest createTestModel! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!CompanyComponent class	instanceVariableNames: ''!!CompanyComponent class methodsFor: 'testing' stamp: 'AndyKellens 4/8/2011 16:15'!canBeRoot	^true! !!CompanyComponent class methodsFor: 'initialize' stamp: 'AndyKellens 4/17/2011 17:30'!initialize	self registerSeasideApplication! !!CompanyComponent class methodsFor: 'initialize' stamp: 'AndyKellens 4/17/2011 17:30'!registerSeasideApplication	|app devErrorHandler |	WAAdmin defaultDispatcher handlerAt: '101companies' ifAbsent:[		app := WAAdmin register: self asApplicationAt: '101companies']! !AbstractCompositeDepartment subclass: #Department	instanceVariableNames: 'employees manager'	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!Department methodsFor: 'initialize-release' stamp: 'AndyKellens 4/16/2011 19:45'!initialize	super initialize.	employees := OrderedCollection new! !!Department methodsFor: 'actions' stamp: 'AndyKellens 4/17/2011 17:31'!cut	super cut.	manager cut.	employees do:[:each | each cut]! !!Department methodsFor: 'actions' stamp: 'AndyKellens 4/16/2011 19:46'!total	^self employees inject:((manager total) + (super total)) into:[:total :current | total + current total]! !!Department methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:54'!employees	^employees! !!Department methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:59'!manager 	^manager! !!Department methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 16:08'!manager: anEmployee	manager := anEmployee ! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Department class	instanceVariableNames: ''!!Department class methodsFor: 'instance creation' stamp: 'AndyKellens 4/8/2011 15:54'!new	^super new initialize! !AbstractCompositeDepartmentComponent subclass: #DepartmentComponent	instanceVariableNames: 'department'	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!DepartmentComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:20'!renderContentOn: html	html heading		level:1;		with: department name.	html form:[		self renderDepartmentNameOn: html.		self renderDepartmentManagerOn: html.		self renderDepartments: (department departments) on: html.		self renderEmployeesOn: html.		self renderDepartmentSalaryOn: html.		self renderControlsOn: html]! !!DepartmentComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:05'!renderDepartmentManagerOn: html	html div:[		html label:'Manager:'.		html anchor 			callback:[self call: (EmployeeComponent new employee: department manager)];			with:(department manager name)]! !!DepartmentComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:17'!renderDepartmentNameOn: html	html div:[		html label: 'Name:'.		html textInput			callback: [ :value | department name: value ];			with: department name]! !!DepartmentComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:17'!renderDepartmentSalaryOn: html	html div:[		html label:'Total salary = ', department total asFloat asString,' $'.		html anchor			callback:[department cut];			with:'Cut']! !!DepartmentComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:17'!renderEmployeesOn: html	department employees ifNotEmpty:[		html div:[			html label:'Employees'.			html unorderedList:[				department employees do:[:each |					html listItem:[						html anchor 							callback:[self call:(EmployeeComponent new employee: each)];							with:(each name)]]]]]! !!DepartmentComponent methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 16:32'!department	^ department! !!DepartmentComponent methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 16:32'!department: anObject	department := anObject! !AbstractModelEntity subclass: #Employee	instanceVariableNames: 'address salary'	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!Employee methodsFor: 'actions' stamp: 'AndyKellens 4/8/2011 16:00'!cut	salary := salary / 2! !!Employee methodsFor: 'actions' stamp: 'AndyKellens 4/8/2011 16:00'!total	^salary! !!Employee methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:55'!address	^ address! !!Employee methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:55'!address: anObject	address := anObject! !!Employee methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:55'!salary	^ salary! !!Employee methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 15:55'!salary: anObject	salary := anObject! !AbstractComponent subclass: #EmployeeComponent	instanceVariableNames: 'employee'	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!EmployeeComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:22'!renderAddressOn: html	html div:[		html label: 'Address:'.		html textInput			callback: [ :value | employee address: value ];			with: employee address]! !!EmployeeComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:22'!renderContentOn: html	html heading		level:1;		with: (employee name). 	html form:[		self renderNameOn: html.		self renderAddressOn: html.		self renderSalaryOn: html.		self renderControlsOn: html]! !!EmployeeComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:16'!renderNameOn: html	html div:[		html label: 'Name:'.		html textInput			callback: [ :value | employee name: value ];			with: employee name]! !!EmployeeComponent methodsFor: 'rendering' stamp: 'AndyKellens 4/16/2011 20:16'!renderSalaryOn: html	html div:[		html label: 'Salary:'.		html textInput			callback: [ :value | employee salary: (self floatFromString: value)];			with: employee salary asFloat asString.		html anchor			callback:[employee cut];			with:'Cut'.].	! !!EmployeeComponent methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 16:36'!employee	^ employee! !!EmployeeComponent methodsFor: 'accessing' stamp: 'AndyKellens 4/8/2011 16:36'!employee: anObject	employee := anObject! !!EmployeeComponent methodsFor: 'private' stamp: 'AndyKellens 4/8/2011 16:44'!floatFromString: aString	^[aString asNumber] on: Exception do:[:exc | 0]! !SUnitTest subclass: #ManyCompaniesTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: '101companies'!!ManyCompaniesTest methodsFor: 'tests' stamp: 'AndyKellens 4/8/2011 16:12'!testCut	| company |	company := self class createTestModel.	company cut.	self assert: (company total = (399747 / 2))! !!ManyCompaniesTest methodsFor: 'tests' stamp: 'AndyKellens 4/8/2011 16:07'!testTotal	| company |	company := self class createTestModel.	self assert: (company total = 399747)! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManyCompaniesTest class	instanceVariableNames: ''!!ManyCompaniesTest class methodsFor: 'test data' stamp: 'AndyKellens 4/8/2011 16:08'!createTestModel	| company research development dev1 dev11|	company := Company new name:'meganalysis'.		research := Department new name:'Research'.	development := Department new name:'Development'.	dev1 := Department new name:'Dev1'.	dev11 := Department new name:'Dev1.1'.	company departments add: research; add: development.	development departments add: dev1.	dev1 departments add: dev11.		research manager: (Employee new name:'Craig'; address:'Redmond';salary:123456).	development manager: (Employee new name:'Ray'; address:'Redmond';salary: 234567).	dev1 manager: 	 (Employee new name:'Klaus'; address:'Boston';salary: 23456).	dev11 manager:  (Employee new name:'Karl'; address:'Riga';salary: 2345).		research employees		add:(Employee new name:'Erik'; address:'Utrecht';salary: 12345);		add:(Employee new name:'Ralf'; address:'Koblenz'; salary: 1234).	dev11 employees		add:(Employee new name:'Joe';address:'Wifi City';salary: 2344).	^company! !CompanyComponent initialize!