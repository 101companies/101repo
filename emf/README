== Intent ==

[[M/O mapping]] with [[Technology:EMF]]

== Languages ==

* [[Language:Ecore]]
* [[Language:Java]]

== Technologies ==

* [[Technology:EMF]] (Version 2.6.1)
* [[Technology:Eclipse]] (Version 3.6)

If you use ''Eclipse Modeling Tools'', then you have everything you need.

If you use a different Eclipse Download, you may need to add the EMF plugin.

Update-Site: http://download.eclipse.org/modeling/emf/updates/releases/

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Mentoring]]
* [[101feature:Serialization]]

== Motivation ==

M/O mapping within the Java platform is exercised. The primary data model
for companies is an Ecore model from which an object model for "Model Code"
in EMF's sense is derived. The classes of the Ecore-derived object model are
somewhat richer than [[POJO]], but their core properties and relationships
are similar to a regular OO design (such as the one of
[[101implementation:javaComposition]]), and operations on the EMF objects can 
be implemented as [[:Category:instance method]]s on the Ecore-derived classes.
It should be noted that instance methods on generated classes survive 
re-generation because EMF is capable of distinguishing generated versus
authored class members. The Ecore model is interesting in so far that it
clearly demonstrates the difference between [[Containment relationship|containment]]
vs. [[reference relationship]]s. In particular, the association of mentees and mentores
requires a reference.

== Illustration ==

Ecore supports modeling of structure. Ecore models are represented as XML documents.
The following excerpt shows the declaration of the "classifier" for companies: elements in 
the Ecore-specific namespace are used to break down companies into a name and 
a list of departments:

<syntaxhighlight lang="xml">
<eClassifiers xsi:type="ecore:EClass" name="Company">
  <eStructuralFeatures xsi:type="ecore:EAttribute" name="name"
    ordered="false" lowerBound="1"
    eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
  <eStructuralFeatures xsi:type="ecore:EReference" name="depts"
    ordered="false" upperBound="-1" 
    eType="#//Department" containment="true"/>
</eClassifiers>
</syntaxhighlight>

The Ecore-derived, Java-based object model will not be illustrated here because it covers 
properties and relationships that are similar to a regular OO design, and all additional fields
and methods are not used in the basic scenario at hand. 

Objects of the Ecore-derived model can also be serialized to or de-serialized from XML (XMI).
To this end, the namespace for the model and its implementing package need to be registered 
with the ''registry of EMF's EPackage''. Thus:

<syntaxhighlight lang="java">
EPackage.
  Registry.
  INSTANCE.
  put(CompanyPackage.eNS_URI, CompanyPackage.eINSTANCE);
</syntaxhighlight>

Further, a specific serialization format has to be chosen. To this end, a number of idiosyncratic 
objects have to be constructed and configured so that a preferred file extension is mapped to 
the intended serialization behavior. For instance, the process of loading a company from an ".xmi"
file is organized as follows:

<syntaxhighlight lang="java">
ResourceSet resourceSet = new ResourceSetImpl();
resourceSet.
  getResourceFactoryRegistry().
  getExtensionToFactoryMap().
  put("xmi", new XMIResourceFactoryImpl());
Resource xmiResource = 
  resourceSet.
  createResource(URI.createFileURI("sampleCompany.xmi"));
xmiResource.load(null);
Company c = (Company)xmiResource.getContents().get(0);
</syntaxhighlight>

== Architecture ==

=== Summary ===

File ''model/Company.ecore'' is the Ecode model of companies. File ''model/Company.genmodel'' is the EMF generator model which has been derived from the Ecore model; see below. Files ''model/Company*.xsd'' are XML schemas for XML instances of the Ecore model; they were derived with the Export functionality from the generator model; see below. Package ''company'' and subpackages contain the model code for companies. Most of this code has been generated from the generator model (see below) but the generated code has been enriched with instance methods for [[101feature:Total]] and [[101feature:Cut]]. (We leverage the EMF convention that all generated members are marked by @generated whereas the manually injected members do not carry such markers. In this manner the model code can be regenerated without overriding manually injected members.) Package ''org.softlang.features.Serialization'' contains boilerplate code for serialization. Package ''org.softlang.tests'' contains JUnit tests for operations on companies and serialization.

=== Transcript ===

Creation and evolution of an EMF project with support for serialization is not straightfoward.

The following transcript documents the essential steps and constraints.

==== Create EMF Project ====

* -> New -> Empty EMF Project ...

==== Create Ecore Model ====

* -> New -> Ecore Model 
* Choose the "model" folder of the EMF project.
* Adjust name of model (default My.ecore) if needed.
* Now it is time to work out the Ecore model.
* One needs to define name of the package, namespace URI, and prefix.

A minimal example follows:

<syntaxhighlight lang="xml">
<?xml version="1.0" encoding="UTF-8"?>
<ecore:EPackage xmi:version="2.0"
    xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="foo"
    nsURI="www.foo.com" nsPrefix="bar">
  <eClassifiers xsi:type="ecore:EClass" name="xyz"/>
</ecore:EPackage>
</syntaxhighlight>

==== Create EMF Generator Model ====

* Select the Ecore model in the package explorer.
* -> New -> Generator model 
* Choose the "model" folder of the EMF project.
* When asked for a Model Importer, choose Ecore Model.
* When asked for Model URIs, '''you must Browse Workspace, and select the Ecore file'''.

==== Generate Model Code ====

* Open the generator model.
* Right click on it in the opened view.
* -> Generate Model Code

This will generate several files and folders:
* build.properties
* plugin.properties
* plugin.xml
* src/<your-ecore-name>
* src/<your-ecore-name/impl>
* src/<your-ecore-name/util>

==== Enable XMI/XML resources ====

* Open ''plugin.xml'' with ''plug-in manifest editor''.
* Select ''Dependencies'' tab.
* Add ''org.eclipse.emf.ecore.xmi.impl'' to ''imported packages''.

== Usage ==

* The implementation is provided as an Eclipse project.
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available in package ''org.softlang.tests''.
* If you change the Ecore or generator models, you may need to rerun some EMF tools; see the transcript above.

== Issues ==

* Use case for EMF somewhat trivial; one should make use of richer API (design patterns).

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}