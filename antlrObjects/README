== Intent ==

parsing textual syntax with [[Technology:ANTLR]] in [[Language:Java]]

== Features ==

* [[101feature:Company]] 
* [[101feature:Total]]
* [[101feature:Cut]]  
* [[101feature:Parsing]] 
* [[101feature:Serialization]] 

== Languages ==

* [[Language:Java]]

== Technologies ==

* [[Technology:ANTLR]] (Version 3.2)
* [[101profile:Java CLI]]

== Motivation ==

An ANTLR-based parser for a concrete syntax of companies is provided.
The parser translates text into company objects.
To this end, a straightforward object model for companies is used.
(In fact, the object model is very similar to the one of [[101implementation:javaComposition]].
The mapping is described by the semantic actions within the ANTLR-based parser description.
The underlying grammar is LL(1).
Basic operations are implemented on top of the object model in basic OO programming style.
Pretty printing for the concrete syntax is also supported.
Hence, text-based serialization is fully enabled.

== Illustration ==

The following ANTLR production shows the syntax of departments---yet without semantic actions:

<syntaxhighlight lang="antlr">
dept :
  'department' STRING '{' 
    ('manager' employee)
    ('employee' employee)* 
    dept*
  '}';
</syntaxhighlight>

That is, a department begins with the keyword "department", followed by a 
''STRING'' for the department's name, followed by a manager, which is an employee
prefixed by the keyword "manager", followed by a sequence of 
employees, finally, followed by a sequence of sub-departments. 
The same production, with semantic actions for object synthesis included, looks as follows:

<syntaxhighlight lang="antlr">
dept returns [Department d]:
  { $d = new Department(); }
  'department' name=STRING
  { $d.setName($STRING.text); } 
  '{'
    'manager' m=employee
    { $d.setManager($m.e); }
    ( 'employee' e=employee
      { $d.getEmployees().add($e.e); }
    )*
    ( sub=dept
      { $d.getSubdepts().add($sub.d); }
    )*
  '}'
  ;
</syntaxhighlight>

That is, semantic actions are enclosed into braces {...}, and they are placed in an appropriate positions
of alternatives. The first semantic action constructs a department object; all subsequent actions populate the object.

== Architecture ==

See [[101implementation:antlrAcceptor]] for general instructions on the architecture of ANTLR-based implementations.
The object model for companies with methods for the basic operations is adopted from [[101implementation:javaComposition]].

== Usage ==

See [[101implementation:antlrAcceptor]] for general instructions on the usage of ANTLR-based implementations.

== Contributors ==

* {{101contributor|Ralf LÃ¤mmel|developer}}
