== Intent ==

parsing textual syntax with [[Technology:ANTLR]] in [[Language:Java]]

== Features ==

* [[101feature:Company]] 
* [[101feature:Parsing]] 

== Languages ==

* [[Language:Java]]

== Technologies ==

* [[Technology:ANTLR]]
* [[101profile:Java CLI]]

== Motivation ==

A parser for a concrete syntax of companies is provided.
The parser translates text into company objects.
To this end, a straightforward object model for companies is used.
(In fact, the object model is very similar to the one of [[101implementation:javaComposition]].
The mapping is described by the semantic actions within the ANTLR-based parser description.

== Illustration ==

Consider the following grammar fragment in ANTLR notation:

<syntaxhighlight lang="antlr">
dept :
  'department' STRING '{' 
    ('manager' employee)
    ('employee' employee)* 
    dept*
  '}';
</syntaxhighlight>

That is, the concrete syntax of a department is defined to
start off with the keyword "department", followed by a ''STRING'' for
the department's name, followed by a manager, which is an employee
prefixed by the keyword "manager", followed by a sequence of 
employees, finally, followed by a sequence of sub-departments. The shown
production needs to evolve once objects should be constructed from the
parsed input:

<syntaxhighlight lang="antlr">
dept returns [Department d]:
  { $d = new Department(); }
  'department' name=STRING
  { $d.setName($STRING.text); } 
  '{'
    'manager' m=employee
    { $d.setManager($m.e); }
    ( 'employee' e=employee
      { $d.getEmployees().add($e.e); }
    )*
    ( sub=dept
      { $d.getSubdepts().add($sub.d); }
    )*
  '}'
  ;
</syntaxhighlight>

If all sections encloded in braces were removed from the shown ANTLR fragment, the
above-mentioned purely context-free grammar would be re-obtained. The first semantic
action constructs a department object while all subsequent actions affect the new 
object.

== Architecture ==

See [[101implementation:antlr]] for general instructions on the architecture of ANTLR-based implementations.
The object model for companies with methods for the basic operations is adopted from [[101implementation:java]].
(Serialization capabilities are not included though.)

== Usage ==

See [[101implementation:antlrAcceptor]] for general instructions on the usage of ANTLR-based implementations.

== Contributors ==

* {{101contributor|Ralf LÃ¤mmel|developer}}