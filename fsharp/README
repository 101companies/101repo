== Intent ==

A simple implementation in [[Language:FSharp|F#]] for the [[Technology:.NET]] Framework

== Languages ==

* [[Language:FSharp]] (F#): Programming language used for all code (Version 2.0)

== Technologies ==

* [[Technology:fcs.exe]]: F# compiler (Version 2.0)
* [[Technology:.NET]]: framework used to execute compiled code (Version 4.0)
* [[Technology:NUnit]]: unit testing framework used for testing (Version 2.5)
* [[Technology:Visual Studio]]: optional IDE (Version 2010)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]

== Motivation ==

Multiparadigm nature of F# is shown;
both OO and FP features of the languages are illustrated by adjusting a basic [[101implementation:csharp | C#]] implementation.

== Illustration ==


<syntaxhighlight lang="fsharp">
    type Company() = 
     class
       let mutable name = ""
       let mutable departments:List<Department> = new List<Department>() 
  
       member this.Name with get() = name and set v = name <- v
       member this.Departments with get() = departments and set v = departments <- v
</syntaxhighlight>


Here we define a member which is essentially a wrapper around pure functional style of calculating total using accumulator. (''fold'' function from F# library is used)

<syntaxhighlight lang="fsharp">
 member this.TotalSalaries =
        let x = List.fold (fun (acc) (elem:Department) -> acc + elem.Total) 0M (List.ofSeq departments)
        x

</syntaxhighlight>

== Architecture ==

== Usage ==

To make NUnit GUI working with .NET 4.0
Under <configuration> add:
<nowiki>

<startup>
  <supportedRuntime version="v4.0.30319" />
</startup>
</nowiki>

and under <runtime> add:
<loadFromRemoteSources enabled="true" />

== Contributors ==

* {{101contributor|Andrei Varanovich|developer}}