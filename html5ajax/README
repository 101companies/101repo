== Intent ==

[[web programming]] with [[Language:HTML5]]

== Languages ==

* [[Language:HTML5]]
* [[Language:JavaScript]]
* [[Language:php]]
* [[Language:SQL]]

== Technologies ==

* [[Technology:MySQL]]
* [[Technology:XAMPP]]
* [[Technology:Apache_HTTP_Server|Apache HTTP Server]]
* [[Technology:XMLHttpRequest]]
* [[Technology:Webbrowser]] (HTML5 compliant)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Persistence]]
* [[101feature:Interaction]]
* [[101feature:Precedence]]
* [[101feature:Validation]]

== Motivation ==

This [[Language:HTML5|HTML5]]-project provides an optimized [[server-side]] data storage. While other projects like [[101implementation:XMLHttpRequest]] transmit the whole company-data from the [[server]] to the [[client]], this application only transmit the necessary data for the current page. This is realized with [[Technology:XMLHttpRequest]] and a [[server-side]] [[Language:php]]-script. The client sends a request to the [[server]] and the [[Language:php]]-script decides, which data should be transmitted. The response is wrapped in a stringified [[Technology:JSON]]-Object, which easily can be decoded by the [[client]]. It is evident to use [[Language:SQL]] for data storage in combination with the [[server-side]] [[Language:php]]-script.

== Illustration ==

The client sends [[Technology:JSON]]-messages to the server using [[Technology:XMLHttpRequest]]. A [[Technology:JSON]]-message contains the information for the current page and some extra information about the action invoked on this page. A stringified JSON-object for cutting the company is looking like:

<syntaxhighlight lang="text">
{
	"id":1,
	"table":"company",
	"action":"cut"
}
</syntaxhighlight>

This message tells the server to [[101feature:Cut|cut]] the company with the identifier 1. The answer for this request is a stringified company object with all needed informations about the [[101feature:Company|company]] (and nothing more):

<syntaxhighlight lang="text">
{
	"name":"meganalysis",
	"departments":["Research","Development"],
	"total":199873.5
}
</syntaxhighlight>

The [[server]] receives the [[101feature:Cut|cut]]-request and performs the action:

<syntaxhighlight lang="php">
// ---------------------------------------- cut company
function cut($jsonObject) {
	$id = $jsonObject->id;
	$request = "UPDATE employee SET salary = salary / 2 WHERE cid = $id";
	mysql_query($request);
        
	return loadCompany($jsonObject);
}
</syntaxhighlight>

== Architecture ==

* This application is implemented with [[Architecture:MVC|MVC]]. The client is devided into the [[101feature:Interaction|view]] (example for company: [this!!/client/company.html company.html], [this!!/client/javascript/view/companyView.js companyView.js]), the controller ([this!!/client/javascript/controller.js controller.js]) and the model (example for company: [this!!/client/javascript/model/companyModel.js companyModel.js]).

* The [[Technology:XMLHttpRequest|requests]] are encoded with [[Technology:JSON]]. Visit http://en.wikipedia.org/wiki/JSON to get more information.

== Usage ==

You need a web- and sql-server to use this application. In this tutorial both will be taken by XAMPP: http://www.apachefriends.org/en/xampp.html

This tutorial adopts some parts of [[101implementation:mySql]]. The company.sql and sampleCompany.sql are modified for this project. They are located in the "sqlScripts" folder.

* Download and install XAMPP
* Open the "XAMPP Control Panel" and start "Apache" and "MySQL"
* Use the guideline of [[101implementation:mySql]] up to "Populate tables..." with the modified sql-scripts.

After the database is running, follow the next steps:

* To start the application, you need to download all project-files except the README
* Put the files into the htdocs-directory of your XAMPP (a new sub-directory in "htdocs" is recommended)
* Run index.html

== Contributors ==

* {{101contributor|Tobias Zimmer|developer}}