== Intent ==

a simple implementation in [[Language:Java]]

== Languages ==

* [[Language:Java]]

== Technologies ==

* [[Technology:JDK]]: provider of javac et al.
* [[Technology:JSE]]: execution platform (Version 1.6)
* [[Technology:JUnit]]: automated testing support (Version 4)
* [[Technology:Eclipse]]: optional IDE (Version 3.4.1)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

Basic style of [[OO programming]] is applied. A simple [[object model]]
is provided for feature [[101feature:Company]]. The object model leverages 
[[object composition]] to compose companies from (nested) departments
and employees. Refer to [[101implementation:java2]] for a variation on the
present implementation which uses [[class inheritance]] instead of
[[object composition]]. The operations for features [[101feature:Total]] and
[[101feature:Cut]] are implemented as methods. Collections of 
[[static method]]s are used as opposed to [[virtual method]]s. This
is possible because the chosen object model for companies does not 
exercise [[class inheritance]], and, in fact, no [[subtype polymorphism]] 
is used whatsoever. Feature [[101feature:Serialization]] is implemented
with the help of [[Technology:Object Streams]]. To this end, the 
[[Marker interface pattern|marker interface]] ''Serializable'' is applied 
to the classes of the object model for companies. This form of serialization
counts as [[closed serialization]] because the serialization format is
definitely Java-specific.

== Architecture ==

Package ''org.softlang.company'' hosts the object model for [[101feature:Company]].
Package ''org.softlang.features'' hosts designated classes with static methods for
the operations [[101feature:Total]] and [[101feature:Cut]] as well some helpers
for [[101feature:Serialization]]. Package ''org.softlang.tests'' hosts JUnit tests;
see below.

== Usage ==

* The implementation is provided as an Eclipse project.
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available as the package ''org.softlang.tests''.
** Run class ''Basics'' with JUnit to exercise basic features.
** Run class ''Serialization'' with JUnit to exercise serialization.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}