== Intent ==

basic OO programming in [[Language:Java]]

== Languages ==

* [[Language:Java]] (Version 5)

== Technologies ==

* [[Technology:JDK]]: provider of javac et al.
* [[Technology:JSE]]: execution platform (Version 1.6)
* [[Technology:JUnit]]: automated testing support (Version 4)
* [[Technology:Eclipse]]: optional IDE (Version 3.4.1)

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Serialization]]

== Motivation ==

Basic style of [[OO programming]] is applied. A simple [[object model]]
is provided for [[101feature:Company]]. The object model leverages 
[[object composition]] to compose companies from (nested) departments
and employees. (No [[class inheritance]] is exercised, but see 
[[101implementation:javaInheritance]] for a variation that indeed leverages class
inheritance.) The operations for [[101feature:Total]] and
[[101feature:Cut]] are implemented as [[:Category:instance method]]s on
the classes for companies, departments, and employees. Further, 
[[101feature:Serialization]] is implemented with the help of 
[[Technology:Object Streams]]. To this end, the 
[[Marker interface pattern|marker interface]] ''Serializable'' is applied 
to the classes of the object model for companies. This form of serialization
counts as [[closed serialization]] because the serialization format is
definitely Java-specific. 

== Illustration ==

It follows a sketch of the class for companies with fields 
and properties for company name and its list of departments
as well as methods for totaling salaries and cutting them in
half. The classes for departments and employees are omitted
here; they all model straightforward [[POJO]]s.

<syntaxhighlight lang="java">
public class Company implements Serializable {
  private static final long serialVersionUID = ...;
  private String name;
  private List<Department> depts;
  public String getName() { ... }
  public void setName(String name) { ... }
  public List<Department> getDepts() { ... }
  public Double total() { ... }
  public void cut() { ... }
}
</syntaxhighlight>

Here is the implementation of ''cut''; basically, the
operation is delegated to the individual departments,
and the operation is implemented as an [[impure computation]],
i.e., as a void method:

<syntaxhighlight lang="java">
public void cut() {
  for (Department d : getDepts())
    d.cut();
}	
</syntaxhighlight>

== Architecture ==

Package ''org.softlang.company'' hosts the object model for [[101feature:Company]]
with the methods for [[101feature:Total]] and [[101feature:Cut]]. Some boilerplate
code for [[101feature:Serialization]] and testing its correct implementation is to 
be found in package ''org.softlang.serialization''. Package ''org.softlang.tests'' 
hosts JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project. 
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available in the package ''org.softlang.tests''.
** Run class ''Basics'' with JUnit to exercise basic features.
** Run class ''Serialization'' with JUnit to exercise serialization.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}