== Intent ==

database programming with [[Technology:HDBC]]

== Languages ==

* [[Language:Haskell 98]]
* [[Language:SQL]] (MySql dialect)

== Technologies ==

* [[Technology:HDBC]]
* [[Technology:MySql]]
* [[Technology:GHCi]]      

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]

== Motivation ==

We use [[Technology:HDBC]] for data processing. That is, we use embedded [[Language:SQL]] in [[Language:Haskell]] to [[101feature:Total|total]] 
and [[101feature:Cut|cut]] [[101feature:Company|company]] salaries within the database. To connect to the [[Technology:MySql]] [[Database|database]] we use an [[ODBC]] backend. The actual functionality to cut and total salaries is independent from the concrete [[Database implementation|database implementation]]. We demonstrate the use of [[Prepared statement|prepared statements]] in HDBC.

== Illustration ==

=== Connecting ===

In the ''Main'' module (in [this!!Main.hs]) we connect to the MySql database by using appropriate connection information:

<syntaxhighlight lang="haskell">
let connString = "Driver={MySQL ODBC 5.1 Driver};Server=localhost;Port=3306;Database=101companies;User=root;"
conn <- connectODBC connString
</syntaxhighlight>

=== Cutting ===

We can now use the open connection to cut all salaries:
<syntaxhighlight lang="haskell">
let cName = "meganalysis"
cut conn cName
</syntaxhighlight>

We are using the <syntaxhighlight lang="haskell" enclose="none">cut</syntaxhighlight> function, which is provided by the ''Cut'' module (code can be found in [this!!Cut.hs]):

<syntaxhighlight lang="haskell">
cut :: IConnection conn => conn -> String -> IO ()
cut conn cName = do
    stmt <- prepare conn "UPDATE employee SET salary = salary / 2 WHERE employee.cid = (SELECT id FROM Company WHERE name = ?)"
    execute stmt [toSql cName] 
    commit conn
</syntaxhighlight>

The function uses a prepared statement in which the company name placeholder is then replaced by the given name <syntaxhighlight lang="haskell" enclose="none">cName</syntaxhighlight>. The statement is exectuted and the change is commited to the database.

== Architecture ==

We provide sql-scripts to create (see [this!!Company.sql]) company tables and populate (see [this!!Meganalysis.sql]) these tables. [this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality using SQL Statements. The ''Main'' module (in [this!!Main.hs]) collects test scenarios for totaling and cutting.

== Usage ==

=== Setup ===
We need a local database server.
In the following we explain the steps for [http://www.apachefriends.org/en/xampp.html XAMPP].

We also need some SQL tool.
In the following we explain the steps for [http://dev.mysql.com/downloads/workbench/ MySQL Workbench].


* Download and install XAMPP
* Open the "XAMPP Control Panel" and start "Apache" and "Mysql"
* A local MySQL Server is now running:
{| class="wikitable" style="text-align:center"
|-
! Server Host
| localhost
|-
! Port
| 3306
|-
! Username
| root
|-
! Password
| (no password)
|}

* Connect to database in MySQL Workbench
* Select "101companies" schema or create one
* Create tables (run SQL script Company.sql)
* Populate tables (run SQL script sampleCompany.sql)

=== Testing ===

* Now the Haskell module ''Main'' has to be run using GHCi, and the ''main'' function has to be applied.  
* The output should be equal to the content of [this!!basefile]
There is a ''Makefile'' with a target ''test'' for [[test automation]].

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}