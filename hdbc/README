== Intent ==

[[:Category:Database_management_system|Database]] programming with [[Technology:HDBC]]

== Languages ==

* [[Language:Haskell]]
* [[Language:SQL]] (MySQL dialect)

== Technologies ==

* [[Technology:HDBC]]
* [[Technology:MySQL]]
* [[Technology:GHCi]]   
* [[Technology:ODBC]]   

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]
* [[101feature:Persistence]]
* [[101feature:Mapping]]

== Motivation ==

We use [[Technology:HDBC]] to query [[101feature:Persistence|persisted]] company data. That is, we use embedded [[Language:SQL]] in [[Language:Haskell]] to [[101feature:Total|total]] 
and [[101feature:Cut|cut]] [[101feature:Company|company]] salaries within a [[:Category:Database_management_system|database]]. SQL query results are [[101feature:Mapping|mapped]] to special HDBC datatypes. In this context we demonstrate the use of [[Prepared statement|prepared statements]] in HDBC. We illustrate lazy fetching of query results. To connect to the [[Technology:MySQL]] database we use an [[Technology:ODBC|ODBC]] backend. The actual functionality to cut and total salaries is independent from the concrete [[:Category:Database_management_system|database implementation]]. 

== Illustration ==

=== Connecting ===

In [this!!Main.hs] we connect to the MySQL database by using an ODBC driver and other appropriate connection information:

<syntaxhighlight lang="haskell" source="hdbc/Main.hs">
let connString = "Driver={MySQL ODBC 5.1 Driver};"
              ++ "Server=localhost;"
              ++ "Port=3306;"
              ++ "Database=101companies;"
              ++ "User=root;"
conn <- connectODBC connString
</syntaxhighlight>

=== Totaling ===

The function <syntaxhighlight lang="haskell" enclose="none">total</syntaxhighlight> defines a statement to total all salaries:

<syntaxhighlight lang="haskell" source="hdbc/Cut.hs">
total :: IConnection conn => conn -> String -> IO Double
total conn cName = do
     stmt <- prepare conn $ 
        "SELECT salary " ++ 
        "FROM employee, company " ++ 
        "WHERE company.name = ? and " ++ 
        "company.id = employee.cid"
     execute stmt [toSql cName]
     res <- fetchAllRows stmt
     return $ sum (map (fromSql.head) res)        
</syntaxhighlight>

In line 3 we use a prepared statement in which the company name placeholder is then replaced by the given name <syntaxhighlight lang="haskell" enclose="none">cName</syntaxhighlight>. The statement is executed and we use the lazy HDBC function <syntaxhighlight lang="haskell" enclose="none">fetchAllRows</syntaxhighlight> in line 9 to get all salaries, which we then sum up lazy to a <syntaxhighlight lang="haskell" enclose="none">Double</syntaxhighlight> value and return in line 10. That is, salaries are fetched one by one from the database.
We can now use the open connection to total all salaries:
<syntaxhighlight lang="haskell" source="hdbc/Main.hs">
let cName = "meganalysis" 
oldTotal <- total conn cName
</syntaxhighlight>

Functionality to cut all salaries uses an UPDATE statements instead of SELECT (see [this!!Cut.hs] for details).

== Architecture ==

[this!!Company.sql] and [this!!Meganalysis.sql] provide SQL-scripts to create and populate company tables. [this!!Total.hs] and [this!!Cut.hs] provide totaling and cutting functionality using SQL Statements. [this!!Main.hs] collects test scenarios for totaling and cutting.

== Usage ==

=== Setup ===

We need a local database server.
In the following we explain the steps for XAMPP <cite>xampp</cite>.
We also need some SQL tool.
In the following we explain the steps for the MySQL Workbench <cite>mysqlworkbench</cite>.

* Download and install XAMPP.
* Open the "XAMPP Control Panel" and start "Apache" and "Mysql".
* A local MySQL Server is now running:
** '''Server Host''': localhost       
** '''Port''': 3306             
** '''Username''': root             
** '''Password''': (empty password) 
* Connect to database in MySQL Workbench.
* Select "101companies" schema or create one.
* Create tables (run SQL script Company.sql).
* Populate tables (run SQL script sampleCompany.sql).

=== Testing ===

* [this!!Main.hs] has to be loaded into GHCi. 
* The <syntaxhighlight lang="haskell" enclose="none">main</syntaxhighlight> function has to be applied.
* The output should be equal to the content of the file [this!!baseline].
One can also use the [this!!Makefile] with a target ''test'' for [[test automation]].

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}

== References ==

<biblio>
#xampp bibtex=@online{xampp,
  title = "{Apache friends: XAMPP}",
  note = {\newline \url{http://www.apachefriends.org/en/xampp.html}}
}

#mysqlworkbench bibtex=@online{mysqlworkbench,
  title = "{MySQL Workbench}",
  note = {\newline \url{http://dev.mysql.com/downloads/workbench/}}
}