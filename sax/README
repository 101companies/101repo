== Intent ==

exercise [[push-based XML parsing]] with [[Technology:SAX]] in [[Language:Java]]

== Languages ==

* [[Language:XML]]
* [[Language:XSD]]
* [[Language:Java]]

== Technologies ==

* [[Technology:SAX]]
* [[Technology:XMLStreamWriter]]
* [[Technology:JAXP]]: implementation of SAX and other XML functionality
* [[101profile:Simple Java]]

== Features ==

* [[101feature:Company]]
* [[101feature:Total]]
* [[101feature:Cut]]

== Motivation ==

[[:Category:XML processing]]

== Architecture ==

Package ''org.softlang.operations'' hosts implementations of the operations
[[101feature:Total]] and [[101feature:Cut]]. These operations are implemented
by SAX handlers; output XML is written with XMLStreamWriter. [[101feature:Company]] 
is implemented by the XML schema Company.xsd. The schema is not needed for the 
basic operations, but one can perform XML validation with regard to the schema; 
see the JUnit tests. Package ''org.softlang.sax'' hosts some boilerplate code
for SAX: it covers basic functionality for parsing, tracing, and validation.
Package ''org.softlang.tests'' hosts various JUnit tests; see below.

== Usage ==

* The implementation is provided as an Eclipse project. 
* Hence, open the project with Eclipse; this will also build the project.
* There are JUnit tests available in the package ''org.softlang.tests''.
** Run class ''Operations'' with JUnit to exercise basic operations.
** Run class ''Trace'' with JUnit to see the trace of parsing a file with SAX.
** Run class ''Validate'' with JUnit to validate all XML files against the schema for companies.

== Contributors ==

* {{101contributor|Thomas Schmorleiz|developer}}
* {{101contributor|Ralf LÃ¤mmel|developer}}